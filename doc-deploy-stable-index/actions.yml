name: >
  Doc deploy stable index action

description: |
  This action automates the process of creating indexes and scraping the
  desired HTML documentation artifact that contains the development version
  of a library, then deploying it to a Meilisearch instance.

inputs:

  # Required inputs

  cname:
    description: >
      The Canonical Name (CNAME) that points to the documentation website.
    required: true
    type: string

  library-name:
    description: >
      The name of the library.
    required: true
    type: string

  api-key:
    description: >
      The API key used to access the Meilsearch instance host.
    required: true
    type: string

  host-url:
    description: >
      The URL where the Meilsearch instance is hosted.
    required: true
    type: string

  python-version:
    description: >
      Python version used for execution of the stable docs scraping.
    required: true
    type: string


  # Optional inputs

  doc-artifact-name:
    description: >
      The name of the HTML documentation artifact. This artifact is expected to
      contain all the HTML and static files.The dafault value is ``documentation-html``.
    required: false
    default: 'documentation-html'
    type: string

  template:
    description: >
      The "template" parameter specifies the layout used for the HTML documentation.
      By default, it is set to ``sphinx_pydata`` which assumes that the document is
      constructed using the pydata-sphinx-theme or its associated theme,
      such as the ansys-sphinx-theme.
    required: false
    default: "sphinx_pydata"
    type: string

  target:
    description: >
      Optional target used during the building process for version.
    required: false
    default: ''
    type: string


runs:
  using: "composite"
  steps:

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Checkout the repository branch for deploying the documentation. If
          this step fails, then it means that the provided token is not valid.

    - name: "Get the name of the repository"
      shell: bash
      run: |
        if [[ "${{ inputs.repository }}" == "current" ]]; then
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        else
          echo "REPOSITORY=${{ inputs.repository }}" >> $GITHUB_ENV
        fi

    - name: "Checkout ${{ env.REPOSITORY }} repository"
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPOSITORY }}
        ref: ${{ inputs.branch }}
        token: ${{ inputs.token }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Download the documentation artifact from the current workflow.

    - name: "Download the development documentation artifact"
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.doc-artifact-name }}
        path: ${{ inputs.doc-artifact-name }}

    - name: "Display structure of ${{ inputs.doc-artifact-name }}"
      shell: bash
      run: |
        ls -R ${{ inputs.doc-artifact-name }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Install the pymeilisearch required for the indexing.

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install pymeilisearch

    - name: "Update pip and install the build and wheel libraries"
      shell: bash
      run: |
        python -m pip install --upgrade pip build wheel

    - name: "Check if specific target is requested"
      shell: bash
      run: |
        echo "install_target=$( [[ '${{ inputs.target }}' == '' ]] && echo '.' || echo '.[${{ inputs.target }}]')" >> $GITHUB_ENV

    - name: "Install the library"
      shell: bash
      run: |
        python -m pip install ${{ env.install_target }}

    - name: "Verify if importlib-metadata needs to be installed"
      shell: bash
      run: |
        python_version="${{ inputs.python-version }}"
        if (( $(echo "$python_version < 3.8" | bc -l) )); then
          echo "needs_importlib_metadata=true" >> $GITHUB_ENV
        else
          echo "needs_importlib_metadata=false" >> $GITHUB_ENV
        fi

    - name: "Install importlib-metadata (only for Python <= 3.7)"
      if: env.needs_importlib_metadata == 'true'
      shell: bash
      run: |
        python -m pip install importlib-metadata

    - name: "Verify library is properly installed and get its version number"
      shell: bash
      run: |
        library_name=${{ inputs.library-name }}

        if [ ${{ env.needs_importlib_metadata }} ]; then
          VERSION=$(python -c "import importlib_metadata; print(importlib_metadata.version('$library_name'))")
        else
          VERSION=$(python -c "import importlib.metadata as importlib_metadata; print(importlib_metadata.version('$library_name'))")
        fi

     # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Scrap the document and deploy it to pymeilisearch.

    - name: Scrape the dev documentation to meilisearch
      shell: bash
      run: |
        VERSION_MEILI=$(python -c "print('$VERSION'.replace('.', '-'))")
        pymeilisearch upload --template ${{ inputs.template }} --index ${{ inputs.library_name }}-v$VERSION  --cname ${{ inputs.cname }}/version/$VERSION/ html ${{ inputs.doc-artifact-name }}
      env:
        MEILISEARCH_HOST_URL: ${{ inputs.host-url }}
        MEILISEARCH_API_KEY: ${{ inputs.api-key }}