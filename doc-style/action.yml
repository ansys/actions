# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Documentation style

description: |
    Check documentation style using `Vale <https://vale.sh/>`_. This action is a
    wrapper on top of the `errata-ai/vale-action
    <https://github.com/errata-ai/vale-action>`_.

inputs:

  # Required inputs

  token:
    description: |
      The token value used to authorize Vale to add comments and suggestions in
      the file section.
    required: true
    type: string

  # Optional inputs

  files:
    description: |
      Path to the directory containing the documentation files.
    default: 'doc'
    required: false
    type: string

  vale-config:
    description: |
      Path to the Vale configuration file.
    default: 'doc/.vale.ini'
    required: false
    type: string

  vale-version:
    description: |
      Version number for Vale.
    default: '3.4.1'
    required: false
    type: string

  toml-version:
    description: |
      Toml version used for retrieving the towncrier directory.
    default: '0.10.2'
    required: false
    type: string

  ignore-changelogd:
    description: |
      Whether or not to ignore markdown files in doc/changelog.d/.
    default: true
    required: false
    type: bool

  checkout:
      description: |
        Whether to clone the repository in the CI/CD machine. Default value is
        ``true``.
      default: true
      required: false
      type: boolean

  fail-level:
    description: |
      Report level used to control check results. Default value is ``"error"``
      and if at least one issue with severity greater than or equal to
      ``"error"`` is detected then the action exits with status code ``1``.
    default: 'error'
    required: false
    type: string

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4
      if: inputs.checkout == 'true'

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Ensure Vale configuration follows the right layout for the specified
          version of Vale.

    - name: "Check Vale's version"
      shell: bash
      run: |
        version=${{ inputs.vale-version }}
        vale_major_version=$( echo $version | cut -d '.' -f 1)
        echo "VALE_MAJOR_VERSION=$(echo $vale_major_version)" >> $GITHUB_ENV
        echo "VALE_MAJOR_VERSION set to $vale_major_version"  # Add this line for debugging

    - name: "Verify Vale's configuration layout according to selected version"
      shell: bash
      run: |
        if [ -z "$VALE_MAJOR_VERSION" ]; then
          echo "VALE_MAJOR_VERSION is not set."
          exit 1
        fi

        if [ $VALE_MAJOR_VERSION -ge 3 ]; then
          if [ ! -d ./doc/styles/config/vocabularies ]; then
            echo "Projects using Vale >=v3 require a doc/styles/config/vocabularies directory."
            echo "See migration guide https://actions.docs.ansys.com/version/stable/migrations/docs-style-vale-version-update.html"
            exit 1
          fi
        else
          if [ ! -d ./doc/styles/Vocab ]; then
            echo "Projects using Vale <=v2 require a doc/styles/Vocab directory. Consider updating your Vale version to v3."
            echo "See migration guide https://actions.docs.ansys.com/version/stable/migrations/docs-style-vale-version-update.html"
            exit 1
          fi
        fi

    - name: "Install toml"
      shell: bash
      run: |
        python -m pip install --upgrade pip toml==${{ inputs.toml-version }}

    - name: "Install docutils"
      shell: bash
      run: |
        python -m pip install --upgrade pip docutils

    - name: "Get towncrier directory"
      shell: python
      run: |
        import os
        import toml

        if os.path.exists("pyproject.toml"):
            # Load pyproject.toml
            with open('pyproject.toml', 'r') as f:
                config = toml.load(f)
                try:
                    # Get towncrier directory
                    directory=config["tool"]["towncrier"]["directory"]
                except KeyError:
                    # If towncrier directory isn't specified in pyproject.toml
                    directory=""
        else:
            directory=""

        # Get the GITHUB_ENV variable
        github_env = os.getenv('GITHUB_ENV')

        # Append the TOWNCRIER_DIR with its value to GITHUB_ENV
        with open(github_env, "a") as f:
            f.write(f"TOWNCRIER_DIR={directory}")

    - name: "Check if changelog.d is ignored"
      shell: bash
      run: |
        # If changelog.d is ignored and the TOWNCRIER_DIR exists in pyproject.toml, add the ignore glob
        if [[ ${{ inputs.ignore-changelogd }} == 'true' ]] && [[ -n "${{ env.TOWNCRIER_DIR }}" ]]; then
          echo VALE_FLAGS="--config=${{ inputs.vale-config }} --glob=!${{ env.TOWNCRIER_DIR }}/*.md" >> $GITHUB_ENV
        else
          echo VALE_FLAGS="--config=${{ inputs.vale-config }}" >> $GITHUB_ENV
        fi

    - name: "Run Vale"
      uses: errata-ai/vale-action@reviewdog20
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        files: ${{ inputs.files }}
        reporter: github-pr-check
        fail_level: ${{ inputs.fail-level }}
        filter_mode: nofilter
        vale_flags: "${{ ENV.VALE_FLAGS }}"
        version: ${{ inputs.vale-version }}
