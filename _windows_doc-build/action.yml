# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: >
  Documentation build action

description: >
  Build library documentation using `Sphinx
  <https://www.sphinx-doc.org/en/master/>`_. The action installs and uses
  `sphinx-build <https://www.sphinx-doc.org/en/master/man/sphinx-build.html>`_
  to generate documentation from the source. It requires that all the
  documentation is contained in the ``doc/`` directory of a project.
  Documentation dependencies need to be declared in a
  ``requirements/requirements_doc.txt`` file or in the ``[doc]`` section of the
  additional dependencies in the ``pyproject.toml`` file. The action locates the
  ``doc/make.bat`` file and runs the ``make html`` and ``make pdf`` commands. If
  desired, the ``make json`` command can also be executed to generate JSON
  documentation.

inputs:

  # Optional inputs

  python-version:
    description: >
        Python version used for installing and running ``Sphinx``.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  sphinxopts:
    description: >
      Set of options to pass to the ``Sphinx`` builder. Default options include
      using the maximum number of cores in the CPU of the machine and treating
      warnings as errors.

      .. note::

          This will override the ``SPHINXOPTS`` declared in your Makefile.

    default: '-j auto -W --keep-going'
    required: false
    type: string

  dependencies:
    description: >
      String of system dependencies to be installed before building the
      documentation of the project.
    default: ''
    required: false
    type: string

  skip-dependencies-cache:
    description: >
      Whether to ignore dependencies cache or not - for OS libraries.
    required: true
    default: false
    type: boolean

  skip-install:
    description: >
      Whether to skip the installation of the project. The default is ``false``.
      Pure documentation projects require that this action be set to ``false``
      because there is no Python library associated with the project.
    default: false
    required: false
    type: boolean

  requirements-file:
    description: >
      Path to the requirements file in case it needs to be in a specific location.
      This is useful for non python projects, where you don't necessarily have a requirements
      file in the root of the project.
    default: 'requirements/requirements_doc.txt'
    required: false
    type: string

  checkout:
    description: >
      Whether to clone the repository in the CI/CD machine. Default value is
      ``true``.
    default: true
    required: false
    type: boolean

  skip-json-build:
    description: >
      Whether to skip the generation of JSON documentation. Default value is
      ``true``.
    default: true
    required: false
    type: boolean

  check-links:
    description: >
      Whether to perform external link checks during the generation of
      documentation. Default value is ``true``.
    default: true
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4
      if: ${{ inputs.checkout == 'true' }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Install Chocolatey to install dependencies.

    - name: Download script and install Chocolatey
      if: ${{ inputs.dependencies }} != ''
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Install system dependencies. Even if no dependencies are provided,
          Miktex is installed to build the documentation.

    - name: Collect system dependencies
      shell: bash
      run: |
        echo "NEEDED_DEPS=$(echo '${{ inputs.dependencies }}')" >> $GITHUB_ENV

    - name: Cache Chocolatey packages
      id: cache
      uses: actions/cache@v2
      if: inputs.skip-dependencies-cache == 'false' && env.NEEDED_DEPS != ''
      with:
        path: ~\AppData\Local\Temp\chocolatey
        key: choco-${{ env.NEEDED_DEPS }}
        restore-keys: choco

    - name: Install packages with Chocolatey
      if: steps.cache.outputs.cache-hit != 'true' && env.NEEDED_DEPS != ''
      shell: bash
      run: choco install ${{ env.NEEDED_DEPS }} -y

    - name: Install Miktex and update PATH with Miktex binaries
      shell: bash
      run: |
        choco install miktex -y
        echo "C:\Program Files\MiKTeX\miktex\bin\x64" >> $GITHUB_PATH  

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up Miktex to update installed packages and allow to download and install
          missing packages while building the documentation.

    - name: Set up Miktex
      shell: bash
      run: |
        mpm --update
        initexmf --set-config-value [MPM]AutoInstall=1

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up python to build the documentation.

    - name: Set up Python
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: Update pip
      shell: bash
      run: python -m pip install -U pip

    - name: Check if requirements.txt file exists
      shell: bash
      run: |
        echo "EXISTS_DOC_REQUIREMENTS=$(if [ -f ${{ inputs.requirements-file }} ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV

    - name: Print previous output
      shell: bash
      run: |
        echo "Output was found ${{ env.EXISTS_DOC_REQUIREMENTS }}"

    - name: Install documentation dependencies from requirements file
      shell: bash
      if: env.EXISTS_DOC_REQUIREMENTS == 'true'
      run: |
        python -m pip install -r ${{ inputs.requirements-file }}

    - name: Install Python library
      shell: bash
      if: inputs.skip-install == 'false'
      run: |
        python -m pip install .

    - name: Install documentation dependencies from pyproject.toml
      shell: bash
      if: env.EXISTS_DOC_REQUIREMENTS == 'false'
      run: |
        if grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          python -m pip install poetry
          poetry install --with doc
        else
          python -m pip install .[doc]
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build HTML, PDF and JSON documentation

    - name: Determine command context
      shell: bash
      run: |
        if grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          echo "SPHINX_BUILD_MAKE=$(echo 'poetry run -- doc\make.bat')" >> $GITHUB_ENV
        else
          echo "SPHINX_BUILD_MAKE=$(echo 'doc\make.bat')" >> $GITHUB_ENV
        fi

    - name: Build HTML, PDF, and JSON documentation
      shell: pwsh
      run: |
        cd doc
        if [[ ${{ inputs.check-links }} == 'true' ]];
        then
          ${{ env.SPHINX_BUILD_MAKE }} linkcheck SPHINXOPTS="${{ inputs.sphinxopts }}"
        fi
        ${{ env.SPHINX_BUILD_MAKE }} html SPHINXOPTS="${{ inputs.sphinxopts }}"
        ${{ env.SPHINX_BUILD_MAKE }} pdf
        if [[ ${{ inputs.skip-json-build }} == 'false' ]];
        then
          ${{ env.SPHINX_BUILD_MAKE }} json SPHINXOPTS="${{ inputs.sphinxopts }}"
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Upload HTML, PDF and JSON documentation

    - name: Upload HTML documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation-html
        path: doc/_build/html
        retention-days: 7

    - name: Upload PDF documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation-pdf
        path: doc/_build/latex/*.pdf
        retention-days: 7

    - name: Upload JSON documentation artifact
      uses: actions/upload-artifact@v4
      if: inputs.skip-json-build == 'false'
      with:
        name: documentation-json
        path: doc/_build/json
        retention-days: 7
