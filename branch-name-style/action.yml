# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: >
  Branch name style

description: |
  Checks if the name of the branch follows the branch naming convention of
  PyAnsys.

  .. note::

      Branch names must start with one of the following prefixes:

      - fix
      - feat
      - junk
      - maint
      - docs
      - no-ci
      - testing or test
      - release
      - dependabot

runs:
  using: "composite"
  steps:

    - name: "Check if branch has a valid prefix"
      shell: bash
      if: ${{ (github.ref != 'refs/heads/main') && (github.ref_type == 'branch') }}
      run: |
        branch_name=${{ github.head_ref || github.ref }}

        # Ignore pre-commit.ci branch name
        if [[ $branch_name == "pre-commit-ci-update-config" ]]; then
          echo "\033[1;92m[INFO]: Branch name is pre-commit-ci-update-config. Skipping branch name check."
          exit 0
        fi

        if [[ $branch_name != */* ]]; then
          echo "\033[1;91m[ERROR]: Branch name $branch_name does not contain a prefix and a backslash." >&2
          exit 1
        fi

        branch_prefix=$(echo "$branch_name" | cut -d '/' -f 1)
        valid_prefixes=("fix" "feat" "junk" "maint" "docs" "no-ci" "test" "testing" "release" "dependabot")

        if [[ ! ${valid_prefixes[@]} =~ $branch_prefix ]]; then
          echo "\033[1;91m[ERROR]: Branch name $branch_prefix prefix is not valid." >&2
          exit 1
        fi
