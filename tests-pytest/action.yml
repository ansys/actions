name: >
  Tests pytest action

description: >
  Run a test suite using `pytest <https://docs.pytest.org/en/stable/>`_.

inputs:

  # Optional inputs
  python-version:
    description: >
      Python version used for installing and running ``pytest``.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  pytest-markers:
    description: >
      Set of `pytest markers
      <https://docs.pytest.org/en/stable/example/markers.html>`_ in the form of
      a string. These markers are used to discretize tests when running the test
      session.
    default: ''
    required: false
    type: string

  pytest-extra-args:
    description: >
      Set of additional ``pytest`` arguments in the form of a string.
    default: ''
    required: false

  pytest-postargs:
    description: >
      Directory of the test suite and the level of verbosity.
    default: 'tests -vv'
    required: false
    type: string

  requires-xvfb:
    description: >
      Whether to install `X Virtual Frame Buffer (XVFB)
      <https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml>`_ and run
      the whole test session using XVFB. The default value is ``false``.
    default: false
    required: false
    type: boolean

  checkout:
    description: >
      Whether to clone the repository in the CI/CD machine. Default value is
      ``true``.
    default: true
    required: false
    type: boolean


runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v3
      if: ${{ inputs.checkout == 'true' }}

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Update pip"
      shell: bash
      run: python -m pip install -U pip

    - name: "Install Python library"
      shell: bash
      run: python -m pip install .

    - name: "Install X Virtual Frame Buffer"
      shell: bash
      if: inputs.requires-xvfb == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: "Check if requirements.txt file exists"
      shell: bash
      run: |
        echo "EXISTS_TESTS_REQUIREMENTS=$(if [ -f requirements/requirements_tests.txt ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV

    - name: "Print previous output"
      shell: bash
      run:
        echo "Output was found ${{ env.EXISTS_TESTS_REQUIREMENTS }}"

    - name: "Install test dependencies from the requirements file"
      shell: bash
      if: env.EXISTS_TESTS_REQUIREMENTS == 'true'
      run: python -m pip install -r requirements/requirements_tests.txt

    - name: "Install test dependencies from pyproject.toml"
      shell: bash
      if: env.EXISTS_TESTS_REQUIREMENTS == 'false'
      run: |
        if grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          python -m pip install poetry
          poetry install --with tests
        else
          python -m pip install .[tests]
        fi

    - name: "Executing test suite without using xvfb"
      if: inputs.requires-xvfb == 'false'
      shell: bash
      run: |
        pytest ${{ inputs.pytest-markers }} ${{ inputs.pytest-extra-args }} ${{ inputs.pytest-postargs }}

    - name: "Executing test suite using xvfb"
      if: inputs.requires-xvfb == 'true'
      shell: bash
      run: |
        xvfb-run pytest ${{ inputs.pytest-markers }} ${{ inputs.pytest-extra-args }} ${{ inputs.pytest-postargs }}
