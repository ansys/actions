# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Tests pytest action

description: |
  Run a test suite using `pytest <https://docs.pytest.org/en/stable/>`_.

inputs:

  # Optional inputs
  python-version:
    description: |
      Python version used for installing and running ``pytest``.
    default: '3.11'
    required: false
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  pytest-markers:
    description: |
      Set of `pytest markers
      <https://docs.pytest.org/en/stable/example/markers.html>`_ in the form of
      a string. These markers are used to discretize tests when running the test
      session.
    default: ''
    required: false
    type: string

  pytest-extra-args:
    description: |
      Set of additional ``pytest`` arguments in the form of a string.
    default: ''
    required: false

  pytest-postargs:
    description: |
      Directory of the test suite and the level of verbosity.
    default: 'tests -vv'
    required: false
    type: string

  requires-xvfb:
    description: |
      Whether to install `X Virtual Frame Buffer (XVFB)
      <https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml>`_ and run
      the whole test session using XVFB. The default value is ``false``.
    default: false
    required: false
    type: boolean

  checkout:
    description: |
      Whether to clone the repository in the CI/CD machine. Default value is
      ``true``.
    default: true
    required: false
    type: boolean

  skip-install:
    description: |
      Skip installation process. This should be set to `false` when using poetry
      as the build-backend because it should be false with poetry as build-backend.
      The default value is ``false``.
    default: false
    required: false
    type: boolean

  optional-dependencies-name:
    description: |
      Any valid install targets defined in the ``pyproject.toml`` file, or the suffix
      of a requirement file. Multiple targets can be specified as a comma-separated
      list. The associated dependencies are installed before running the tests.
      The default value is ``'tests'``. Therefore, in case of a requirement file, the
      default file is ``requirements/requirements_tests.txt``.
    default: 'tests'
    required: false
    type: string

  group-dependencies-name:
    description: |
      Any valid dependency groups defined in the ``pyproject.toml`` file. Multiple
      targets can be specified as a comma-separated list. The associated dependencies
      are installed before running the tests.
      The default value is ``''``.
    default: ''
    required: false
    type: string

  randomize:
    description:
      Whether to randomize the order of the tests. The default value is ``false``.
    default: false
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    default: true
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      if: ${{ inputs.checkout == 'true' }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Determine context.

    - name: "Determine GitHub environment variables"
      id: github-environment-variables
      shell: bash
      env:
        USE_UV: ${{ inputs.use-uv }}
      run: |
        if [[ -f "pyproject.toml" ]] && grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          echo "BUILD_BACKEND=$(echo 'poetry')" >> $GITHUB_OUTPUT
        elif [[ "$USE_UV" == 'true' ]]; then
          echo "BUILD_BACKEND=$(echo 'uv')" >> $GITHUB_OUTPUT
        else
          echo "BUILD_BACKEND=$(echo 'pip')" >> $GITHUB_OUTPUT
        fi

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build backend: ${{ steps.github-environment-variables.outputs.BUILD_BACKEND }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up python to test.

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: ${{ inputs.use-uv }}
        prune-uv-cache: ${{ inputs.use-python-cache != 'true' }}

    # NOTE: Installation of poetry in a separate environment to the project to
    # avoid situations in which both poetry and the project have shared
    # dependencies with different version. This can lead to CICD failures. For
    # more information, see https://github.com/ansys/actions/pull/560
    - name: "Add pipx/bin directory to Github Path"
      if: steps.github-environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "${{ runner.temp }}/pipx/bin" >> $GITHUB_PATH # zizmor: ignore[github-env] no workaround for this

    # NOTE: Poetry uses virtual environments when installing a project. As we
    # want to control that creation, we store POETRY_VIRTUALENVS_CREATE=false
    # in the GitHub environment.
    - name: "Set poetry environment variable(s)"
      if: steps.github-environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "POETRY_VIRTUALENVS_CREATE=false" >> $GITHUB_ENV

    # NOTE: Install pipx in a location that can be used in following CICD jobs
    # but ensure that poetry is installed in a temporary folder cleaned before
    # and after each job. This way poetry is kinda "installed at system level"
    # making it available in the following call and installed in a different
    # environment from the project.
    - name: "Install poetry and create a virtual environment"
      if: steps.github-environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: |
        python -m pip install pipx
        python -m pipx install poetry
      env:
        PIPX_BIN_DIR: ${{ runner.temp }}/pipx/bin
        PIPX_HOME : ${{ runner.temp }}/pipx/home

    # NOTE: A virtual environment is needed regardless in all cases. In uv's case,
    # the installation speed "uv pip" offers is what needs to be taken advantage of,
    # using "uv venv" in a separate step is not necessary since "uv pip" will still
    # work with existing virtual environments.
    - name: "Create a virtual environment"
      shell: bash
      run: |
        python -m venv .venv

    - name: "Set up virtual environment activation command"
      id: virtual-environment-activation-command
      shell: bash
      run: |
        if [[ ${{ runner.os }} == 'Windows' ]]; then
          echo "ACTIVATE_VENV=$(echo 'source .venv/scripts/activate')" >> $GITHUB_OUTPUT
        else
          echo "ACTIVATE_VENV=$(echo 'source .venv/bin/activate')" >> $GITHUB_OUTPUT
        fi

    # ------------------------------------------------------------------------

    - name: "Update pip"
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        USE_UV: ${{ inputs.use-uv }}
      run: |
        $ACTIVATE_VENV
        if [[ "$USE_UV" == 'true' ]]; then
          uv pip install -U pip
        else
          python -m pip install -U pip
        fi

    - name: "Install project (if required)"
      if: inputs.skip-install == 'false'
      shell: bash
      env:
        BUILD_BACKEND: ${{ steps.github-environment-variables.outputs.BUILD_BACKEND }}
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
      run: |
        $ACTIVATE_VENV
        if [[ "$BUILD_BACKEND" == 'poetry' ]]; then
          poetry install
        elif [[ "$BUILD_BACKEND" == 'uv' ]]; then
          uv pip install .
        else
          python -m pip install .
        fi

    - name: "Install X Virtual Frame Buffer"
      shell: bash
      if: inputs.requires-xvfb == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: "Check if requirements.txt file exists"
      id: check-exists-requirements-file
      shell: bash
      env:
        OPTIONAL_DEPENDENCIES_NAME: ${{ inputs.optional-dependencies-name }}
      run: |
        echo "EXISTS_TESTS_REQUIREMENTS=$(if [ -f requirements/requirements_${OPTIONAL_DEPENDENCIES_NAME}.txt ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_OUTPUT

    - name: "Print previous output"
      shell: bash
      env:
        EXISTS_TESTS_REQUIREMENTS: ${{ steps.check-exists-requirements-file.outputs.EXISTS_TESTS_REQUIREMENTS }}
      run:
        echo "Output was found $EXISTS_TESTS_REQUIREMENTS"

    - name: "Install test dependencies from the requirements file"
      shell: bash
      if: steps.check-exists-requirements-file.outputs.EXISTS_TESTS_REQUIREMENTS == 'true'
      env:
        OPTIONAL_DEPENDENCIES_NAME: ${{ inputs.optional-dependencies-name }}
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        USE_UV: ${{ inputs.use-uv }}
      run: |
        $ACTIVATE_VENV
        if [[ "$USE_UV" == 'true' ]]; then
          uv pip install -r requirements/requirements_${OPTIONAL_DEPENDENCIES_NAME}.txt
        else
          python -m pip install -r requirements/requirements_${OPTIONAL_DEPENDENCIES_NAME}.txt
        fi

    - name: "Install test dependencies from pyproject.toml"
      shell: bash
      if: steps.check-exists-requirements-file.outputs.EXISTS_TESTS_REQUIREMENTS == 'false'
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        BUILD_BACKEND: ${{ steps.github-environment-variables.outputs.BUILD_BACKEND }}
        OPTIONAL_DEPENDENCIES_NAME: ${{ inputs.optional-dependencies-name }}
        GROUP_DEPENDENCIES_NAME: ${{ inputs.group-dependencies-name }}
      run: |
        $ACTIVATE_VENV
        if [[ "$BUILD_BACKEND" == 'poetry' ]]; then
          poetry install --with "$OPTIONAL_DEPENDENCIES_NAME"
        else
          # Optional dependencies
          optional_dependencies_flag=""
          if [ -n "${OPTIONAL_DEPENDENCIES_NAME}" ]; then
            optional_dependencies_flag="[${OPTIONAL_DEPENDENCIES_NAME}]"
          fi
          # Group dependencies
          group_dependencies_flag=""
          if [ -n "${GROUP_DEPENDENCIES_NAME}" ]; then
            IFS=',' read -ra group_list <<< "${GROUP_DEPENDENCIES_NAME}"
            for group in "${group_list[@]}"; do
              group_dependencies_flag="$group_dependencies_flag --group $group"
            done
          fi
          # Install dependencies (potentially mix of optional and group)
          if [[ "${BUILD_BACKEND}" == 'uv' ]]; then
            uv pip install $group_dependencies_flag .$optional_dependencies_flag
          else
            python -m pip install $group_dependencies_flag .$optional_dependencies_flag
          fi
        fi

    - name: "Set up pytest run command"
      id: pytest-run-command
      shell: bash
      env:
        BUILD_BACKEND: ${{ steps.github-environment-variables.outputs.BUILD_BACKEND }}
      run: |
        if [[ "$BUILD_BACKEND" == 'poetry' ]]; then
          echo "PYTEST_RUN=$(echo 'poetry run pytest')" >> $GITHUB_OUTPUT
        elif [[ "$BUILD_BACKEND" == 'uv' ]]; then
          echo "PYTEST_RUN=$(echo 'uv run --no-sync pytest')" >> $GITHUB_OUTPUT
        else
          echo "PYTEST_RUN=$(echo 'python -m pytest')" >> $GITHUB_OUTPUT
        fi

    - name: "Randomize the order of the tests"
      shell: bash
      if: inputs.randomize == 'true'
      run: |
        if [[ "$BUILD_BACKEND" == 'uv' ]]; then
          uv pip install pytest-randomly
        else
          python -m pip install pytest-randomly
        fi

    - name: "Executing test suite"
      if: inputs.requires-xvfb == 'false'
      shell: bash
      env:
       PYTEST_MARKERS: ${{ inputs.pytest-markers }}
       PYTEST_EXTRA_ARGS: ${{ inputs.pytest-extra-args }}
       PYTEST_POST_ARGS: ${{ inputs.pytest-postargs }}
       PYTEST_RUN: ${{ steps.pytest-run-command.outputs.PYTEST_RUN }}
       ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
      run: |
        ${ACTIVATE_VENV}
        eval "${PYTEST_RUN} ${PYTEST_MARKERS} ${PYTEST_EXTRA_ARGS} ${PYTEST_POST_ARGS}"

    - name: "Executing test suite using xvfb"
      if: inputs.requires-xvfb == 'true'
      shell: bash
      env:
       PYTEST_MARKERS: ${{ inputs.pytest-markers }}
       PYTEST_EXTRA_ARGS: ${{ inputs.pytest-extra-args }}
       PYTEST_POST_ARGS: ${{ inputs.pytest-postargs }}
       PYTEST_RUN: ${{ steps.pytest-run-command.outputs.PYTEST_RUN }}
       ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
      run: |
        ${ACTIVATE_VENV}
        eval "xvfb-run ${PYTEST_RUN} ${PYTEST_MARKERS} ${PYTEST_EXTRA_ARGS} ${PYTEST_POST_ARGS}"
