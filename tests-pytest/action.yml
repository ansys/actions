name: "Run a test suite using the pytest framework."
description: "Run a test suite using the pytest framework."

inputs:
  python-version:
    description: 'Desired Python version for pytest.'
    default: '3.10'
    required: false
    type: string
  use-python-cache:
    description: 'Whether to use Python cache or not. Requires a pyproject.toml file.'
    required: false
    default: true
    type: boolean
  pytest-markers:
    description: 'Set of markers to filter out tests.'
    default: ''
    required: false
    type: string
  pytest-extra-args:
    description: 'Set of options to pass to pytest.'
    default: ''
    required: false
  pytest-postargs:
    description: 'Directory of the test suite and the level of verbosity.'
    default: 'tests -vv'
    required: false
    type: string
  requires-xvfb:
      description: 'Requires the usage of X Virtual Frame Buffer.'
      default: false
      required: false
      type: boolean
  checkout:
      description: 'Whether to checkout the repository or not.'
      default: true
      required: false
      type: boolean


runs:
  using: "composite"
  steps:
  
    - name: "Install Git and clone project"
      uses: actions/checkout@v3
      if: ${{ inputs.checkout == 'true' }}
  
    - name: "Set up Python"
      uses: pyansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Update pip"
      shell: bash
      run: python -m pip install -U pip
  
    - name: "Install Python library"
      shell: bash
      run: python -m pip install .

    - name: "Install X Virtual Frame Buffer"
      shell: bash
      if: inputs.requires-xvfb == 'true'
      run: |
        sudo apt-get install xvfb

    - name: "Check if requirements.txt file exists"
      shell: bash
      run: |
        echo "EXISTS_TESTS_REQUIREMENTS=$(if [ -f requirements/requirements_tests.txt ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_ENV

    - name: "Print previous output"
      shell: bash
      run:
        echo "Output was found ${{ env.EXISTS_TESTS_REQUIREMENTS }}"

    - name: "Install test dependencies from the requirements file"
      shell: bash
      if: env.EXISTS_TESTS_REQUIREMENTS == 'true'
      run: python -m pip install -r requirements/requirements_tests.txt

    - name: "Install test dependencies from pyproject.toml"
      shell: bash
      if: env.EXISTS_TESTS_REQUIREMENTS == 'false'
      run: python -m pip install .[tests]
    
    - name: "Executing test suite without using xvfb"
      if: inputs.requires-xvfb == 'false'
      shell: bash
      run: |
        pytest ${{ inputs.pytest-markers }} ${{ inputs.pytest-extra-args }} ${{ inputs.pytest-postargs }}

    - name: "Executing test suite using xvfb"
      if: inputs.requires-xvfb == 'true'
      shell: bash
      run: |
        xvfb-run pytest ${{ inputs.pytest-markers }} ${{ inputs.pytest-extra-args }} ${{ inputs.pytest-postargs }}
