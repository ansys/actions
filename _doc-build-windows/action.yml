# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Documentation build action (Windows)

description: |
  Build library documentation using `Sphinx
  <https://www.sphinx-doc.org/en/master/>`_. The action installs documentation
  dependencies provided either in a requirement file, e.g.
  ``requirements/requirements_doc.txt``, or in the ``[doc]`` section of the
  additional dependencies in the ``pyproject.toml`` file. Assuming that
  `sphinx-build
  <https://www.sphinx-doc.org/en/master/man/sphinx-build.html>`_ is available
  after installing the documentation dependencies, the action uses it
  to generate documentation from the source. It requires that all the
  documentation is contained in the ``doc\`` directory of a project. The
  action locates the ``doc\make.bat`` and runs the ``make.bat html`` and
  ``make.bat pdf`` commands.

inputs:

  # Required inputs

  sphinxopts:
    description: |
      Set of options to pass to the ``Sphinx`` builder.

      .. note::

          This will override the ``SPHINXOPTS`` declared in your Makefile.

    required: true
    type: string

  dependencies:
    description: |
      String of system dependencies to be installed before building the
      documentation of the project.
    required: true
    type: string

  skip-dependencies-cache:
    description: |
      Whether to ignore dependencies cache or not for OS libraries.
    required: true
    type: boolean

  skip-install:
    description: |
      Whether to skip the installation of the project.
      Pure documentation projects require that this action be set to ``false``
      because there is no Python library associated with the project.
    required: true
    type: boolean

  requirements-file:
    description: |
      Path to the requirements file in case it needs to be in a specific location.
      This is useful for non python projects, where you don't necessarily have a requirements
      file in the root of the project.
    required: true
    type: string

  check-links:
    description: |
      Whether to perform external link checks during the generation of
      documentation.
    required: true
    type: boolean

  add-pdf-html-docs-as-assets:
    description: |
      Whether to add PDF and HTML documentation as assets of the HTML
      documentation. The HTML documentation is compressed before being added.
      The PDF file name is expected to be retrieved through the documentation's
      configuration file 'conf.py' in 'doc\source'.

      .. warning::

          The HTML files are expected to be contained in ``doc\_build`` and the
          PDF file is copied in ``doc\_build\html\_static\assets\download``.
          If such directories do not exist in your repo, the action will fail.

    required: true
    type: boolean

  needs-quarto:
    description: |
      Whether to add a Quarto cheatsheet to the documentation. Default value is
      ``false``.

      .. warning::

        Quarto needs Jupyter to be installed. Make sure to add `Jupyter <https://pypi.org/project/jupyter/>` to
        the requirements list.
    required: true
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    required: true
    type: boolean

  optional-dependencies-name:
    description: |
      Any valid install targets defined in the ``pyproject.toml`` file, or the suffix
      of a requirement file. Multiple targets can be specified as a comma-separated
      list. The associated dependencies are installed before building the documentation.
    required: true
    type: string

  group-dependencies-name:
    description: |
      Any valid dependency groups defined in the ``pyproject.toml`` file. Multiple
      targets can be specified as a comma-separated list. The associated dependencies
      are installed before running the documentation build. If set to ``''``, the action
      will not use dependency groups.
    required: true
    type: string

runs:
  using: "composite"
  steps:

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Install Chocolatey to install dependencies.

    - name: Download script and install Chocolatey
      shell: powershell
      run: |  # zizmor: ignore[github-env]
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        echo "C:\ProgramData\chocolatey\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Install system dependencies. Even if no dependencies are provided,
          Miktex is installed to build the documentation.

    - name: Collect system dependencies
      id: collect-system-dependencies
      shell: powershell
      env:
        DEPENDENCIES: ${{ inputs.dependencies }}
      run: |
        echo "NEEDED_DEPS=$(echo "$env:DEPENDENCIES")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Cache Chocolatey packages
      id: cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      if: ${{ (inputs.skip-dependencies-cache == 'false') && (steps.collect-system-dependencies.outputs.NEEDED_DEPS != '') }}
      with:
        path: ~\AppData\Local\Temp\chocolatey
        key: choco-${{ steps.collect-system-dependencies.outputs.NEEDED_DEPS }}
        restore-keys: choco

    - name: Install packages with Chocolatey
      if: ${{ (steps.cache.outputs.cache-hit != 'true') && (steps.collect-system-dependencies.outputs.NEEDED_DEPS != '') }}
      shell: powershell
      env:
        NEEDED_DEPS: ${{ steps.collect-system-dependencies.outputs.NEEDED_DEPS }}
      run: choco install $env:NEEDED_DEPS -y

    - name: Install Miktex and update PATH with Miktex binaries
      shell: powershell
      run: | # zizmor: ignore[github-env]
        choco install miktex -y
        echo "C:\Program Files\MiKTeX\miktex\bin\x64" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: "Install Poppler for PDF to PNG conversion"
      if: ${{ inputs.needs-quarto == 'true' }}
      shell: powershell
      run: | # zizmor: ignore[github-env]
        choco install poppler -y
        echo "C:\Program Files\poppler\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: "Install quarto for cheatsheet"
      if: ${{ inputs.needs-quarto == 'true' }}
      shell: powershell
      run: | # zizmor: ignore[github-env]
        choco install quarto --version=1.6.43 -y
        echo "C:\ProgramData\chocolatey\lib\quarto\tools" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up Miktex to allow downloading missing packages when building documentation.

    - name: Set up Miktex to automatically install packages
      shell: powershell
      run: |
        initexmf --set-config-value [MPM]AutoInstall=1

    # ------------------------------------------------------------------------

    - name: Check Quarto Version
      if: ${{ inputs.needs-quarto == 'true' }}
      shell: powershell
      run: |
        quarto --version

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Determine context.

    - name: "Determine GitHub environment variables"
      id: determine-environment-variables
      shell: powershell
      env:
        USE_UV: ${{ inputs.use-uv }}
      run: |
        if ((Test-Path "pyproject.toml") -and (Get-Content "pyproject.toml" | Select-String -Pattern 'build-backend = "poetry\.core\.masonry\.api"')) {
          echo "BUILD_BACKEND=$(echo 'poetry')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        }
        elseif ($env:USE_UV -eq "true") {
          echo "BUILD_BACKEND=$(echo 'uv')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        }
        else {
          echo "BUILD_BACKEND=$(echo 'pip')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        }

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build backend: ${{ steps.determine-environment-variables.outputs.BUILD_BACKEND }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up python to build the documentation.

    # NOTE: Installation of poetry in a separate environment to the project to
    # avoid situations in which both poetry and the project have shared
    # dependencies with different version. This can lead to CICD failures. For
    # more information, see https://github.com/ansys/actions/pull/560
    - name: "Add pipx/bin directory to Github Path"
      if: steps.determine-environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: powershell
      run: echo "${{ runner.temp }}/pipx/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append # zizmor: ignore[github-env]

    # NOTE: Poetry uses virtual environments when installing a project. As we
    # want to control that creation, we store POETRY_VIRTUALENVS_CREATE=false
    # in the GitHub environment.
    - name: "Set poetry environment variable(s)"
      if: steps.determine-environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: powershell
      run: echo "POETRY_VIRTUALENVS_CREATE=$(echo false)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append # zizmor: ignore[github-env]

    # NOTE: Install pipx in a location that can be used in following CICD jobs
    # but ensure that poetry is installed in a temporary folder cleaned before
    # and after each job. This way poetry is kinda "installed at system level"
    # making it available in the following call and installed in a different
    # environment from the project.
    - name: "Install poetry and create a virtual environment"
      if: steps.determine-environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: powershell
      run: |
        python -m pip install pipx
        python -m pipx install poetry
      env:
        PIPX_BIN_DIR: ${{ runner.temp }}/pipx/bin
        PIPX_HOME : ${{ runner.temp }}/pipx/home

    - name: "Create a virtual environment"
      shell: powershell
      run: python -m venv .venv

    # ------------------------------------------------------------------------

    - name: "Update pip"
      shell: powershell
      env:
        USE_UV: ${{ inputs.use-uv }}
      run: |
        .venv\Scripts\Activate.ps1
        if ($env:USE_UV -eq "true") {
          uv pip install -U pip
        } else {
          python -m pip install -U pip
        }

    - name: "Check if requirements.txt file exists"
      id: check-requirements-file-exists
      shell: powershell
      env:
        REQUIREMENTS_FILE: ${{ inputs.requirements-file }}
      run: |
        echo "EXISTS_DOC_REQUIREMENTS=$(if (Test-Path "$env:REQUIREMENTS_FILE") { echo 'true' } else { echo 'false' })" | Out-File -Append -FilePath $env:GITHUB_OUTPUT -Encoding utf8

    - name: Install documentation dependencies from requirements file
      shell: powershell
      env:
        REQUIREMENTS_FILE: ${{ inputs.requirements-file }}
        USE_UV: ${{ inputs.use-uv }}
      if: ${{ steps.check-requirements-file-exists.outputs.EXISTS_DOC_REQUIREMENTS == 'true' }}
      run: |
        .venv\Scripts\Activate.ps1
        if ($env:USE_UV -eq "true") {
          uv pip install -r "$env:REQUIREMENTS_FILE"
        } else {
          python -m pip install -r "$env:REQUIREMENTS_FILE"
        }

    - name: Install Python library
      shell: powershell
      if: ${{ inputs.skip-install == 'false' }}
      env:
        BUILD_BACKEND: ${{ steps.determine-environment-variables.outputs.BUILD_BACKEND }}
      run: |
        .venv\Scripts\Activate.ps1
        if ($env:BUILD_BACKEND -eq "poetry") {
          poetry install
        } elseif ($env:BUILD_BACKEND -eq "uv") {
          uv pip install .
        } else {
          python -m pip install .
        }

    - name: Install documentation dependencies from pyproject.toml
      shell: powershell
      if: ${{ steps.check-requirements-file-exists.outputs.EXISTS_DOC_REQUIREMENTS == 'false' }}
      env:
        BUILD_BACKEND: ${{ steps.determine-environment-variables.outputs.BUILD_BACKEND }}
        GROUP_DEPENDENCIES_NAME: ${{ inputs.group-dependencies-name }}
        OPTIONAL_DEPENDENCIES_NAME: ${{ inputs.optional-dependencies-name }}
      run: |
        .venv\Scripts\Activate.ps1
        if ($env:BUILD_BACKEND -eq "poetry") {
          poetry install --with doc
        }
        else {
          # Optional dependencies
          $optional_dependencies_flag = ""
          if ($env:OPTIONAL_DEPENDENCIES_NAME) {
              $optional_dependencies_flag = "[{0}]" -f $env:OPTIONAL_DEPENDENCIES_NAME
          }
          # Group dependencies
          $group_dependencies_flag = @()
          if ($env:GROUP_DEPENDENCIES_NAME) {
              $groups = $env:GROUP_DEPENDENCIES_NAME -split ','
              foreach ($group in $groups) {
                  $group_dependencies_flag += "--group"
                  $group_dependencies_flag += $group
              }
          }
          # Install dependencies (potentially mix of optional and group)
          if ($env:BUILD_BACKEND -eq "uv") {
              uv pip install @group_dependencies_flag ".${optional_dependencies_flag}"
          } else {
              python -m pip install @group_dependencies_flag ".${optional_dependencies_flag}"
          }
        }

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build HTML and PDF documentation.

    - name: Build HTML and PDF documentation
      shell: powershell
      env:
        BUILD_BACKEND: ${{ steps.determine-environment-variables.outputs.BUILD_BACKEND }}
        CHECK_LINKS: ${{ inputs.check-links }}
        SPHINXOPTS: ${{ inputs.sphinxopts }}
      run: |
        .venv\Scripts\Activate.ps1
        cd doc
        if ($env:BUILD_BACKEND -eq "poetry") {
          poetry run -- make.bat html SPHINXOPTS="$env:SPHINXOPTS"
          poetry run -- make.bat pdf
          if ($env:CHECK_LINKS -eq 'true') {
            poetry run -- make.bat pdf linkcheck SPHINXOPTS="$env:SPHINXOPTS"
          }
        }
        else {
          if ($env:BUILD_BACKEND -eq "uv") {
            uv run --no-sync -- .\make.bat html SPHINXOPTS="$env:SPHINXOPTS"
            uv run --no-sync -- .\make.bat pdf
            if ($env:CHECK_LINKS -eq 'true') {
              uv run --no-sync -- .\make.bat linkcheck SPHINXOPTS="$env:SPHINXOPTS"
            }
          }
          else {
            .\make.bat html SPHINXOPTS="$env:SPHINXOPTS"
            .\make.bat pdf
            if ($env:CHECK_LINKS -eq 'true') {
              .\make.bat linkcheck SPHINXOPTS="$env:SPHINXOPTS"
            }
          }
        }

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      with:
        level: "INFO"
        message: >
          Set environment variable PDF_FILENAME.

    - name: Parse PDF file name
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: powershell
      run: |
        .venv\Scripts\Activate.ps1
        python ${{ github.action_path }}\..\python-utils\parse_doc_conf.py

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true' ) && (env.PDF_FILENAME == '') }}
      with:
        level: "ERROR"
        message: >
          Unable to determine PDF filename using conf.py file.

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true' ) && (env.PDF_FILENAME != '') }}
      with:
        level: "INFO"
        message: >
          Environment variable PDF_FILENAME set to ${{ env.PDF_FILENAME }}.

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check if expected directories exist.

    - name: Set expected build directory
      id: set-expected-build-directory
      shell: powershell
      run: |
        echo "EXPECTED_BUILD_DIR=$(echo 'doc\_build')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Check expected build directory
      id: set-exists-expected-build-directory
      shell: powershell
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
      run: |
        echo "EXISTS_EXPECTED_BUILD_DIR=$(if (Test-Path "$env:EXPECTED_BUILD_DIR") { echo 'true' } else { echo 'false' })" | Out-File -Append -FilePath $env:GITHUB_OUTPUT -Encoding utf8

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true') && (steps.set-exists-expected-build-directory.outputs.EXISTS_EXPECTED_BUILD_DIR == 'false') }}
      with:
        level: "ERROR"
        message: >
          Expected build directory ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }} does not exist.

    - name: Set expected download directory
      id: set-expected-download-directory
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: powershell
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
      run: |
        echo "EXPECTED_DOWNLOAD_DIR=$(echo "${env:EXPECTED_BUILD_DIR}\html\_static\assets\download")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Check expected download directory
      id: set-exists-expected-download-directory
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: powershell
      env:
        EXPECTED_DOWNLOAD_DIR: ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }}
      run: |
        echo "EXISTS_EXPECTED_DOWNLOAD_DIR=$(if (Test-Path "$env:EXPECTED_DOWNLOAD_DIR") { echo 'true' } else { echo 'false' })" | Out-File -Append -FilePath $env:GITHUB_OUTPUT -Encoding utf8

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true') && (steps.set-exists-expected-download-directory.outputs.EXISTS_EXPECTED_DOWNLOAD_DIR == 'false') }}
      with:
        level: "WARNING"
        message: >
          Expected build directory ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }} does not exist. Creating it...

    - name: Create expected download directory
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true') && (steps.set-exists-expected-download-directory.outputs.EXISTS_EXPECTED_DOWNLOAD_DIR == 'false') }}
      shell: powershell
      env:
        EXPECTED_DOWNLOAD_DIR: ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }}
      run: |
        New-Item -ItemType directory "$env:EXPECTED_DOWNLOAD_DIR"

    # ------------------------------------------------------------------------

    - name: Verify that documentation has been generated properly
      if: ${{ steps.set-exists-expected-build-directory.outputs.EXISTS_EXPECTED_BUILD_DIR == 'true' }}
      shell: powershell
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
      run: |
        # Check if the HTML files have been generated
        if (Test-Path -Path "${env:EXPECTED_BUILD_DIR}\html\index.html") {
          Write-Host "Documentation has been generated successfully"
        } else {
          Write-Error "Documentation has not been generated properly"
        }
        # Check if the PDF files have been generated
        if (Test-Path -Path "${env:EXPECTED_BUILD_DIR}\latex\${{ env.PDF_FILENAME }}") {
          Write-Host "PDF file has been generated successfully"
        } else {
          Write-Error "PDF file has not been generated properly"
        }

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      with:
        level: "INFO"
        message: >
          Add PDF and HTML documentation as assets.

    - name: Add assets to HTML docs
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: powershell
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
        EXPECTED_DOWNLOAD_DIR: ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }}
      run: |
        cd ${env:EXPECTED_BUILD_DIR}\html; zip -r documentation-html.zip *; cd ..\..\..
        mv ${env:EXPECTED_BUILD_DIR}\html\documentation-html.zip ${env:EXPECTED_DOWNLOAD_DIR}
        if (Test-Path ${env:EXPECTED_BUILD_DIR}\latex\${{ env.PDF_FILENAME }}) {
          cp ${env:EXPECTED_BUILD_DIR}\latex\${{ env.PDF_FILENAME }} ${env:EXPECTED_DOWNLOAD_DIR}
          Write-Output "File ${env:EXPECTED_BUILD_DIR}\latex\${{ env.PDF_FILENAME }} has been copied."
        } else {
          cp ${env:EXPECTED_BUILD_DIR}\latex\*.pdf ${env:EXPECTED_DOWNLOAD_DIR}
          Write-Output "Couldn't find ${env:EXPECTED_BUILD_DIR}\latex\${{ env.PDF_FILENAME }}, every existing PDF file has been copied."
        }

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Upload HTML and PDF

    - name: Upload HTML documentation artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: documentation-html
        path: doc/_build/html
        retention-days: 7

    - name: Upload PDF documentation artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: documentation-pdf
        path: doc/_build/latex/*.pdf
        retention-days: 7
