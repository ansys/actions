# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: >
  Build library action

description: |
  Verifies if a Python library builds properly. As a result of a successful
  building process, wheel and source distribution artifacts are generated. This
  action is expected to be used as an independent job.

  .. note::

      Use this action instead of the `build-ci-wheels
      <https://actions.docs.ansys.com/version/stable/build-actions/index.html#build-ci-wheels-action>`_
      if your library is a pure Python project with no source code to be compiled.

inputs:

  # Required inputs

  library-name:
    description: >
      Name of the Python library. This is the name used when uploading the wheel
      and source distribution as artifacts. The name should be the same one used
      in the PyPI index.
    required: true
    type: string

  # Optional inputs

  python-version:
    description: >
      Python version used for installing and execution of the build process.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.

    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        python -m build && python -m twine check dist/*

    - name: "Upload distribution artifacts to GitHub artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.library-name }}-artifacts
        path: dist/
        retention-days: 7
