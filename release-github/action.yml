# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Release to GitHub action

description: |
    Release library artifacts to the GitHub release section. Some minimum
    artifacts are required before running this action. These artifacts include
    ``documentation-html``, ``documentation-pdf``, and
    ``<library-name>-artifacts`` files. This last file must contain the wheels and
    source distribution files of the library.

    If you are using the ``title_format`` and ``issue_format`` from the ``doc-changelog`` action
    setup guide, https://actions.docs.ansys.com/version/dev/migrations/docs-changelog-setup.html,
    the changelog for your release is included in the release notes on GitHub.


inputs:

  # Required inputs

  library-name:
    description: |
     Name of the Python library to be published.
    required: true
    type: string

  token:
    description: |
      Required password, key or token with the correct credentials for deploying the
      documentation. If deploying to the current repository, the ``secrets.GITHUB_TOKEN`` token is
      is enough. For workflows deploying to other repositories, `generate and
      use a token with writing access
      <https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token>`_
      to that repository.
    required: true
    type: string

  # Optional inputs

  python-version:
    description: |
      Python version used for installing towncrier and retrieving the release notes.
    default: '3.12'
    required: false
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  additional-artifacts:
    description: |
        String containing a list of additional artifacts to be included in the
        GitHub release.
    required: false
    default: ''
    type: string

  dry-run:
    description: |
      Whether to run or not this action in testing mode. Testing mode executes
      all the action steps except the releasing artifacts one. This allows
      developers to verify the health of the action once integrated in their
      CI/CD pipelines without actually publishing artifacts. Default value is
      ``false``.
    required: false
    default: false
    type: boolean

  toml-version:
    description: |
      Toml version used for retrieving the towncrier directory.
    default: '0.10.2'
    required: false
    type: string

  pypandoc-binary-version:
    description: |
      Pypandoc-binary version used for converting rst text to markdown.
    default: '1.15'
    required: false
    type: string

  changelog-release-notes:
    description: |
      Whether or not to generate release notes using the changelog file from the
      pyproject.toml file's [tool.towncrier] section.
    default: true
    required: false
    type: boolean

  only-code:
    description: |
      Only include the source code in the release. This can be helpful for
      repositories that don't create wheels and/or documentation.
    required: false
    default: false
    type: boolean

  add-artifact-attestation-notes:
    description: |
      Whether or not to add artifact attestation notes to the release notes.
    default: false
    required: false
    type: boolean

  generate_release_notes:
    description: |
      Whether to automatically generate the name and body for this release.

      .. warning::

        If this option is activated and the action is used to create text
        content for the release notes body, the content will be
        pre-pended to the automatically generated notes.

    default: false
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    # Only one of both can be true: generate_release_notes, changelog-release-notes
    - name: "Sanity check on release notes"
      uses: ansys/actions/_logging@main
      if: ${{ inputs.generate_release_notes == 'true' && inputs.changelog-release-notes == 'true' }}
      with:
        level: "ERROR"
        message: >
          Only one of the inputs ``generate_release_notes`` and ``changelog-release-notes``
          can be true. Please set one of them to false.

    - name: "Checkout repository"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Download all artifacts that got generated in the CI/CD. Create a
          directory containing the final artifacts to be published in GitHub.

    - name: "Download all artifacts that got generated in the CI/CD"
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
      with:
        path: /tmp/artifacts

    - name: "Generate a distribution folder that will contain the desired artifacts"
      shell: bash
      run: mkdir -p dist

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: inputs.only-code == 'false'
      with:
        level: "INFO"
        message: >
          Create a dist/documentation directory and move the documentation-html
          artifact and the documentation-pdf artifact inside this folder.
          Finally, compress both artifacts.

    - name: "Moving documentation artifacts to dist/documentation directory"
      if: inputs.only-code == 'false'
      shell: bash
      run: |
        mkdir -p dist/documentation
        mv /tmp/artifacts/documentation-html dist/documentation/documentation-html
        mv /tmp/artifacts/documentation-pdf dist/documentation/documentation-pdf

    - name: "Compressing HTML documentation"
      if: inputs.only-code == 'false'
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: dist/documentation/documentation-html
        dest: dist/documentation/documentation-html.zip

    - name: "Compressing PDF documentation"
      if: inputs.only-code == 'false'
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: dist/documentation/documentation-pdf
        dest: dist/documentation/documentation-pdf.zip

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: inputs.only-code == 'false'
      with:
        level: "INFO"
        message: >
          Create a dist/wheelhouse directory and move all wheelhouse artifacts
          inside this folder.

    - name: "Move wheelhouse artifacts to dist/wheelhouse directory"
      if: inputs.only-code == 'false'
      shell: bash
      run: |
        mkdir -p dist/wheelhouse
        mv /tmp/artifacts/**/*-wheelhouse-*.zip dist/wheelhouse/

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: inputs.only-code == 'false'
      with:
        level: "INFO"
        message: >
          Create a dist/${{ inputs.library-name }}-artifacts directory and move all wheel artifacts
          inside this folder.

    - name: "Move wheel artifacts to dist/${{ inputs.library-name }}-artifacts directory"
      if: inputs.only-code == 'false'
      shell: bash
      env:
        LIBRARY_NAME: ${{ inputs.library-name }}
      run: |
        mv /tmp/artifacts/${LIBRARY_NAME}-artifacts dist/${LIBRARY_NAME}-artifacts

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: inputs.additional-artifacts != ''
      with:
        level: "INFO"
        message: >
          Create a dist/extra directory and move all the desired additional
          artifacts inside this directory.

    - name: "Move additional artifacts to dist/wheelhouse directory"
      shell: bash
      if: inputs.additional-artifacts != ''
      env:
        ADDITIONAL_ARTIFACTS: ${{ inputs.additional-artifacts }}
      run: |
        mkdir -p dist/extra
        for artifact in $ADDITIONAL_ARTIFACTS; do
          mv /tmp/artifacts/$artifact dist/extra/$artifact
        done

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Display the structure of the 'dist/' folder. Upload all artifacts.

    - name: "Display the structure of the 'dist/' folder"
      shell: bash
      run: ls -R dist/

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Install toml and pypandoc"
      shell: bash
      env:
        TOML_VERSION: ${{ inputs.toml-version }}
        PYPANDOC_BINARY_VERSION: ${{ inputs.pypandoc-binary-version }}
      run: |
        python -m pip install --upgrade pip toml=="$TOML_VERSION"
        python -m pip install pypandoc-binary=="$PYPANDOC_BINARY_VERSION"

    - name: "Get the release notes body"
      if: inputs.changelog-release-notes == 'true'
      shell: python
      run: |
        import sys
        from pathlib import Path
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from release_github_utils import get_release_notes

        # Get the path to your pyproject.toml file
        pyproject_path = Path("${{ github.workspace }}") / "pyproject.toml"

        get_release_notes(pyproject_path)

    - name: "Set RELEASE_NOTES_BODY env variable"
      if: inputs.changelog-release-notes == 'false'
      shell: bash
      run: echo "RELEASE_NOTES_BODY= " >> $GITHUB_ENV

    - name: "Extend RELEASE_NOTES_BODY with attestation notes"
      if: inputs.add-artifact-attestation-notes == 'true'
      shell: bash
      env:
        LIBRARY_NAME: ${{ inputs.library-name }}
      run: |
        SDIST_FILE=$(find dist/${LIBRARY_NAME}-artifacts -name '*.tar.gz' | sort | tail -n 1 | xargs basename)
        WHEEL_FILE=$(find dist/${LIBRARY_NAME}-artifacts -name '*.whl' | sort | tail -n 1 | xargs basename)

        {
          echo "RELEASE_NOTES_BODY<<EOF"
          echo "${RELEASE_NOTES_BODY}"

          echo "### Artifact Attestations"
          echo ""
          echo "You can verify this release's artifact attestations using [GitHub's command-line tool](https://cli.github.com/). For example, download the source distribution and wheel from this release page or from [PyPI](https://pypi.org/). Then, run the following commands:"
          echo ""
          echo "\`\`\`bash"
          echo "$ gh attestation verify --owner ${{ github.repository_owner }} ${SDIST_FILE}"
          echo "\`\`\`"
          echo "and"
          echo "\`\`\`bash"
          echo "$ gh attestation verify --owner ${{ github.repository_owner }} ${WHEEL_FILE}"
          echo "\`\`\`"
          echo "EOF"
        } >> "$GITHUB_ENV"

    - name: "Release to GitHub"
      uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
      env:
        REPO_NAME: ${{ github.event.repository.name }}
      if: inputs.dry-run == 'false'
      with:
        fail_on_unmatched_files: false
        generate_release_notes: ${{ inputs.generate_release_notes }}
        body: ${{ env.RELEASE_NOTES_BODY }}
        repository: ${{ github.repository_owner }}/${{ env.REPO_NAME }}
        token: ${{ inputs.token }}
        files: |
          # [COMMENT] Include wheel and source distribution artifacts
          dist/${{ inputs.library-name }}-artifacts/*.whl
          dist/${{ inputs.library-name }}-artifacts/*.tar.gz

          # [COMMENT] Include wheelhouse artifacts
          dist/wheelhouse/**/*-wheelhouse-*.zip

          # [COMMENT] Include HTML and PDF documentation artifacts
          dist/documentation/documentation-html.zip
          dist/documentation/documentation-pdf.zip

          # [COMMENT] Include additional artifacts
          dist/extra/**/*
