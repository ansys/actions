name: >
  Documentation generator for the versions page

description: |
  This action generates the ``version/index.html`` page. This page collects all
  the releases available for a library. This feature allows to not overload the
  content of the dropdown button for the multi-version.

  .. warning::

      This is a private action and its meant to be reused by ``doc-deploy-*``
      actions.


inputs:

  # Required inputs

  cname:
    description: >
      The canonical name (CNAME) containing the documentation.
    required: true
    type: string

  content-element-id:
    description: >
      Identifier of the HTML tag that comprises all the content of the article
      or post.
    required: true
    type: string


runs:
  using: "composite"
  steps:

    - name: "Use the latest 'index.html' as baseline for the versions page"
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          cp version/stable/index.html version/index.html
        else
          cp version/dev/index.html version/index.html
        fi

    - name: "Update all references to point to 'stable/_static' or 'dev/_static'"
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          sed -i "s|_static|stable/_static|g" version/index.html
        else
          sed -i "s|_static|dev/_static|g" version/index.html
        fi

    - name: "Collect all released versions and update the 'version/index.html' file"
      shell: bash
      run: |

        # Move inside of the version folder
        cd version

        # Create an array of folder names in reversed order
        folders=($(find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n' | sort -r))

        # Get the absolute path of the current directory
        abs_path=$(pwd)

        # Start building the HTML table
        table="<table class='table'><thead><tr><th>Version</th><th>URL</th></tr></thead><tbody>"

        # Loop through the folder array and add each folder name and URL to the table
        for folder in "${folders[@]}"; do
          url="https://${{ inputs.cname }}/version/${folder}"
          table+="<tr><td>${folder}</td><td><a href='${url}'>${url}</a></td></tr>"
        done

        # Close the table
        table+="</tbody></table>"

        # Declare the content of the page
        title="<h1>Versions</h1>"
        paragraph="<p>This table lists all versions released for the project:</p>"
        content="${title}${paragraph}${table}"

        # Declare the HTML file
        html_file="index.html"

        # Get the ID of the element hosting the content
        content_element_id=${{ inputs.content-element-id }}

        # Declare the content of the script
        script_content=$(cat <<EOF
        const element = document.getElementById("$content_element_id");
        element.innerHTML = "$content";
        EOF
        )

        # Inject the versions script in the head of the HTML page
        escaped_script_content=$(echo "$script_content" | tr '\n' ' ' | sed 's/[\/&]/\\&/g')
        sed -i "/<\/footer>/s/.*/&\n<style> \
        .bd-main .bd-content .bd-article-container { \
        display: flex; \
        flex-direction: column; \
        justify-content: start;} \
        .table { border-collapse: collapse; width: 100%; } \
        .table th, .table td { border: 1px solid #dddddd; text-align: center; padding: 8px; } \
        .table th { background-color: var(--pst-color-table-hover); }</style>\n<script>$escaped_script_content<\/script>/" "$html_file"