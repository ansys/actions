name: >
  Documentation generator for the versions page

description: |
  This action generates the ``version/index.html`` page. This page collects all
  the releases available for a library. This feature allows to not overload the
  content of the dropdown button for the multi-version.

  .. warning::

      This is a private action and its meant to be reused by ``doc-deploy-*``
      actions.


inputs:

  # Required inputs

  cname:
    description: >
      The canonical name (CNAME) containing the documentation.
    required: true
    type: string

  html-tag-content:
    description: >
      Name of the unique HTML tag that comprises all the content of the article
      or post.
    required: true
    type: string


runs:
  using: "composite"
  steps:

    - name: "Use the latest 'index.html' as baseline for the versions page"
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          cp version/stable/index.html version/index.html
        else
          cp version/dev/index.html version/index.html
        fi

    - name: "Update all references to point to 'stable/_static' or 'dev/_static'"
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          sed -i "s|_static|stable/_static|g" version/index.html
        else
          sed -i "s|_static|dev/_static|g" version/index.html
        fi

    - name: "Collect all released versions and update the 'version/index.html' file"
      shell: bash
      run: |

        # Move inside of the version folder
        cd version

        # Create an array of folder names
        folders=(*/)
        folders=("${folders[@]%/}")

        # Get the absolute path of the current directory
        abs_path=$(pwd)

        # Start building the HTML table
        table="<table class=\"table\"><thead><tr><th>Version</th><th>URL</th></tr></thead><tbody>"

        # Loop through the folder array and add each folder name and URL to the table
        for folder in "${folders[@]}"; do
          url="https://${{ inputs.cname }}/version/${folder}"
          table+="<tr><td>${folder}</td><td><a href="${url}">${url}</a></td></tr>"
        done

        # Close the table
        table+="</tbody></table>"

        # Add a paragraph describing the table
        paragraph="<p>This table lists all versions released for the project:</p>"

        # Convert the HTML into a temporary one-line document so 'sed' works as
        # desired
        tmp_file="tmp_index.html"
        tr -d '\n\r' < $html_file > $tmp_file

        # Retrieve the open and closing tags for the desired element
        input_tag=${{ inputs.html-tag-content }}
        close_tag=$(grep -o "<$input_tag\b[^>]*>" "$tmp_file" | sed 's/^<\([[:alnum:]]\{1,\}\)[^>]*>/<\/\1>/g')
        open_tag=$(grep -o "<$html_tag\b[^>]*>" "$tmp_file")

        # Update the content of the page with the versions
        sed -i "s|$open_tag.*$close_tag|$open_tag<h1>Versions</h1>$close_tag$paragraph$table|g" "$tmp_file"

        # Restore the style of the HTML file
        sudo apt install tidy
        tidy -q -indent -ashtml -o $html_file $tmp_file
        rm -rf $tmp_file
