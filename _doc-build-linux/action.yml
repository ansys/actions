# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Documentation build action

description: |
  Build library documentation using `Sphinx
  <https://www.sphinx-doc.org/en/master/>`_. The action installs documentation
  dependencies provided either in a requirement file, e.g.
  ``requirements/requirements_doc.txt``, or in the ``[doc]`` section of the
  additional dependencies in the ``pyproject.toml`` file. Assuming that
  `sphinx-build
  <https://www.sphinx-doc.org/en/master/man/sphinx-build.html>`_ is available
  after installing the documentation dependencies, the action uses it
  to generate documentation from the source. It requires that all the
  documentation is contained in the ``doc/`` directory of a project. The
  action locates the ``doc/Makefile`` and runs the ``make html`` and
  ``make pdf`` commands.

inputs:

  # Required inputs

  sphinxopts:
    description: |
      Set of options to pass to the ``Sphinx`` builder.

      .. note::

          This will override the ``SPHINXOPTS`` declared in your Makefile.

    required: true
    type: string

  dependencies:
    description: |
      String of system dependencies to be installed before building the
      documentation of the project.
    required: true
    type: string

  skip-dependencies-cache:
    description: |
      Whether to ignore dependencies cache or not - for OS libraries.
    required: true
    type: boolean

  requires-xvfb:
    description: |
      Whether to install `X Virtual Frame Buffer (XVFB)
      <https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml>`_ and run
      the whole test session using XVFB.
    required: true
    type: boolean

  skip-install:
    description: |
      Whether to skip the installation of the project.
      Pure documentation projects require that this action be set to ``false``
      because there is no Python library associated with the project.
    required: true
    type: boolean

  requirements-file:
    description: |
      Path to the requirements file in case it needs to be in a specific location.
      This is useful for non python projects, where you don't necessarily have a requirements
      file in the root of the project.
    required: true
    type: string

  check-links:
    description: |
      Whether to perform external link checks during the generation of
      documentation.
    required: true
    type: boolean

  add-pdf-html-docs-as-assets:
    description: |
      Whether to add PDF and HTML documentation as assets of the HTML
      documentation. The HTML documentation is compressed before being added.
      The PDF file name is expected to be retrieved through the documentation's
      configuration file 'conf.py' in 'doc/source'.

      .. warning::

          The HTML files are expected to be contained in ``doc/_build`` and the
          PDF file is copied in ``doc/_build/html/_static/assets/download``.
          If such directories do not exist in your repo, the action will fail.

    required: true
    type: boolean

  needs-quarto:
    description: |
      Whether to add a Quarto cheatsheet to the documentation. Default value is
      ``false``.

      .. warning::

        Quarto needs Jupyter to be installed. Make sure to add `Jupyter <https://pypi.org/project/jupyter/>` to
        the requirements list.
    required: true
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    required: true
    type: boolean

  optional-dependencies-name:
    description: |
      Any valid install targets defined in the ``pyproject.toml`` file, or the suffix
      of a requirement file. Multiple targets can be specified as a comma-separated
      list. The associated dependencies are installed before building the documentation.
    required: true
    type: string

  group-dependencies-name:
    description: |
      Any valid dependency groups defined in the ``pyproject.toml`` file. Multiple
      targets can be specified as a comma-separated list. The associated dependencies
      are installed before running the documentation build. If set to ``''``, the action
      will not use dependency groups.
    required: true
    type: string

runs:
  using: "composite"
  steps:

    - name: "Collect system dependencies"
      id: needed-dependencies
      env:
        DEPENDENCIES: ${{ inputs.dependencies }}
        REQUIRES_XVFB: ${{ inputs.requires-xvfb }}
      shell: bash
      run: |
        if [[ "$REQUIRES_XVFB" == 'true' ]]; then
          echo "NEEDED_DEPS=$(echo "$DEPENDENCIES xvfb")" >> $GITHUB_OUTPUT
        else
          echo "NEEDED_DEPS=$(echo "$DEPENDENCIES")" >> $GITHUB_OUTPUT
        fi

    - name: "Cache apt packages needed"
      uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40 # v1.4.3
      if: inputs.skip-dependencies-cache == 'false' && steps.needed-dependencies.outputs.NEEDED_DEPS != ''
      with:
        packages: ${{ steps.needed-dependencies.outputs.NEEDED_DEPS }}
        version: 1.0

    - name: "Update apt-get"
      shell: bash
      run: |
        sudo apt-get update

    - name: "Install system dependencies"
      shell: bash
      env:
        NEEDED_DEPS: ${{ steps.needed-dependencies.outputs.NEEDED_DEPS }}
      run: |
        sudo apt-get install -y $NEEDED_DEPS

    - name: "Install LaTeX"
      shell: bash
      run: |
        sudo apt-get install -y texlive-latex-extra latexmk

    - name: Install Quarto
      if: ${{ inputs.needs-quarto == 'true' }}
      uses: quarto-dev/quarto-actions/setup@9e48da27e184aa238fcb49f5db75469626d43adb # v2.1.9
      with:
        tinytex: true
        version: 1.6.43

    - name: Check Quarto Version
      if: ${{ inputs.needs-quarto == 'true' }}
      shell: bash
      run: |
        quarto --version

    - name: "Install Poppler for PDF to PNG conversion"
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Determine context.

    - name: "Determine GitHub environment variables"
      id: environment-variables
      shell: bash
      env:
        USE_UV: ${{ inputs.use-uv }}
      run: |
        if [[ -f "pyproject.toml" ]] && grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          echo "BUILD_BACKEND=$(echo 'poetry')" >> $GITHUB_OUTPUT
          echo "SPHINX_BUILD_MAKE=$(echo 'poetry run -- make')" >> $GITHUB_OUTPUT
        elif [[ "$USE_UV" == 'true' ]]; then
          echo "BUILD_BACKEND=$(echo 'uv')" >> $GITHUB_OUTPUT
          echo "SPHINX_BUILD_MAKE=$(echo 'uv run --no-sync -- make')" >> $GITHUB_OUTPUT
        else
          echo "BUILD_BACKEND=$(echo 'pip')" >> $GITHUB_OUTPUT
          echo "SPHINX_BUILD_MAKE=$(echo 'make')" >> $GITHUB_OUTPUT
        fi

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build backend: ${{ steps.environment-variables.outputs.BUILD_BACKEND }}
          Sphinx build make: ${{ steps.environment-variables.outputs.SPHINX_BUILD_MAKE }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up python to build the documentation.

    # NOTE: Installation of poetry in a separate environment to the project to
    # avoid situations in which both poetry and the project have shared
    # dependencies with different version. This can lead to CICD failures. For
    # more information, see https://github.com/ansys/actions/pull/560
    - name: "Add pipx/bin directory to Github Path"
      if: steps.environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "${{ runner.temp }}/pipx/bin" >> $GITHUB_PATH  # zizmor: ignore[github-env]

    # NOTE: Poetry uses virtual environments when installing a project. As we
    # want to control that creation, we store POETRY_VIRTUALENVS_CREATE=false
    # in the GitHub environment.
    - name: "Set poetry environment variable(s)"
      if: steps.environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "POETRY_VIRTUALENVS_CREATE=false" >> $GITHUB_ENV # zizmor: ignore[github-env]

    # NOTE: Install pipx in a location that can be used in following CICD jobs
    # but ensure that poetry is installed in a temporary folder cleaned before
    # and after each job. This way poetry is kinda "installed at system level"
    # making it available in the following call and installed in a different
    # environment from the project.
    - name: "Install poetry and create a virtual environment"
      if: steps.environment-variables.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: |
        python -m pip install pipx
        python -m pipx install poetry
      env:
        PIPX_BIN_DIR: ${{ runner.temp }}/pipx/bin
        PIPX_HOME : ${{ runner.temp }}/pipx/home

    # NOTE: A virtual environment is needed regardless in all cases. In uv's case,
    # the installation speed "uv pip" offers is what needs to be taken advantage of,
    # using "uv venv" in a separate step is not necessary since "uv pip" will still
    # work with existing virtual environments.
    - name: "Create a virtual environment"
      shell: bash
      run: |
        python -m venv .venv

    # ------------------------------------------------------------------------

    - name: "Update pip"
      shell: bash
      env:
        USE_UV: ${{ inputs.use-uv }}
      run: |
        source .venv/bin/activate
        if [[ "$USE_UV" == 'true' ]]; then
          uv pip install -U pip
        else
          python -m pip install -U pip
        fi

    - name: "Check if requirements.txt file exists"
      id: check-requirements-file-exists
      shell: bash
      env:
        REQUIREMENTS_FILE: ${{ inputs.requirements-file }}
      run: |
        echo "EXISTS_DOC_REQUIREMENTS=$(if [ -f "${REQUIREMENTS_FILE}" ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_OUTPUT

    - name: "Install documentation dependencies from requirements file"
      if: steps.check-requirements-file-exists.outputs.EXISTS_DOC_REQUIREMENTS == 'true'
      shell: bash
      env:
        REQUIREMENTS_FILE: ${{ inputs.requirements-file }}
        USE_UV: ${{ inputs.use-uv }}
      run: |
        source .venv/bin/activate
        if [[ "${USE_UV}" == 'true' ]]; then
          uv pip install -r "${REQUIREMENTS_FILE}"
        else
          python -m pip install -r "${REQUIREMENTS_FILE}"
        fi

    - name: "Install Python library"
      shell: bash
      if: inputs.skip-install == 'false'
      env:
        BUILD_BACKEND: ${{ steps.environment-variables.outputs.BUILD_BACKEND }}
      run: |
        source .venv/bin/activate
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          poetry install
        elif [[ "$BUILD_BACKEND" == 'uv' ]]; then
          uv pip install .
        else
          python -m pip install .
        fi

    - name: "Install documentation dependencies from pyproject.toml"
      shell: bash
      if: steps.check-requirements-file-exists.outputs.EXISTS_DOC_REQUIREMENTS == 'false'
      env:
        BUILD_BACKEND: ${{ steps.environment-variables.outputs.BUILD_BACKEND }}
        GROUP_DEPENDENCIES_NAME: ${{ inputs.group-dependencies-name }}
        OPTIONAL_DEPENDENCIES_NAME: ${{ inputs.optional-dependencies-name }}
      run: |
        source .venv/bin/activate
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          poetry install --with "${OPTIONAL_DEPENDENCIES_NAME}"
        else
          # Optional dependencies
          optional_dependencies_flag=""
          if [ -n "${OPTIONAL_DEPENDENCIES_NAME}" ]; then
            optional_dependencies_flag="[${OPTIONAL_DEPENDENCIES_NAME}]"
          fi
          # Group dependencies
          group_dependencies_flag=""
          if [ -n "${GROUP_DEPENDENCIES_NAME}" ]; then
            IFS=',' read -ra group_list <<< "${GROUP_DEPENDENCIES_NAME}"
            for group in "${group_list[@]}"; do
              group_dependencies_flag="$group_dependencies_flag --group $group"
            done
          fi
          # Install dependencies (potentially mix of optional and group)
          if [[ "${BUILD_BACKEND}" == 'uv' ]]; then
            uv pip install $group_dependencies_flag .$optional_dependencies_flag
          else
            python -m pip install $group_dependencies_flag .$optional_dependencies_flag
          fi
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build HTML and PDF

    - name: "Build HTML and PDF"
      if: inputs.requires-xvfb == 'false'
      env:
        SPHINXOPTS: ${{ inputs.sphinxopts }}
        CHECK_LINKS: ${{ inputs.check-links }}
        SPHINX_BUILD_MAKE: ${{ steps.environment-variables.outputs.SPHINX_BUILD_MAKE }}
      shell: bash
      run: |
        source .venv/bin/activate
        ${SPHINX_BUILD_MAKE} -C doc html SPHINXOPTS="${SPHINXOPTS}"
        ${SPHINX_BUILD_MAKE} -C doc pdf
        if [[ "${CHECK_LINKS}" == 'true' ]];
        then
          $SPHINX_BUILD_MAKE -C doc linkcheck SPHINXOPTS="${SPHINXOPTS}"
        fi

    - name: "Build HTML and PDF documentation using xvfb"
      if: inputs.requires-xvfb == 'true'
      env:
        SPHINXOPTS: ${{ inputs.sphinxopts }}
        CHECK_LINKS: ${{ inputs.check-links }}
        SPHINX_BUILD_MAKE: ${{ steps.environment-variables.outputs.SPHINX_BUILD_MAKE }}
      shell: bash
      run: |
        source .venv/bin/activate
        xvfb-run ${SPHINX_BUILD_MAKE} -C doc html SPHINXOPTS="${SPHINXOPTS}"
        xvfb-run ${SPHINX_BUILD_MAKE} -C doc pdf
        if [[ "${CHECK_LINKS}" == 'true' ]];
        then
          xvfb-run $SPHINX_BUILD_MAKE -C doc linkcheck SPHINXOPTS="${SPHINXOPTS}"
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      with:
        level: "INFO"
        message: >
          Set environment variable PDF_FILENAME.

    - name: Parse PDF file name
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: bash
      run: |
        source .venv/bin/activate
        python ${{ github.action_path }}/../python-utils/parse_doc_conf.py

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true' ) && (env.PDF_FILENAME == '') }}
      with:
        level: "ERROR"
        message: >
          Unable to determine PDF filename using conf.py file.

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true' ) && (env.PDF_FILENAME != '') }}
      with:
        level: "INFO"
        message: >
          Environment variable PDF_FILENAME set to ${{ env.PDF_FILENAME }}.

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      with:
        level: "INFO"
        message: >
          Check if expected directories exist.

    - name: Set expected build directory
      id: set-expected-build-directory
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: bash
      run: |
        echo "EXPECTED_BUILD_DIR=doc/_build" >> ${GITHUB_OUTPUT}

    - name: Check expected build directory
      id: check-expected-build-dir
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
      shell: bash
      run: |
        echo "EXISTS_EXPECTED_BUILD_DIR=$( [ -d "${EXPECTED_BUILD_DIR}" ] && echo 'true' || echo 'false' )" >> ${GITHUB_OUTPUT}

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true') && (steps.check-expected-build-dir.outputs.EXISTS_EXPECTED_BUILD_DIR == 'false') }}
      with:
        level: "ERROR"
        message: >
          Expected build directory ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }} does not exist.

    - name: Set expected download directory
      id: set-expected-download-directory
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
      shell: bash
      run: |
        echo "EXPECTED_DOWNLOAD_DIR=$(echo "${EXPECTED_BUILD_DIR}/html/_static/assets/download")" >> ${GITHUB_OUTPUT}

    - name: Check expected download directory
      id: check-expected-download-directory
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      env:
        EXPECTED_DOWNLOAD_DIR: ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }}
      shell: bash
      run: |
        echo "EXISTS_EXPECTED_DOWNLOAD_DIR=$( [ -d "${EXPECTED_DOWNLOAD_DIR}" ] && echo 'true' || echo 'false' )" >> ${GITHUB_OUTPUT}

    - uses: ansys/actions/_logging@main
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true') && (steps.check-expected-download-directory.outputs.EXISTS_EXPECTED_DOWNLOAD_DIR == 'false') }}
      with:
        level: "WARNING"
        message: >
          Expected build directory ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }} does not exist. Creating it...

    - name: Create expected download directory
      if: ${{ (inputs.add-pdf-html-docs-as-assets == 'true') && (steps.check-expected-download-directory.outputs.EXISTS_EXPECTED_DOWNLOAD_DIR == 'false') }}
      shell: bash
      env:
        EXPECTED_DOWNLOAD_DIR: ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }}
      run: |
        mkdir -p "${EXPECTED_DOWNLOAD_DIR}"

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      with:
        level: "INFO"
        message: >
          Add PDF and HTML documentation as assets.

    - name: Compress HTML documentation
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}/html
        dest: documentation-html.zip

    - name: Add assets to HTML docs
      if: ${{ inputs.add-pdf-html-docs-as-assets == 'true' }}
      shell: bash
      env:
        EXPECTED_BUILD_DIR: ${{ steps.set-expected-build-directory.outputs.EXPECTED_BUILD_DIR }}
        EXPECTED_DOWNLOAD_DIR: ${{ steps.set-expected-download-directory.outputs.EXPECTED_DOWNLOAD_DIR }}
        PDF_FILENAME: ${{ env.PDF_FILENAME }}
      run: |
        mv documentation-html.zip ${EXPECTED_DOWNLOAD_DIR}
        if [ -e  "${EXPECTED_BUILD_DIR}/latex/${PDF_FILENAME}" ]; then
            cp ${EXPECTED_BUILD_DIR}/latex/${PDF_FILENAME} ${EXPECTED_DOWNLOAD_DIR}
            echo "File ${EXPECTED_BUILD_DIR}/latex/${PDF_FILENAME} has been copied."
        else
            cp ${EXPECTED_BUILD_DIR}/latex/*.pdf ${EXPECTED_DOWNLOAD_DIR}
            echo "Couldn't find ${EXPECTED_BUILD_DIR}/latex/${PDF_FILENAME}, every existing PDF file has been copied."
        fi

    # ------------------------------------------------------------------------

    - name: "Upload HTML documentation artifact"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: documentation-html
        path: doc/_build/html
        retention-days: 7

    - name: "Upload PDF documentation artifact"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: documentation-pdf
        path: doc/_build/latex/*.pdf
        retention-days: 7
