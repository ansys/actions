# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Build wheelhouse action

description: |
  Generates compressed artifacts for the wheelhouse of a Python library. The
  wheelhouse contains all the necessary dependencies to install the project.
  This allows for local installations and avoids the need to connect to the
  online PyPI index.

  .. warning::

      Since version 4.1, the input parameter ``library-namespace`` is no longer
      required.

inputs:

  # Required inputs

  library-name:
    description: |
      Name of the Python library. This is the name used when uploading the wheel
      and source distribution as artifacts. The name should be the same one used
      in the PyPI index.
    required: true
    type: string

  operating-system:
    description: |
      Name of the operating system where the library is installed.
    required: true
    type: string

  python-version:
    description: |
      Python version used for installing and execution of the build wheel process.
    required: true
    type: string

  # Optional inputs

  target:
    description: |
      Optional target used during the building process.
    required: false
    default: ''
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  check-licenses:
    description: |
      Whether to check the library's dependencies license or not. If ``true``. the licenses
      are checked. If ``false``, no license check is performed. By default it is set to
      ``true``.
    required: false
    default: true
    type: boolean

  whitelist-license-check:
    description: |
      Optional list of packages to ignore during the license check. Separated by a comma.
      Only used when ``check-licenses`` is set to ``true``.
    required: false
    default: ''
    type: string

  checkout:
    description: |
      Whether to do a checkout step or not. If ``true``, the checkout step is performed.
      If ``false``, the checkout is skipped allowing the workspace from a prior step to
      be used unaltered. By default it is set to ``true``.
    required: false
    default: true
    type: boolean

  working-directory:
     description: |
       Directory to execute this action. Useful for repositories containing
       various Python libraries.
     required: false
     default: '.'
     type: string

  attest-provenance:
    description: |
      Whether to generate build provenance attestations for wheelhouse
      artifacts.

      .. warning::

        Adding provenance attestations requires write permissions for `id-token`
        and `attestation`. Otherwise, this action will fail.

    required: false
    default: false
    type: boolean

  install-build-and-wheel:
    description: |
      Whether to install ``build`` and ``wheel`` libraries before building the wheelhouse.
    required: false
    default: false
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    default: true
    required: false
    type: boolean

outputs:

  activate-venv:
    description: |
      Command used to activate the virtual environment set up by this action.
      It can be reused in later steps of the same job to execute tasks within
      the virtual environment, such as running smoke tests.
    value: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: ${{ inputs.use-uv }}
        prune-uv-cache: ${{ inputs.use-python-cache != 'true' }}

    - name: "Identify the build system"
      id: build-system
      shell: bash
      run: |
        if [[ -f "pyproject.toml" ]] && grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          echo "BUILD_BACKEND=$(echo 'poetry')" >> ${GITHUB_OUTPUT}
        else
          echo "BUILD_BACKEND=$(echo 'pip')" >> ${GITHUB_OUTPUT}
        fi

    - name: "Check if specific target is requested"
      id: specific-target-requested
      shell: bash
      env:
        TARGET: ${{ inputs.target }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
      run: |
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          echo "install_target=$( [[ "${TARGET}" == '' ]] && echo '' || echo "--with ${TARGET}")" >> ${GITHUB_OUTPUT}
        else
          echo "install_target=$( [[ "${TARGET}" == '' ]] && echo "." || echo ".[${TARGET}]")" >> ${GITHUB_OUTPUT}
        fi
        echo "wheelhouse_target=$( [[ "${TARGET}" == '' ]] && echo 'wheelhouse' || echo "${TARGET}-wheelhouse")" >> ${GITHUB_OUTPUT}

    # NOTE: Installation of poetry in a separate environment to the project to
    # avoid situations in which both poetry and the project have shared
    # dependencies with different version. This can lead to CICD failures. For
    # more information, see https://github.com/ansys/actions/pull/560
    - name: "Add pipx/bin directory to Github Path"
      if: steps.build-system.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "${RUNNER_TEMP}/pipx/bin" >> $GITHUB_PATH # zizmor: ignore[github-env] no workaround for this

    # NOTE: Poetry uses virtual environments when installing a project. As we
    # want to control that creation, we store POETRY_VIRTUALENVS_CREATE=false
    # in the GitHub environment.
    - name: "Set poetry environment variable(s)"
      if: steps.build-system.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "POETRY_VIRTUALENVS_CREATE=false" >> $GITHUB_ENV

    # NOTE: Install pipx in a location that can be used in following CICD jobs
    # but ensure that poetry is installed in a temporary folder cleaned before
    # and after each job. This way poetry is kinda "installed at system level"
    # making it available in the following call and installed in a different
    # environment from the project.
    - name: "Install poetry and create a virtual environment"
      if: steps.build-system.outputs.BUILD_BACKEND == 'poetry'
      shell: bash
      run: |
        python -m pip install pipx
        python -m pipx install poetry
        python -m pipx inject poetry poetry-plugin-export
      env:
        PIPX_BIN_DIR: ${{ runner.temp }}/pipx/bin
        PIPX_HOME : ${{ runner.temp }}/pipx/home

    - name: "Create a virtual environment"
      shell: bash
      env:
        USE_UV: ${{ inputs.use-uv }}
      run: |
        if [[ "$USE_UV" == 'true' ]]; then
          uv venv .venv
        else
          python -m venv .venv
        fi

    - name: "Set up virtual environment activation command"
      id: virtual-environment-activation-command
      shell: bash
      run: |
        if [[ ${RUNNER_OS} == 'Windows' ]]; then
          echo "ACTIVATE_VENV=$(echo 'source .venv/scripts/activate')" >> $GITHUB_OUTPUT
        else
          echo "ACTIVATE_VENV=$(echo 'source .venv/bin/activate')" >> $GITHUB_OUTPUT
        fi

    - name: "Update pip"
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        USE_UV: ${{ inputs.use-uv }}
      run: |
        ${ACTIVATE_VENV}
        if [[ "$USE_UV" == 'true' ]]; then
          uv pip install -U pip
        else
          python -m pip install -U pip
        fi

    - name: "Install the library with the desired targets"
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python' || 'python -m pip install' }}
        INSTALL_TARGET: ${{ steps.specific-target-requested.outputs.install_target }}
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
      shell: bash
      run: |
        ${ACTIVATE_VENV}
        cd ${WORKING_DIRECTORY}
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          poetry install ${INSTALL_TARGET}
        else
           ${INSTALL_COMMAND} "${INSTALL_TARGET}"
        fi

    - name: "Verify library is properly installed and get its version number"
      id: library-version
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
        LIBRARY_NAME: ${{ inputs.library-name }}
        USE_UV: ${{ inputs.use-uv }}
        PYTHON_COMMAND: ${{ inputs.use-uv == 'true' && 'uv python' || 'python' }}
      run: |
        ${ACTIVATE_VENV}
        library_name="${LIBRARY_NAME}"

        version=$(python -c "import importlib.metadata as importlib_metadata; print(importlib_metadata.version('$library_name'))")
        if [ -z "$version" ]; then
            echo "Problem getting the library version"
            exit 1;
        else
            echo "The library version is: $version";
        fi;
        echo "library_version=${version}" >> ${GITHUB_OUTPUT}

    - name: "Ensure tag version matches metadata version when triggered by push of tags"
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        LIBRARY_VERSION: ${{ steps.library-version.outputs.library_version }}
        TAG_REF: ${{ github.ref_name }}
      run: |
        ${ACTIVATE_VENV}
        if [[ v${LIBRARY_VERSION} == $TAG_REF ]]; then
          echo "Tag version matches metadata version. Proceeding with the build."
        else
          echo "Tag version does not match metadata version. Exiting with error."
          echo "Tag version: $TAG_REF"
          echo "Metadata version: $LIBRARY_VERSION"
          exit 1
        fi

    - name: Run smoke test for the library
      env:
        ACTION_PATH: ${{ github.action_path }}
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        LIBRARY_NAME: ${{ inputs.library-name }}
      shell: bash
      run: |
        ${ACTIVATE_VENV}
        python ${ACTION_PATH}/smoke_test.py ${LIBRARY_NAME}

    - name: "Create Software Bill of Materials (SBOM) using Syft"
      env:
        LIBRARY_NAME: ${{ inputs.library-name }}
        LIBRARY_VERSION: ${{ steps.library-version.outputs.library_version }}
        WHEELHOUSE_TARGET: ${{ steps.specific-target-requested.outputs.wheelhouse_target }}
        OPERATING_SYSTEM: ${{ inputs.operating-system }}
        PYTHON_VERSION: ${{ inputs.python-version }}
      shell: bash
      run: |
        if ! command -v syft > /dev/null; then
          echo "Syft not found, installation of v1.26.0 in progress..."
          mkdir -p ~/.local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/ac883f52edb8ca1f5a0a61d12c288d4b34ea3897/install.sh | sh -s -- -b ~/.local/bin v1.26.0
        else
          echo "Syft installation found"
        fi

        echo "Creating SBOM file..."
        ~/.local/bin/syft .venv --source-name "${LIBRARY_NAME}" --source-version "${LIBRARY_VERSION}" -o spdx > sbom.spdx

        echo "Renaming SBOM file..."
        mv sbom.spdx "${LIBRARY_NAME}-v${LIBRARY_VERSION}-${WHEELHOUSE_TARGET}-${OPERATING_SYSTEM}-${PYTHON_VERSION}-sbom.spdx"

    - name: "Upload the SBOM file"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}-sbom
        path: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}-sbom.spdx
        retention-days: 7

    - name: Generate build provenance attestation
      if: ${{ inputs.attest-provenance == 'true' }}
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
      with:
        subject-path: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}-sbom.spdx

    - name: "Optionally install build and wheel"
      if: ${{ inputs.install-build-and-wheel == 'true' }}
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python' || 'python -m pip install' }}
      run: |
        ${ACTIVATE_VENV}
        $INSTALL_COMMAND build wheel

    - name: "Generate the wheelhouse"
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.virtual-environment-activation-command.outputs.ACTIVATE_VENV }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
        INSTALL_TARGET: ${{ steps.specific-target-requested.outputs.install_target }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: |
        ${ACTIVATE_VENV}
        cd ${WORKING_DIRECTORY}
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          poetry export --without-hashes --format=requirements.txt --output=wheel_reqs.txt
          pip wheel -w ${GITHUB_WORKSPACE}/wheelhouse -r wheel_reqs.txt
        else
          python -m pip wheel "${INSTALL_TARGET}" -w ${GITHUB_WORKSPACE}/wheelhouse
        fi

    - name: "Compress the wheelhouse"
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: wheelhouse
        dest: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}.zip

    - name: "Upload the compressed wheelhouse"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}
        path: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}.zip
        retention-days: 7

    - name: Generate build provenance attestation
      if: inputs.attest-provenance == 'true'
      uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
      with:
        subject-path: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}.zip

    - name: Check library's dependencies license
      uses: ansys/actions/check-licenses@main
      if: ${{ inputs.check-licenses == 'true' }}
      with:
        python-version: ${{ inputs.python-version }}
        skip-install: true
        checkout: false
        whitelist-license-check: ${{ inputs.whitelist-license-check }}
