# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Build wheelhouse action

description: |
  Generates compressed artifacts for the wheelhouse of a Python library. The
  wheelhouse contains all the necessary dependencies to install the project.
  This allows for local installations and avoids the need to connect to the
  online PyPI index.

  .. warning::

      Since version 4.1, the input parameter ``library-namespace`` is no longer
      required.

inputs:

  # Required inputs

  library-name:
    description: |
      Name of the Python library. This is the name used when uploading the wheel
      and source distribution as artifacts. The name should be the same one used
      in the PyPI index.
    required: true
    type: string

  operating-system:
    description: |
      Name of the operating system where the library is installed.
    required: true
    type: string

  python-version:
    description: |
      Python version used for installing and execution of the build wheel process.
    required: true
    type: string

  # Optional inputs

  target:
    description: |
      Optional target used during the building process.
    required: false
    default: ''
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  check-licenses:
    description: |
      Whether to check the library's dependencies license or not. If ``true``. the licenses
      are checked. If ``false``, no license check is performed. By default it is set to
      ``true``.
    required: false
    default: true
    type: boolean

  whitelist-license-check:
    description: |
      Optional list of packages to ignore during the license check. Separated by a comma.
      Only used when ``check-licenses`` is set to ``true``.
    required: false
    default: ''
    type: string

  checkout:
    description: |
      Whether to do a checkout step or not. If ``true``, the checkout step is performed.
      If ``false``, the checkout is skipped allowing the workspace from a prior step to
      be used unaltered. By default it is set to ``true``.
    required: false
    default: true
    type: boolean

  working-directory:
     description: |
       Directory to execute this action. Useful for repositories containing
       various Python libraries.
     required: false
     default: '.'
     type: string

  attest-provenance:
    description: |
      Whether to generate build provenance attestations for wheelhouse
      artifacts.

      .. warning::

        Adding provenance attestations requires write permissions for `id-token`
        and `attestation`. Otherwise, this action will fail.

    required: false
    default: false
    type: boolean

  install-build-and-wheel:
    description: |
      Whether to install ``build`` and ``wheel`` libraries before building the wheelhouse.
    required: false
    default: false
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    default: true
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: ${{ inputs.use-uv }}

    - name: "Update pip"
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --system' || 'python -m pip install' }}
      run: |
        $INSTALL_COMMAND -U pip

    - name: "Optionally install build and wheel"
      if: ${{ inputs.install-build-and-wheel == 'true' }}
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --system' || 'python -m pip install' }}
      run: |
        $INSTALL_COMMAND build wheel

    - name: "Identify the build system"
      id: build-system
      shell: bash
      run: |
        if [[ -f "pyproject.toml" ]] && grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          echo "BUILD_BACKEND=$(echo 'poetry')" >> ${GITHUB_OUTPUT}
        else
          echo "BUILD_BACKEND=$(echo 'pip')" >> ${GITHUB_OUTPUT}
        fi

    - name: "Check if specific target is requested"
      id: specific-target-requested
      shell: bash
      env:
        TARGET: ${{ inputs.target }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
      run: |
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          echo "install_target=$( [[ "${TARGET}" == '' ]] && echo '' || echo "--with ${TARGET}")" >> ${GITHUB_OUTPUT}
        else
          echo "install_target=$( [[ "${TARGET}" == '' ]] && echo "${WORKING_DIRECTORY}" || echo "${WORKING_DIRECTORY}[${TARGET}]")" >> ${GITHUB_OUTPUT}
        fi
        echo "wheelhouse_target=$( [[ "${TARGET}" == '' ]] && echo 'wheelhouse' || echo "${TARGET}-wheelhouse")" >> ${GITHUB_OUTPUT}

    - name: "Install poetry if needed (and configure it as needed - no auto poetry env + pipx + dedicated virtualenv)"
      if: steps.build-system.outputs.BUILD_BACKEND == 'poetry'
      id: poetry-env
      shell: bash
      env:
        PIPX_BIN_DIR: ${{ runner.temp }}/pipx/bin
        PIPX_HOME: ${{ runner.temp }}/pipx/home
      run: |
        python -m pip install pipx
        python -m pipx install poetry
        python -m pipx inject poetry poetry-plugin-export
        echo "${{ runner.temp }}/pipx/bin" >> $GITHUB_PATH # zizmor: ignore[github-env]
        echo "POETRY_VIRTUALENVS_CREATE=false" >> $GITHUB_ENV
        python -m venv .venv
        if [[ ${{ runner.os }} == 'Windows' ]]; then
          echo "activate_env=$(echo 'source .venv/scripts/activate')" >> ${GITHUB_OUTPUT}
        else
          echo "activate_env=$(echo 'source .venv/bin/activate')" >> ${GITHUB_OUTPUT}
        fi

    - name: "Install the library with the desired targets"
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --system' || 'python -m pip install' }}
        INSTALL_TARGET: ${{ steps.specific-target-requested.outputs.install_target }}
        ACTIVATE_VENV: ${{ steps.poetry-env.outputs.activate_env }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
      shell: bash
      run: |
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          ${ACTIVATE_VENV}
          poetry install ${INSTALL_TARGET}
        else
           ${INSTALL_COMMAND} "${INSTALL_TARGET}"
        fi

    - name: "Verify library is properly installed and get its version number"
      id: library-version
      shell: bash
      env:
        ACTIVATE_VENV: ${{ steps.poetry-env.outputs.activate_env }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
        LIBRARY_NAME: ${{ inputs.library-name }}
      run: |
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          ${ACTIVATE_VENV}
        fi
        library_name="${LIBRARY_NAME}"

        version=$(python -c "import importlib.metadata as importlib_metadata; print(importlib_metadata.version('$library_name'))")
        if [ -z "$version" ]; then
            echo "Problem getting the library version"
            exit 1;
        else
            echo "The library version is: $version";
        fi;
        echo "library_version=${version}" >> ${GITHUB_OUTPUT}

    - name: "Ensure tag version matches metadata version when triggered by push of tags"
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
      shell: bash
      env:
        TAG_REF: ${{ github.ref_name }}
        LIBRARY_VERSION: ${{ steps.library-version.outputs.library_version }}
      run: |
        if [[ v${LIBRARY_VERSION} == $TAG_REF ]]; then
          echo "Tag version matches metadata version. Proceeding with the build."
        else
          echo "Tag version does not match metadata version. Exiting with error."
          echo "Tag version: $TAG_REF"
          echo "Metadata version: $LIBRARY_VERSION"
          exit 1
        fi

    - name: "Generate the wheelhouse"
      shell: bash
      env:
        INSTALL_TARGET: ${{ steps.specific-target-requested.outputs.install_target }}
        ACTIVATE_VENV: ${{ steps.poetry-env.outputs.activate_env }}
        BUILD_BACKEND: ${{ steps.build-system.outputs.BUILD_BACKEND }}
      run: |
        if [[ "${BUILD_BACKEND}" == 'poetry' ]]; then
          ${ACTIVATE_VENV}
          poetry export --without-hashes --format=requirements.txt --output=wheel_reqs.txt
          pip wheel -w wheelhouse -r wheel_reqs.txt
        else
          python -m pip wheel "${INSTALL_TARGET}" -w wheelhouse
        fi

    - name: "Compress the wheelhouse"
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: wheelhouse
        dest: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}.zip

    - name: "Upload the compressed wheelhouse"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}
        path: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}.zip
        retention-days: 7

    - name: Generate build provenance attestation
      if: inputs.attest-provenance == 'true'
      uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
      with:
        subject-path: ${{ inputs.library-name }}-v${{ steps.library-version.outputs.library_version }}-${{ steps.specific-target-requested.outputs.wheelhouse_target }}-${{ inputs.operating-system }}-${{ inputs.python-version }}.zip

    - name: Check library's dependencies license
      uses: ansys/actions/check-licenses@main
      if: ${{ inputs.check-licenses == 'true' }}
      with:
        python-version: ${{ inputs.python-version }}
        skip-install: true
        checkout: false
        whitelist-license-check: ${{ inputs.whitelist-license-check }}
