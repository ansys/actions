# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: >
  Upload vulnerability reports to PyAnsys Dashboard database.

description: >
  This action is only intended to be used by repositories that are part of the
  PyAnsys Dashboard project. It uploads the vulnerability reports generated by
  the `safety <https://pyup.io/safety/>`_  and `bandit <https://bandit.readthedocs.io/en/latest/>`_
  tools to the PyAnsys Dashboard database.

inputs:

  # Required inputs
  pyansys-dashboard-token:
    description: >
      Token used to clone the PyAnsys Dashboard repository and upload the
      vulnerability reports.
    required: true
    type: string

  pyansys-dashboard-credentials:
    description: >
      Credentials to access the PyAnsys Dashboard database. They
      are available as a secret inside the ``ansys`` and ``ansys-internal``
      organizations.
    required: true
    type: string

  dry-run:
    description: >
      Whether to run or not this action in dry run mode or not.
      Dry run does not upload the vulnerability reports to the database.
    required: true
    type: boolean

  repository:
    description: >
      Full name of the repository for which the vulnerability reports are generated.
    required: true
    type: string

  safety-report:
    description: >
      Path to the safety report file.
    required: true
    type: string

  bandit-report:
    description: >
      Path to the bandit report file.
    required: true
    type: string

  hide-log:
    description: >
      Whether to hide the output log of the GitHub action or not.
      If set to true, the output log will be redirected to /dev/null.
      If set to false, the output log will be displayed. This would
      disclose any potential vulnerabilities to anyone.
    required: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Check whether the repository owner is 'ansys' or 'ansys-internal'"
      shell: bash
      run: |
        if [[ ${{ github.repository_owner }} != "ansys" && ${{ github.repository_owner }} != "ansys-internal" ]]; then
          echo "This action is only intended to be used by repositories that are part of the PyAnsys Dashboard project."
          echo "Detected repository owner: '${{ github.repository_owner }}'"
          echo "Expected repository owner: 'ansys' or 'ansys-internal'"
          exit 1
        fi

    - name: "Verify that the report files exist"
      shell: bash
      run: |
        if [[ ! -f ${{ inputs.safety-report }} ]]; then
          echo "The safety report file does not exist."
          exit 1
        else
          echo "Safety report file exists at location: ${{ inputs.safety-report }}."
        fi
        if [[ ! -f ${{ inputs.bandit-report }} ]]; then
          echo "The bandit report file does not exist."
          exit 1
        else
          echo "Bandit report file exists at location: ${{ inputs.bandit-report }}."
        fi

    - name: "Verify that the PyAnsys Dashboard token and database credentials are available"
      shell: bash
      run: |
        if [[ -z ${{ inputs.pyansys-dashboard-token }} ]]; then
          echo "The PyAnsys Dashboard token is not available."
          exit 1
        fi
        if [[ -z ${{ inputs.pyansys-dashboard-credentials }} ]]; then
          echo "The PyAnsys Dashboard credentials are not available."
          exit 1
        fi

    - name: "Install drivers"
      shell: bash
      run: |
        # Install the Microsoft ODBC Driver for SQL Server on Linux
        #
        # Script from https://learn.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15&tabs=ubuntu18-install%2Calpine17-install%2Cdebian8-install%2Credhat7-13-install%2Crhel7-offline#18
        #
        if ! [[ "18.04 20.04 22.04 23.04" == *"$(lsb_release -rs)"* ]];
        then
            echo "Ubuntu $(lsb_release -rs) is not currently supported.";
            exit;
        fi

        curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc

        curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list

        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
        # optional: for bcp and sqlcmd
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
        echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
        source ~/.bashrc
        # optional: for unixODBC development headers
        sudo apt-get install -y unixodbc-dev

    - name: "Clone the PyAnsys Dashboard repository"
      uses: actions/checkout@v4
      with:
        repository: "ansys-internal/pyansys-dashboard"
        token: ${{ inputs.pyansys-dashboard-token }}
        path: dashboard
        sparse-checkout: queries

    - name: "Install the required Python packages"
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m venv .venv-dashboard
        source .venv-dashboard/bin/activate
        python -m pip install -r dashboard/queries/requirements.txt

    - name: "Check if dry run flag should be enabled"
      shell: bash
      run: |
        if [[ ${{ inputs.dry-run }} == "true" ]]; then
          echo "DRY_RUN= --dry-run" >> $GITHUB_ENV
        fi

    - name: "Check if logs should be hidden (i.e. > /dev/null 2>&1)"
      shell: bash
      run: |
        if [[ ${{ inputs.hide-log }} == "true" ]]; then
          echo "HIDE_LOG= > /dev/null 2>&1" >> $GITHUB_ENV
        fi

    - name: "Upload the vulnerability reports"
      shell: bash
      env:
        AZ_GH_SQL_PASS: ${{ inputs.pyansys-dashboard-credentials }}
      run: |
        source .venv-dashboard/bin/activate
        python dashboard/queries/update_advisories.py \
          --repository ${{ inputs.repository }} \
          --safety-report ${{ inputs.safety-report }} \
          --bandit-report ${{ inputs.bandit-report }} \
          ${{ env.DRY_RUN }} ${{ env.HIDE_LOG }}
