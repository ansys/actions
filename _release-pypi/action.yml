# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Release PyPI action

description: |
  Release library artifacts to the desired PyPI index. If a private index is
  used, a ``token`` is required to publish the artifacts. Artifacts are
  downloaded from the CI/CD pipeline and are assumed to be named
  ``<library-name>-artifacts``. This file is expected to contain a wheel and a
  source distribution file for the desired library.

inputs:

  # Required inputs

  library-name:
    description: |
      Name of the Python library to be published.
    required: true
    type: string

  index-name:
    description: |
      The name of the index endpoint used for uploading the artifacts.
    required: true
    type: string

  twine-username:
    description: |
      User name used when uploading the artifacts to the desired PyPI index.
    required: true
    type: string

  twine-token:
    description: |
      Password used when uploading the artifacts to the desired PyPI index.
    required: true
    type: string

  python-version:
    description: |
      Python version for installing and using `twine
      <https://twine.readthedocs.io/en/stable/>`_.
    required: true
    type: string

  dry-run:
    description: |
      Whether to run or not this action in testing mode. Testing mode executes
      all the action steps except the releasing artifacts one. This allows
      developers to verify the health of the action once integrated in their
      CI/CD pipelines without actually publishing artifacts.
    required: true
    type: boolean

  skip-existing:
    description: |
      Continue uploading files if one already exists. Only valid when uploading
      to PyPI. Other implementations may not support this.
    required: true
    type: boolean

  use-trusted-publisher:
    description: |
      Whether to use the OIDC token for releasing.
      This is useful when you want to publish to PyPI through a CI/CD pipeline
      as a Trusted Publisher. It is necessary that your repository has been authorized
      to use Trusted Publisher's. For more information, see
      `Using a Trusted Publisher <https://docs.pypi.org/trusted-publishers/>`_.

      .. note::

          ``permissions: id-token: write`` is mandatory for trusted publishing.

    required: true
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    default: true
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    - uses: ansys/actions/_logging@main
      if: inputs.use-trusted-publisher == 'true'
      with:
        level: "ERROR"
        message: >
          As the Python ecosystem is moving to project metadata version 2.4,
          we need to use a more recent version of pypa/gh-action-pypi-publish.
          However, this action is not compatible with composite actions.
          Therefore, the `ansys/release-pypi-*` actions can no longer be
          used with trusted publishers. To keep using trusted publisher, and
          we encourage that, we invite all users to define their release job
          manually. As an example, see
          https://actions.docs.ansys.com/version/stable/release-actions/index.html#release-pypi-template

    - name: "Notify to use trusted publisher"
      shell: ${{ runner.os == 'Windows' && 'powershell' || 'bash' }}
      if: inputs.use-trusted-publisher == 'false'
      run: |
        echo "::notice::We recommend using trusted publishers to securely publish packages on PyPI. You should consider moving to this approach."

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: false
        provision-uv: ${{ inputs.use-uv }}
        prune-uv-cache: true

    - name: "Install twine"
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --system' || 'python -m pip install' }}
      run: |
        ${INSTALL_COMMAND} --upgrade pip twine

    - name: "Download the library artifacts from build-library step"
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: ${{ inputs.library-name }}-artifacts
        path: ${{ inputs.library-name }}-artifacts

    - name: "Display the structure of downloaded files"
      shell: bash
      run: ls -R

    - name: "Evaluate if skip-existing is required"
      shell: bash
      id: skip-existing
      env:
        SKIP_EXISTING: ${{ inputs.skip-existing }}
      run: |
        if [[ "${SKIP_EXISTING}" == 'true' ]]; then
          echo "SKIP_EXISTING=$(echo '--skip-existing')" >> ${GITHUB_OUTPUT}
        else
          echo "SKIP_EXISTING=$(echo '')" >> ${GITHUB_OUTPUT}
        fi

    - name: "Upload artifacts to PyPi"
      shell: bash
      if: inputs.dry-run == 'false' && inputs.use-trusted-publisher == 'false'
      run: |
        python -m twine upload --verbose $SKIP_EXISTING ${LIBRARY_NAME}-artifacts/*.whl
        python -m twine upload --verbose $SKIP_EXISTING ${LIBRARY_NAME}-artifacts/*.tar.gz
      env:
        TWINE_USERNAME: ${{ inputs.twine-username }}
        TWINE_PASSWORD: ${{ inputs.twine-token }}
        TWINE_REPOSITORY_URL: ${{ inputs.index-name }}
        LIBRARY_NAME: ${{ inputs.library-name }}

