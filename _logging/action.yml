# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Utils logging action

description: |
  This action is used to generate logging messages during the execution of other
  actions. It supports three logging levels including ``ERROR``, ``WARNING``,
  and ``INFO``. ANSI colors are used to report the different levels. This allows
  to quickly identify those in the GitHub actions logs.

inputs:

  # Required inputs

  level:
    description: |
      Logging level of the message. Supported levels are ``ERROR``, ``WARNING``
      and ``INFO``.
    required: true
    type: string

  message:
    description: |
      The message to save in the logging report.
    required: true
    type: string

runs:
  using: "composite"
  steps:

    # --------------------------- Warning / Error ----------------------------

    - name: "Report error message"
      if: ${{ runner.os == 'Windows' && inputs.level == 'ERROR'}}
      env:
        MESSAGE: ${{ inputs.message }}
      shell: powershell
      run: |
        echo "::error::$env:MESSAGE"
        exit 1

    - name: "Report error message"
      if: ${{ runner.os == 'Linux' && inputs.level == 'ERROR'}}
      env:
        MESSAGE: ${{ inputs.message }}
      shell: bash
      run: |
        echo "::error::$MESSAGE"
        exit 1

    - name: "Report warning message"
      if: ${{ runner.os == 'Windows' && inputs.level == 'WARNING'}}
      env:
        MESSAGE: ${{ inputs.message }}
      shell: powershell
      run: |
        echo "::warning::$env:MESSAGE"

    - name: "Report warning message"
      if: ${{ runner.os == 'Linux' && inputs.level == 'WARNING'}}
      env:
        MESSAGE: ${{ inputs.message }}
      shell: bash
      run: |
        echo "::warning::$MESSAGE"

    # -------------------------------- Info ----------------------------------

    - name: "Report info message"
      if: ${{ inputs.level == 'INFO' && runner.os == 'Linux' }}
      env:
        MESSAGE: ${{ inputs.message }}
      shell: bash
      run: |
        echo -e "\033[1;92m[INFO]: ${MESSAGE}\033[0m"

    - name: "Report info message"
      if: ${{ inputs.level == 'INFO' && runner.os == 'Windows' }}
      env:
        MESSAGE: ${{ inputs.message }}
      shell: powershell
      run: |
        Write-Host "$([char]27)[92m[INFO]: $env:MESSAGE$([char]27)[0m"
