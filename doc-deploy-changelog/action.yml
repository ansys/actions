# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Build CHANGELOG from towncrier fragment files

description: |
  Builds the CHANGELOG using ``towncrier`` fragment files for the tagged version.
  Creates a pull request into main with the CHANGELOG updates and deleted
  towncrier fragment files.

  This action will only work on Linux/macOS runners.

  Pushing a release tag results in this action running twice:

  - Once to run ``towncrier`` and consolidate the changelog fragment files
    into a single update of the CHANGELOG file.
  - Once to release the package after the CHANGELOG file has been updated.

  There are two options when making a release for your repository:

  1. You pushed a tag from a release branch (``release-from-main`` is ``false``)

  This is the most common case for PyAnsys repositories. The following steps are
  performed when ``release-from-main`` is ``false``:

  a) Find a release branch that has the same major and minor version of the
  tag that was pushed. For example, if your tag was "v0.1.2", it looks for
  a release branch named "release/0.1". If the release branch cannot be found, a
  temporary branch is used named "docs/changelog-update-vTAG_VERSION".

  b) Checkout the release or temporary branch, update the CHANGELOG file
  using ``towncrier``, and push the updates to the respective branch.

  c) Checkout the main branch and create a pull request branch named
  "docs/vTAG_VERSION-changelog". Delete the pull request branch from the remote
  if it exists, checkout the pull request branch, cherry pick the commit
  containing the CHANGELOG file changes from the previous step, push the
  pull request branch, and create a pull request from the branch into main.

  d) Checkout the release or temporary branch, delete the tag locally and
  on the remote, create the new tag locally, and push the tag on the remote.
  Delete the temporary branch if one was used to update the CHANGELOG file.

  e) Exit on error if the CHANGELOG is updated, so that the package is not released from
  this instance of the workflow.

  2. You pushed a tag from the main branch (``release-from-main`` is ``true``)

  The following steps are performed when ``release-from-main`` is ``true``:

  a) Checkout the main branch, update the CHANGELOG file using ``towncrier``,
  and push the updates to the main branch.

  b) Checkout the main branch, delete the tag locally and on the remote,
  create the new tag locally, and push the new tag on the remote.

  c) Exit on error if the CHANGELOG is updated, so that the package is not released from
  this instance of the workflow.


inputs:
  # Required inputs

  token:
    description: |
      Use the PYANSYS_CI_BOT_TOKEN to do a git commit & push.
      The "contents: write" and "pull-requests: write" permissions
      are required for this action.
    required: true
    type: string

  bot-user:
    description: |
      Use the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.
    required: true
    type: string

  bot-email:
    description: |
      Use the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.
    required: true
    type: string

  # Optional inputs

  python-version:
    description: |
      Python version used for setting up Python.
    default: '3.11'
    required: false
    type: string

  towncrier-version:
    description: |
      Towncrier version used for updating the CHANGELOG file.
    default: '24.8.0'
    required: false
    type: string

  toml-version: # TODO: Remove deprecated input in v11
    description: |
      Toml version used for retrieving the towncrier directory.
    default: ''
    required: false
    type: string

  tomli-version:
    description: |
      Tomli version used for retrieving the towncrier directory.
    default: '2.2.1'
    required: false
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  release-from-main:
    description: |
      If ``false``, you pushed a tag from a release branch. This is applicable for most
      PyAnsys repositories.
      If ``true``, you pushed a tag from the main branch.

      See the description for more information about each of the options.
    required: false
    default: false
    type: boolean

  use-upper-case:
    description: |
      Use of uppercase letters in the "type" field of:

      - The PR created into main to add CHANGELOG changes.

      - The commit created in the release branch to add the new
        section in CHANGELOG.

      If ``false``, the title is "chore: ... CHANGELOG for v...".
      If ``true``, the title is "CHORE: ... CHANGELOG for v...".
    required: false
    default: false
    type: boolean

  format-date:
    description: |
      Format the date in the title of the new section being added to
      the CHANGELOG file.

      If ``false``, the date is formated YYYY-MM-DD. For example, 2024-12-31:

        `{tag} <https://github.com/ansys/{repo-name}/releases/tag/v{tag}>`_ - 2024-12-31

      If ``true``, the date is "Month Day, Year". For example, "December 31, 2024":

        `{tag} <https://github.com/ansys/{repo-name}/releases/tag/v{tag}>`_ - December 31, 2024
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        token: ${{ inputs.token }}
        fetch-depth: 0 # zizmor: ignore[artipacked] , credentials must be persisted in this case

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: false
        prune-uv-cache: ${{ inputs.use-python-cache != 'true' }}

    - name: Save tag version
      id: save-tag-version
      shell: bash
      run: |
        # /refs/tags/v0.1.0 -> 0.1.0
        echo "TAG_VERSION=${GITHUB_REF##*/v}" >> ${GITHUB_OUTPUT}

    - name: "Install towncrier, toml, and the project"
      env:
        TOWNCRIER_VERSION: ${{ inputs.towncrier-version }}
        TOMLI_VERSION: ${{ inputs.tomli-version }}
      shell: bash
      run: |
        python -m pip install --upgrade pip towncrier=="${TOWNCRIER_VERSION}" tomli=="${TOMLI_VERSION}"

    - name: "Get towncrier directory and project name"
      shell: python
      run: |
        import pathlib
        import os
        import tomli

        # Identify towncrier configuration file
        pyproject_file = pathlib.Path("pyproject.toml")
        towncrier_file = pathlib.Path("towncrier.toml")
        if not pyproject_file.exists() and not towncrier_file.exists():
            print("No pyproject.toml or towncrier.toml file found.")
            exit(1)

        towncrier_config = pyproject_file if pyproject_file.exists() else towncrier_file

        # Load pyproject.toml
        with open(towncrier_config, 'rb') as f:
            config = tomli.load(f)
            directory = config["tool"]["towncrier"]["directory"]
            project_name = config["tool"]["towncrier"].get("package")

        # If the project name is not specified, use the project name from the pyproject.toml
        # Last resource - just call it DNE. In any case, based on our template, this value is not used
        if project_name is None:
            project_name = config.get("project", {"name": "DNE"}).get("name", "DNE")  # Bullet-proof package name retrieval

        # Get the GITHUB_ENV variable
        github_env = os.getenv('GITHUB_ENV')

        # Append the TOWNCRIER_DIR and TOWNCRIER_NAME with its value to GITHUB_ENV
        with open(github_env, "a") as f:
            f.write(f"TOWNCRIER_DIR={directory}\n")
            f.write(f"TOWNCRIER_NAME={project_name}")

    - name: "Get main branch name"
      id: main-branch-name
      shell: bash
      run: |
        head_branch=$(git remote show origin | grep "HEAD branch:")
        formatted_head_branch=${head_branch#*: }

        echo "MAIN_BRANCH=$formatted_head_branch" >> ${GITHUB_OUTPUT}

    - name: "Set the branch to update the CHANGELOG file on"
      shell: bash
      id: set-branch-changelog
      env:
        MAIN_BRANCH: ${{ steps.main-branch-name.outputs.MAIN_BRANCH }}
        TAG_VERSION: ${{ steps.save-tag-version.outputs.TAG_VERSION }}
        RELEASE_FROM_MAIN: ${{ inputs.release-from-main }}
      run: |
        if [[ "${RELEASE_FROM_MAIN}" == "true" ]]; then
          echo "UPDATE_BRANCH=${MAIN_BRANCH}" >> ${GITHUB_OUTPUT}
          echo "RELEASE_BRANCH_EXISTS=true" >> ${GITHUB_OUTPUT}
        else
          # Assume release branch is "release/major.minor"
          # v0.1.0 (tag) -> release/0.1
          tag_version=${TAG_VERSION}
          release_branch="release/${tag_version%.*}"

          # Check release_branch exists on remote
          release_branch_exists=$(git ls-remote --branches origin refs/heads/$release_branch 2>&1)

          # If the release branch doesn't exist, then use the temporary branch
          if [ -z "$release_branch_exists" ]; then
            # docs/changelog-update-v0.1.0
            echo "UPDATE_BRANCH=docs/changelog-update-v${TAG_VERSION}" >> ${GITHUB_OUTPUT}
            echo "RELEASE_BRANCH_EXISTS=false" >> ${GITHUB_OUTPUT}
          else
            echo "UPDATE_BRANCH=${release_branch}" >> ${GITHUB_OUTPUT}
            echo "RELEASE_BRANCH_EXISTS=true" >> ${GITHUB_OUTPUT}
          fi
        fi

    - name: "Get current date"
      shell: python
      env:
        FORMAT_DATE: ${{ inputs.format-date }}
      run: |
        import os
        import datetime
        import sys

        github_action_path = os.getenv("GITHUB_ACTION_PATH")
        sys.path.insert(1, f'{github_action_path}/../python-utils/')

        from parse_pr_title import save_env_variable

        # Whether or not to format the date in the CHANGELOG file - "true" or "false"
        format_date = os.environ.get("FORMAT_DATE")

        # Format the string depending on format_date being "true" or "false"
        fmt_string = "%B %d, %Y" if format_date == "true" else "%Y-%m-%d"
        current_date = datetime.date.today().strftime(fmt_string)

        save_env_variable("CURRENT_DATE", current_date)

    - name: "Create a new section in the CHANGELOG file and push the changes"
      id: new-section-changelog
      env:
        TAG_VERSION: ${{ steps.save-tag-version.outputs.TAG_VERSION }}
        UPDATE_BRANCH: ${{ steps.set-branch-changelog.outputs.UPDATE_BRANCH }}
        RELEASE_BRANCH_EXISTS: ${{ steps.set-branch-changelog.outputs.RELEASE_BRANCH_EXISTS }}
        BOT_USER: ${{ inputs.bot-user }}
        BOT_EMAIL: ${{ inputs.bot-email }}
        USE_UPPER_CASE: ${{ inputs.use-upper-case }}
      shell: bash
      run: | # zizmor: ignore[template-injection]
        # Get number of .md files in ${{ env.TOWNCRIER_DIR }}
        count=$(find "${TOWNCRIER_DIR}" -type f -name "*.md" | wc -l)

        if [ $count -gt 0 ]; then
          echo "Using ${UPDATE_BRANCH} to update the CHANGELOG file"
          if [[ ${RELEASE_BRANCH_EXISTS} == "false" ]]; then
            git checkout -b "${UPDATE_BRANCH}"
          else
            git checkout "${UPDATE_BRANCH}"
            git pull
          fi

          # Run towncrier with the tag specified
          # Update changelog with the tag version
          buildcmd=$(towncrier build --yes --name ${TOWNCRIER_NAME} --version ${TAG_VERSION} --date "${CURRENT_DATE}" >> builderr.txt 2>&1 || true)
          section_exists_err=$(grep "already produced newsfiles for this version" builderr.txt || true)

          # Remove builderr.txt
          rm builderr.txt

          if [ -n "$section_exists_err" ]; then
            # Print error message on how to fix this
            message="Your changelog file already contains section ${TAG_VERSION} in the \
            ${UPDATE_BRANCH} branch. Please checkout ${UPDATE_BRANCH}, revert \
            the commit named 'chore: updating CHANGELOG for v${TAG_VERSION}', and \
            re-run the workflow."

            echo -e "\033[1;91m[ERROR]: $message\033[0m"
            exit 1
          fi

          # Configure git username & email
          git config user.name "${BOT_USER}"
          git config user.email "${BOT_EMAIL}"

          # Add CHANGELOG.md file and deleted ${{ env.TOWNCRIER_DIR }}/*.md files
          git add .

          # Commit changes and save commit SHA
          if [[ "${USE_UPPER_CASE}" == "false" ]]; then
            git commit -m "chore: updating CHANGELOG for v${TAG_VERSION}"
          else
            git commit -m "CHORE: updating CHANGELOG for v${TAG_VERSION}"
          fi
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> ${GITHUB_OUTPUT}

          # Push CHANGELOG.md changes
          if [[ "${RELEASE_BRANCH_EXISTS}" == "true" ]]; then
            git push
          else
            git push -u origin "${UPDATE_BRANCH}"
          fi

          echo "UPDATED_CHANGELOG=true" >> ${GITHUB_OUTPUT}
        else
          echo "There are no changelog fragment files to update the CHANGELOG for v${TAG_VERSION}"
          echo "UPDATED_CHANGELOG=false" >> ${GITHUB_OUTPUT}
        fi

    - name: "Create PR into main with the CHANGELOG file changes"
      if: ${{ (inputs.release-from-main == 'false' ) && (steps.new-section-changelog.outputs.UPDATED_CHANGELOG == 'true') }}
      env:
        GH_TOKEN: ${{ inputs.token }}
        GITHUB_ACTOR: ${{ github.actor }}
        TAG_VERSION: ${{ steps.save-tag-version.outputs.TAG_VERSION }}
        MAIN_BRANCH: ${{ steps.main-branch-name.outputs.MAIN_BRANCH }}
        COMMIT_SHA: ${{ steps.new-section-changelog.outputs.COMMIT_SHA }}
        USE_UPPER_CASE: ${{ inputs.use-upper-case }}
      shell: bash
      run: |
        # Checkout main & create a branch
        git checkout ${MAIN_BRANCH}
        git pull

        # Set branch for PR
        pr_branch=docs/v${TAG_VERSION}-changelog

        # Check if pr_branch exists on remote
        remote_branch_exists=$(git ls-remote --branches origin refs/heads/$pr_branch 2>&1)

        # Delete the remote branch if it exists
        if [ -n "$remote_branch_exists" ]; then
          echo "Deleting $pr_branch from remote"
          git push origin --delete $pr_branch
        fi

        # Create a new $pr_branch
        git checkout -b $pr_branch

        cherrypick=$(git cherry-pick "${COMMIT_SHA}" >> cherrypickerr.txt 2>&1 || true)
        cat cherrypickerr.txt
        conflict=$(grep "CONFLICT" cherrypickerr.txt || true)

        # Remove cherrypickerr.txt
        rm cherrypickerr.txt

        if [ -n "$conflict" ]; then
          # Show which files are "theirs" from the cherry-pick
          git status

          # Apply all of the changes from the cherry-pick
          git checkout --theirs .
          git add .

          # Continue the cherry-pick without a commit message
          git -c core.editor=true cherry-pick --continue
        fi

        # Push CHANGELOG.md changes to $pr_branch
        git push -u origin $pr_branch

        if [[ "${USE_UPPER_CASE}" == "false" ]] ; then
          pr_title="chore: update CHANGELOG for v${TAG_VERSION}"
        else
          pr_title="CHORE: update CHANGELOG for v${TAG_VERSION}"
        fi

        body_msg="Update CHANGELOG for v${TAG_VERSION} and remove .md files in ${TOWNCRIER_DIR}.

        > [!CAUTION]
        > Do not merge this pull request until the release has been successfully made."

        gh pr create --title "$pr_title" --body "${body_msg}" --reviewer "${GITHUB_ACTOR}"

    - name: "Delete & Re-create tag"
      env:
        GH_TOKEN: ${{ inputs.token }}
        TAG_VERSION: ${{ steps.save-tag-version.outputs.TAG_VERSION }}
        UPDATE_BRANCH: ${{ steps.set-branch-changelog.outputs.UPDATE_BRANCH }}
        RELEASE_BRANCH_EXISTS: ${{ steps.set-branch-changelog.outputs.RELEASE_BRANCH_EXISTS }}
      if: contains(steps.new-section-changelog.outputs.UPDATED_CHANGELOG, 'true')
      shell: bash
      run: |
          # Checkout branch created from tag with CHANGELOG update & pull
          git checkout "${UPDATE_BRANCH}"
          git pull

          # Delete the tag locally
          git tag -d v${TAG_VERSION}

          # Delete the tag on remote
          git push origin --delete v${TAG_VERSION}

          # Create the tag locally
          git tag v${TAG_VERSION}

          # Create the tag on remote
          git push origin v${TAG_VERSION}

          if [[ "${RELEASE_BRANCH_EXISTS}" == "false" ]]; then
            # Delete branch created from deleted tag with CHANGELOG update
            git push origin --delete "${UPDATE_BRANCH}"
          fi

          # Exit on error if the CHANGELOG is updated to prevent the release action from running
          exit 1
