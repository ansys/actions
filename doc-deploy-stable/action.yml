name: "Documentation deploy stable version."
description: "Deploy stable documentation to GitHub pages."

inputs:
  cname:
    description: 'The canonical name of the documentation website.'
    required: true
    type: string
  version-config:
    description: 'Name of the JSON file specifying version configuration.'
    default: 'versions.json'
    required: false
    type: string
  token:
    description: "Required token for documentation deployment."
    required: true
    type: string
  python-version:
    description: 'Desired Python version.'
    default: '3.10'
    required: false
    type: string
  render-last:
    description: 'Number of last versions to be rendered in multi-doc.'
    default: '3'
    required: false
    type: string

runs:
  using: "composite"
  steps:

    - name: "Checkout project in the GitHub Pages branch"
      uses: actions/checkout@v3
      with:
        ref: 'gh-pages'

    - name: "List gh-pages content"
      shell: bash
      run: ls -R

    - name: "Check adequate version tagging"
      shell: bash
      run: |
        # Remove the 'v' or the 'release/' at the beginning of the tag
        ref_name="${{ github.ref_name }}"
        version=${ref_name##*v}
        version=${version##*release/}
        # Check that the version is of the accepted format
        echo "ACCEPTED_FORMAT=$([[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "true" || echo "false")" >> $GITHUB_ENV
        echo "PRELIMINARY_VERSION=$version" >> $GITHUB_ENV

    - name: "Ignoring deployment... invalid version format!"
      if: env.ACCEPTED_FORMAT == 'false'
      shell: bash
      run: |
        echo "INVALID VERSION FORMAT - $PRELIMINARY_VERSION"
        echo "Should be of type X.Y.Z... Ignoring documentation deployment"

    - name: "Prepare destination folder"
      if: env.ACCEPTED_FORMAT == 'true'
      shell: bash
      run: |
        # Filter out the major and minor version numbers
        major=$(echo $PRELIMINARY_VERSION | cut -d. -f1)
        minor=$(echo $PRELIMINARY_VERSION | cut -d. -f2)
        folder=release/$major.$minor
        echo "Folder was found to be $folder"
        # Create a new folder for the version (remove existing one if required)
        if [[ -d $folder ]]; then rm -rf $folder; fi 
        mkdir -p $folder
        # Output the version
        echo "VERSION=$major.$minor" >> $GITHUB_ENV

    - name: "Download the HTML documentation artifact in release/${{ github.ref_name }}"
      if: env.ACCEPTED_FORMAT == 'true'
      uses: actions/download-artifact@v3
      with:
        name: documentation-html
        path: release/${{ env.VERSION }}
  
    - name: "Set up Python ${{ inputs.python-version }}"
      if: env.ACCEPTED_FORMAT == 'true'
      uses: pyansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: false

    - name: "Install system dependencies for updating version table"
      if: env.ACCEPTED_FORMAT == 'true'
      shell: bash
      run: |
        sudo apt-get install curl
        python -m pip install -U pip

    - name: "Get the version_mapper.py utility"
      if: env.ACCEPTED_FORMAT == 'true'
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/pyansys/actions/main/scripts/version_mapper.py -o version_mapper.py

    - name: "Update the version JSON file"
      if: env.ACCEPTED_FORMAT == 'true'
      shell: bash
      run: | 
        python version_mapper.py \
          --cname ${{ inputs.cname }} \
          --json_filename ${{ inputs.version-config }} \
          --new_version ${{ env.VERSION }} \
          --render_last ${{ inputs.render-last }}
        # Remove the script to avoid Git tracking it
        rm -rf version_mapper.py

    - name: "Commit new changes (if required)"
      if: env.ACCEPTED_FORMAT == 'true'
      shell: bash
      run: |
          if [[ ! -z $(git status -s) ]];
          then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add release/
            git commit -m "DOC: add documentation for ${{ github.ref_name }}"
            git push
          fi
