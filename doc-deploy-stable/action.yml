# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Doc deploy stable action

description: |
  This action deploys the desired HTML documentation artifact containing the
  stable version of a library to the specified branch of a repository. By
  default, the ``gh-pages`` branch of the current repository is assumed.

  .. note::

      If your project is using ``ansys/actions@v3`` or lower and you would
      like to update to this version of the actions, see the `Enable multi-version documentation <https://dev.docs.pyansys.com/how-to/documenting.html#enable-multi-version-documentation>`_ .

  .. note::

      Pre-releases are not supported prior to ``ansys/actions/v10.1``. `See the migration guide <https://actions.docs.ansys.com/version/stable/migrations/index.html>`_
      for information on supported pre-releases.

inputs:

  # Required inputs

  cname:
    description: |
      The canonical name (CNAME) containing the documentation.
    required: true
    type: string

  token:
    description: |
      Required password, key or token with the correct credentials for deploying the
      documentation. If deploying to the current repository, the ``secrets.GITHUB_TOKEN`` token is
      is enough. For workflows deploying to other repositories, `generate and
      use a token with writing access
      <https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token>`_
      to that repository.
    required: true
    type: string

  bot-user:
    description: |
      Use the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.
    required: true
    type: string

  bot-email:
    description: |
      Use the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.
    required: true
    type: string

  # Optional inputs

  doc-artifact-name:
    description: |
        Name of the HTML documentation artifact. This artifact is expected to
        contain all the HTML and static files. If it contains a compressed file,
        make sure you enable the ``decompress-artifact`` option.
    required: false
    default: 'documentation-html'
    type: string

  decompress-artifact:
    description: |
      Whether to decompress the ``doc-artifact-name`` file using `ouch
      <https://github.com/ouch-org/ouch>`_ as decompression tool. Default value
      is ``false``.
    required: false
    default: false
    type: string

  repository:
    description: |
      Repository name in the form of ``username/repository`` to be used for
      deploying the documentation. The current repository is assumed by default.
    required: false
    default: 'current'
    type: string

  branch:
    description: |
      Branch name for deploying the documentation. The ``gh-pages`` branch is
      used by default.
    required: false
    default: 'gh-pages'
    type: string

  commit-message:
    description: |
      Commit message used when deploying the documentation.
    required: false
    default: 'DOC: update development documentation'
    type: string

  render-last:
    description: |
      The number of stable versions to be shown in the `version drop-down
      <https://pydata-sphinx-theme.readthedocs.io/en/stable/user_guide/version-dropdown.html>`_.
    default: '3'
    required: false
    type: string

  force-orphan:
    description: |
      Whether to force the deployment branch to be orphan or not. Default value
      is ``true``.
    required: false
    default: true
    type: string

  content-element-id:
    description: |
      Identifier of the HTML tag that comprises all the content of the article
      or post.
    required: false
    default: 'main-content'
    type: string

  independent-patch-release-docs:
    description: |
      Whether to generate documentation for independent patch releases. Default
      value is ``false``. By default, patch releases will overwrite the
      documentation of the previous patch release. If this option is enabled,
      then the documentation of each patch release will be kept.
    required: false
    default: false
    type: boolean

  use-latest-index-in-landing-page:
    description: |
      Use the latest 'version/{stable|dev}/index.html' in the landing page. Default
      value is ``true``. By default, the index.html is overwritten by version/{stable|dev}/index.html.
    required: false
    default: true
    type: string

  python-version:
    description: |
      Python version used for various steps of the action
    required: false
    default: '3.13'
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache to install previously downloaded libraries.
      If ``true``, downloaded libraries are installed from cache. If ``false``,
      they are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Collect the version number from the tag or the branch name according
          to the reference type. Tags names are expected to follow
          'v<MAJOR>.<MINOR>' or 'v<MAJOR>.<MINOR>.<PATCH>'. Branches must follow
          'release/<MAJOR>.<MINOR>'.

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: ${{ inputs.use-uv }}
        prune-uv-cache: ${{ inputs.use-python-cache != 'true' }}

    - name: "Install packaging"
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --system' || 'python -m pip install' }}
      run: |
        ${INSTALL_COMMAND} --upgrade pip packaging

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Checkout the repository branch for deploying the documentation. If this
          step fails, then it means that the provided token is not valid.

    - name: "Get the name of the repository"
      shell: bash
      id: get-repository-name
      env:
        INPUT_REPOSITORY: ${{ inputs.repository }}
      run: |
        if [[ "$INPUT_REPOSITORY" == "current" ]]; then
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_OUTPUT
        else
          echo "REPOSITORY=${INPUT_REPOSITORY}" >> $GITHUB_OUTPUT
        fi

    - name: "Checkout ${{ steps.get-repository-name.outputs.REPOSITORY }} repository"
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        repository: ${{ steps.get-repository-name.outputs.REPOSITORY }}
        token: ${{ inputs.token }}

    - name: "Ensure that the desired branch exists"
      shell: bash
      env:
        BOT_USER: ${{ inputs.bot-user }}
        BOT_EMAIL: ${{ inputs.bot-email }}
        BRANCH: ${{ inputs.branch }}
      run: | # zizmor: ignore[template-injection] I can't think of any other way to expand input.branch within comments
        # Check the ${{ inputs.branch }} branch exists on remote
        branch_exists=$(git ls-remote --branches origin "refs/heads/${BRANCH}" 2>&1)

        # If the ${{ inputs.branch }} doesn't exist, then print error message and exit 1
        if [ -z "$branch_exists" ]; then
          echo "The $BRANCH branch does not exist. Creating $BRANCH."

          # Create orphan branch
          git checkout --orphan "$BRANCH"

          # Unstage files to be committed
          git rm --cached -r .

          # Remove untracked files
          git clean -fd

          # Configure git username & email
          git config user.name "$BOT_USER"
          git config user.email "$BOT_EMAIL"

          # Commit ${{ inputs.branch }} & push to origin
          git commit --allow-empty -m "Create $BRANCH branch"
          git push -u origin "$BRANCH"
        else
          # Fetch and switch to ${{ inputs.branch }}
          git fetch origin "${BRANCH}:${BRANCH}"
          git switch "$BRANCH"
        fi

    # ------------------------------------------------------------------------

    - name: "Determine the version number"
      shell: python
      id: version-number
      env:
        REF_NAME: ${{ github.ref_name }}
        INDEPENDENT_PATCH_RELEASE_DOCS: ${{ inputs.independent-patch-release-docs }}
        REF_TYPE: ${{ github.ref_type }}
      run: |
        import sys

        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')
        from versions import set_version_variable
        set_version_variable()

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Download the stable documentation artifact in a folder that has the same
          name as the version number. Decompress artifact if required. Finally,
          display the structure of the directory to verify that it has the right
          layout.

    - name: "Clean version content"
      shell: bash
      id: clean-version-content
      env:
        VERSION: ${{ steps.version-number.outputs.VERSION }}
      run: |
        if [ -d version/${VERSION} ]; then
          echo "VERSION_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
        fi
        rm -rf version/${VERSION} && mkdir -p version/${VERSION}

    - name: "Download the stable documentation artifact"
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: ${{ inputs.doc-artifact-name }}
        path: version/${{ steps.version-number.outputs.VERSION }}

    - name: "Update apt-get"
      shell: bash
      run: |
        sudo apt-get update

    - name: "Decompress artifact content"
      shell: bash
      if: inputs.decompress-artifact == 'true'
      env:
        VERSION: ${{ steps.version-number.outputs.VERSION }}
      run: |
        sudo apt-get install -y cargo && cargo install ouch
        export PATH="$HOME/.cargo/bin/:$PATH"
        ouch --version
        cd version/${VERSION} && compressed_artifact=$(ls .)
        ouch decompress $compressed_artifact
        decompressed_artifact=$(ls -I "*${compressed_artifact##*.}")
        mv $decompressed_artifact/* .
        rm -rf $compressed_artifact $decompressed_artifact

    - name: "Display structure of version/dev"
      shell: bash
      env:
        VERSION: ${{ steps.version-number.outputs.VERSION }}
      run: |
        ls -R version/${VERSION}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Collect all stable releases (X.Y). Crop until matching the desired
          number to be displayed in the switcher. Generate the 'versions.json'
          file including development and latest stable links.

    - name: "Install 'sponge' and 'jq' for manipulating JSON files"
      shell: bash
      run: |
        sudo apt-get install -y moreutils jq

    - name: "Write the versions.json file"
      id: versions-json-file
      shell: python
      env:
        CNAME: ${{ inputs.cname }}
        RENDER_LAST: ${{ inputs.render-last }}
      run: |
        import sys

        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')
        from versions import write_versions_file
        write_versions_file()

    - name: "Update the content for the 'version/stable' folder"
      shell: bash
      env:
        LATEST_STABLE_VERSION: ${{ steps.versions-json-file.outputs.LATEST_STABLE_VERSION }}
      run: |
        rm -rf version/stable && cp -r version/${LATEST_STABLE_VERSION} version/stable

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Generate the content for the announcement file. Place a copy of this
          file in each one of outdated stable versions.

    - name: "Generate the template content for the 'announcement.html' file"
      shell: bash
      run: |
        cat > announcement.html <<'EOF'
          <p>
            You are not viewing the most recent version of this documentation.
            The latest stable release is <a href="STABLE_URL">LATEST_STABLE_VERSION</a>
          </p>
        EOF

    - name: "Render the 'announcement.html' template with the desired stable version"
      env:
        LATEST_STABLE_VERSION: ${{ steps.versions-json-file.outputs.LATEST_STABLE_VERSION }}
        CNAME: ${{ inputs.cname }}
      shell: bash
      run: |
        latest_stable_version=${LATEST_STABLE_VERSION}
        stable_url="https://${CNAME}/version/stable/"
        sed -i "s|LATEST_STABLE_VERSION|$latest_stable_version|g" announcement.html
        sed -i "s|STABLE_URL|$stable_url|g" announcement.html

    - name: "Place the 'announcement.html' file in every public folder of all the outdated versions"
      shell: bash
      env:
        LATEST_STABLE_VERSION: ${{ steps.versions-json-file.outputs.LATEST_STABLE_VERSION }}
      run: |
        for version_dir in $( ls version | \
                          grep -E "^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\..*)?$" | \
                          grep -v "${LATEST_STABLE_VERSION}" | \
                          sort -r --version-sort ); do
            find version/$version_dir -type d -not \( -path "*/_*" -type d -prune \) -exec cp announcement.html {} \;
        done

    - name: "Delete the 'announcement.html' file used as template"
      shell: bash
      run: |
        rm -rf announcement.html

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Include a link canonical tag in old versions if not present.

    - name: "Include link canonical tag in pages"
      uses: ansys/actions/_doc-gen-canonical@main
      with:
        cname: ${{ inputs.cname }}
        version-directory: version

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: ${{ inputs.use-latest-index-in-landing-page == 'true' }}
      with:
        level: "INFO"
        message: >
          Copy the index.html from the stable version and update all
          local href and source links to point to either the stable or dev version.

    - name: "Use the latest 'version/{stable|dev}/index.html' in the landing page"
      if: ${{ inputs.use-latest-index-in-landing-page == 'true' }}
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          cp version/stable/index.html index.html
          sed -i 's/href="\([^:"]*\)"/href="version\/stable\/\1"/g' index.html
          sed -i 's/src="\([^:"]*\)"/src="version\/stable\/\1"/g' index.html
          sed -i 's/action="search.html"/action="version\/stable\/search.html"/g' index.html
          sed -i 's|const SEARCH_FILE = ".*_static/search.json";|const SEARCH_FILE = "version/stable/_static/search.json";|g' index.html
          sed -i '/const ADVANCE_SEARCH_PATH = "search.html";/s|search.html|version/stable/search.html|' index.html
          sed -i 's|<html lang="en" data-content_root="./" >|<html lang="en" data-content_root="./version/stable/" >|g' index.html
        else
          echo "Error: The 'index.html' file does not exist." >&2
          exit 1
        fi

    - name: "Show the contents of the 'index.html' redirection file"
      shell: bash
      run: |
        if [[ -f 'index.html' ]]; then
          cat index.html
        else
          echo "Error: The 'index.html' file does not exist." >&2
          exit 1
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Copy the 'version/stable/index.html' to 'version/index.html' file. If
          no stable release is available, copy the 'dev/index.html' instead.
          Update all references to point to 'stable/_static' or 'dev/_static'.

    - uses: ansys/actions/_doc-gen-versions-page@main
      with:
        cname: ${{ inputs.cname }}
        content-element-id: ${{ inputs.content-element-id }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Create the '.nojekyll' and 'CNAME' file with the desired values.

    - name: "Create '.nojekyll' and 'CNAME' files"
      shell: bash
      env:
        CNAME: ${{ inputs.cname }}
      run: |
          touch .nojekyll CNAME
          echo "$CNAME" > CNAME

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Generate the site-map for the latest development or stable
          documentation.

    - name: "Generate 'sitemap.xml' file"
      uses: ansys/actions/_doc-gen-sitemap@main
      with:
        cname: ${{ inputs.cname }}
        html-directory: version/stable

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Generate the "robots.txt" file for guiding web crawlers (spiders)

    - name: "Generate 'robots.txt' file"
      uses: ansys/actions/_doc-gen-robots@main
      with:
        cname: ${{ inputs.cname }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          For deploying the documentation, a GitHub token or a deployment token
          is required. The GitHub token is used when deploying to the current
          repository while the deployment token is used to deploy to an external
          repository.

    - name: "Deploy to ${{ inputs.branch }} branch of ${{ github.repository }} repository"
      if: inputs.repository == 'current'
      uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
      with:
        publish_dir: .
        publish_branch: ${{ inputs.branch }}
        github_token: ${{ inputs.token }}
        commit_message: ${{ inputs.commit-message }}
        keep_files: true
        force_orphan: ${{ inputs.force-orphan }}

    - name: "Deploy to ${{ inputs.branch }} branch of ${{ inputs.repository }}"
      if: inputs.repository != 'current'
      uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
      with:
        publish_dir: .
        publish_branch: ${{ inputs.branch }}
        personal_token: ${{ inputs.token }}
        external_repository: ${{ inputs.repository }}
        commit_message: ${{ inputs.commit-message }}
        keep_files: true
        force_orphan: ${{ inputs.force-orphan }}
