name: >
  Code style

description: >
  This action evaluates the code quality of your project by using `pre-commit
  <https://github.com/pre-commit/pre-commit/>`_. The action installs and runs
  ``pre-commit``. It is assumed that your project contains a
  ``.pre-commit-config.yaml`` file in the root directory.

inputs:

  # Optional inputs

  python-version:
    description: >
      Python version used for installing and running ``pre-commit``.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  docker-lint:
    description: >
      Extend the workflow to lint Dockerfile(s).
    required: false
    default: false
    type: bool

  docker-recursive:
    description: >
      Search for Dockerfile(s) recursively. Only applies to allowed directories, i.e. docker and .devcontainer.
    required: false
    default: false
    type: bool

  docker-error-level:
    description: >
      Fail docker-style action based on hadolint output (-1: never, 0: error, 1: warning, 2: info)
    required: false
    default: 2
    type: int

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Install pre-commit"
      shell: bash
      run: |
        python -m pip install --upgrade pip pre-commit
        pre-commit install

    - name: "Run pre-commit"
      shell: bash
      run: pre-commit run --all-files --show-diff-on-failure

    # ------------------------------------------------------------------------

    # The following steps are applying docker-style action to allowed working dirs if they exist.
    # Changes performed should coherent with the 'allowed_working_dirs' in the docker-style action.
    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Extend the workflow to lint Dockerfile(s) if option docker-lint is
          set to true, exit otherwise.

    - name: "Exit if docker-lint is false"
      shell: bash
      run: |
        if [[ "${{ inputs.docker-lint }}" == "false" ]]; then
          exit 0
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check that directory 'docker' exists at the root of the repository.
          If it does not, then it means that the rest of the action should not
          be performed.

    - name: "Check if docker directory exists"
      shell: bash
      run: |
        if [ -d "${{ github.workspace }}/docker" ]; then
          echo "HAS_DOCKER_DIR=true" >> $GITHUB_ENV
        else
          echo "HAS_DOCKER_DIR=false" >> $GITHUB_ENV
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.HAS_DOCKER_DIR == 'false'
      with:
        level: "WARNING"
        message: >
          Exit action as no 'docker' directory exists at the root of the
          repository. Except in special cases, e.g. '.devcontainer', we
          emphasize that docker files are expected to be in the 'docker'
          directory at the root of the repository.

    - name: "Exit workflow"
      if: env.HAS_DOCKER_DIR == 'false'
      shell: bash
      run: exit 0

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.HAS_DOCKER_DIR == 'true'
      with:
        level: "INFO"
        message: >
          Lint directory '${{ github.workspace }}/docker'.

    - name: "Run Dockerfile linting in docker directory"
      if: env.HAS_DOCKER_DIR == 'true'
      uses: ansys/actions/docker-style@feat/lint_dockerfile
      with:
        directory: docker
        recursive: ${{ inputs.docker-recursive }}
        error-level: ${{ inputs.docker-error-level }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check if directory '.devcontainer' exists.

    - name: "Check if .devcontainer directory exists"
      shell: bash
      run: |
        if [ -d "${{ github.workspace }}/.devcontainer" ]; then
          echo "HAS_DEVCONTAINER_DIR=true" >> $GITHUB_ENV
        else
          echo "HAS_DEVCONTAINER_DIR=false" >> $GITHUB_ENV
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.HAS_DEVCONTAINER_DIR == 'false'
      with:
        level: "INFO"
        message: >
          Exit action as no '.devcontainer' directory exists at the root of
          the repository.

    - name: "Exit workflow"
      if: env.HAS_DEVCONTAINER_DIR == 'false'
      shell: bash
      run: exit 0

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.HAS_DEVCONTAINER_DIR == 'true'
      with:
        level: "INFO"
        message: >
          Lint directory '${{ github.workspace }}/.devcontainer'.

    - name: "Run Dockerfile linting in .devcontainer directory"
      if: env.HAS_DEVCONTAINER_DIR == 'false'
      uses: ansys/actions/docker-style@feat/lint_dockerfile
      with:
        directory: .devcontainer
        error-level: ${{ inputs.docker-error-level }}
