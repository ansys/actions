# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Code style

description: |
  This action evaluates the code quality of your project by using `pre-commit
  <https://github.com/pre-commit/pre-commit/>`_. The action installs and runs
  ``pre-commit``. It is assumed that your project contains a
  ``.pre-commit-config.yaml`` file in the root directory. The action can also
  be extended to lint docker files that are contained in the docker directory
  and the .devcontainer directory.

  .. warning::

    If docker lint is enabled and directories docker or .devcontainer exist,
    the action will fail if it doesn't find a Dockerfile.


inputs:

  # Optional inputs

  python-version:
    description: |
      Python version used for installing and running ``pre-commit``.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  pre-commit-version:
    description: |
      The version of pre-commit to install.
    required: false
    default: '3.8.0'
    type: string

  docker-lint:
    description: |
      Extend the workflow to lint Dockerfile(s).
    required: false
    default: false
    type: bool

  docker-recursive:
    description: |
      Search for Dockerfile(s) recursively. Only applies to allowed
      directories, i.e. docker and .devcontainer.
    required: false
    default: false
    type: bool

  docker-error-level:
    description: |
      Fail docker-style action based on hadolint output (-1: never, 0: error,
      1: warning, 2: info)
    required: false
    default: 2
    type: int

  skip-install:
    description: |
      Whether to skip the installation of the project or not. If ``true``, the
      project is not installed. If ``false``, the project is installed. By
      default, the project is not installed.
    required: false
    default: true
    type: boolean

  show-diff-on-failure:
    description: |
      Whether to show the diff when a pre-commit hook fails.
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Determine context.

    - name: "Determine GitHub environment variables"
      shell: bash
      run: |
        if [[ -f "pyproject.toml" ]] && grep -q 'build-backend = "poetry\.core\.masonry\.api"' "pyproject.toml"; then
          echo "BUILD_BACKEND=$(echo 'poetry')" >> $GITHUB_ENV
        else
          echo "BUILD_BACKEND=$(echo 'pip')" >> $GITHUB_ENV
        fi

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Build backend: ${{ env.BUILD_BACKEND }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Set up python to check code style.

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    # NOTE: Installation of poetry in a separate environment to the project to
    # avoid situations in which both poetry and the project have shared
    # dependencies with different version. This can lead to CICD failures. For
    # more information, see https://github.com/ansys/actions/pull/560
    - name: "Add pipx/bin directory to Github Path"
      if: env.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "${{ runner.temp }}/pipx/bin" >> $GITHUB_PATH

    # NOTE: Poetry uses virtual environments when installing a project. As we
    # want to control that creation, we store POETRY_VIRTUALENVS_CREATE=false
    # in the GitHub environment.
    - name: "Set poetry environment variable(s)"
      if: env.BUILD_BACKEND == 'poetry'
      shell: bash
      run: echo "POETRY_VIRTUALENVS_CREATE=false" >> $GITHUB_ENV

    # NOTE: Install pipx in a location that can be used in following CICD jobs
    # but ensure that poetry is installed in a temporary folder cleaned before
    # and after each job. This way poetry is kinda "installed at system level"
    # making it available in the following call and installed in a different
    # environment from the project.
    - name: "Install poetry and create a virtual environment"
      if: env.BUILD_BACKEND == 'poetry'
      shell: bash
      run: |
        python -m pip install pipx
        python -m pipx install poetry
        python -m venv .venv
      env:
        PIPX_BIN_DIR: ${{ runner.temp }}/pipx/bin
        PIPX_HOME: ${{ runner.temp }}/pipx/home

    - name: "Create a virtual environment"
      if: env.BUILD_BACKEND == 'pip'
      shell: bash
      run: |
        python -m venv .venv

    - name: "Set up virtual environment activation command"
      shell: bash
      run: |
        if [[ ${{ runner.os }} == 'Windows' ]]; then
          echo "ACTIVATE_VENV=$(echo 'source .venv/scripts/activate')" >> $GITHUB_ENV
        else
          echo "ACTIVATE_VENV=$(echo 'source .venv/bin/activate')" >> $GITHUB_ENV
        fi

    # ------------------------------------------------------------------------

    - name: "Update pip"
      shell: bash
      run: |
        ${{ env.ACTIVATE_VENV }}
        python -m pip install -U pip

    - name: "Install project (if required)"
      if: inputs.skip-install == 'false'
      shell: bash
      run: |
        ${{ env.ACTIVATE_VENV }}
        if [[ ${{ env.BUILD_BACKEND }} == 'poetry' ]]; then
          python -m pip install poetry
          python -m poetry install
        else
          python -m pip install .
        fi

    - name: "Install pre-commit v${{ inputs.pre-commit-version }}"
      shell: bash
      run: |
        ${{ env.ACTIVATE_VENV }}
        python -m pip install 'pre-commit==${{ inputs.pre-commit-version }}'
        pre-commit install

    - name: "Run pre-commit"
      shell: bash
      run: |
        ${{ env.ACTIVATE_VENV }}
        if [[ ${{ inputs.show-diff-on-failure }} == 'true' ]]; then
          pre-commit run --all-files --show-diff-on-failure
        else
          pre-commit run --all-files
        fi

    # ------------------------------------------------------------------------

    # Trigger docker-style action if docker-lint is set to true.
    - uses: ansys/actions/_logging@main
      if: inputs.docker-lint == 'true'
      with:
        level: "INFO"
        message: >
          Extend the workflow to lint Dockerfile(s).

    - name: "Run Dockerfile linting in directories 'docker' and '.devcontainer'"
      if: inputs.docker-lint == 'true'
      uses: ansys/actions/docker-style@main
      with:
        directory: "docker .devcontainer"
        recursive: ${{ inputs.docker-recursive }}
        error-level: ${{ inputs.docker-error-level }}

    # ------------------------------------------------------------------------

    # End action as docker-lint is set to false.
    - uses: ansys/actions/_logging@main
      if: ${{ inputs.docker-lint == 'false' }}
      with:
        level: "INFO"
        message: >
          Docker lint disabled.
