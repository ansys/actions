# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  "Check library and third-party vulnerabilities."

description: |
  Action actively checking for library and third party vulnerabilities by
  means of the `bandit <https://bandit.readthedocs.io/en/latest/>`_ and
  `safety <https://pyup.io/safety/>`_ Python packages. These packages
  allow you to identify security issues and vulnerabilities inside your code.

  This action has two running modes:

  - **Default mode**: when running on default mode, if a security advisory
    is detected, this action will publish both the security advisory and
    an issue so that end users are informed about existing issues.

  - **Development mode**: repository maintainers are asked to activate
    the ``dev-mode`` option, which will activate both ``dry-run`` and
    ``exit-with-error-on-new-advisory`` (independently of other configurations
    provided). This way developers are informed of potential vulnerabilities
    being introduced by them on their feature branch (while no new advisories
    are created).


  The following list of `safety`_ vulnerabilities are accepted:

  .. card:: :octicon:`codescan-checkmark` Accepted safety vulnerabilities

      .. jinja:: check-vulnerabilities

          {% for v_id in ignored_safety %}
          {% if v_id != '' %}
          - `Vulnerability {{ v_id }} <https://pyup.io/v/{{ v_id }}/f17>`_
          {% endif %}
          {% endfor %}

inputs:
  token:
    description: |
      Token with write permissions on the repository.
    required: true
    type: string

  python-package-name:
    description: |
      Python package name being evaluate as it is shown on PyPI.
    required: true
    type: string

  # Optional inputs

  source-directory:
    description: |
      The source folder of the repository to be evaluated by bandit.
      By default, it is set to ``src``
    default: 'src'
    required: false
    type: string

  repo-full-name:
    description: |
      The repository to be evaluated. By default, it is extracted from the
      GitHub context.
    default: ''
    required: false
    type: string

  dev-mode:
    description: |
      Whether to run or not this action in development mode. It will activate
      by default the ``dry-run`` and ``exit-with-error-on-new-advisory`` flags.
    required: false
    default: false
    type: boolean

  dry-run:
    description: |
      Whether to run or not this action in dry run mode. Dry run mode executes
      all the action steps and prints on screen the results (if any).
    required: false
    default: false
    type: boolean

  exit-with-error-on-new-advisory:
    description: |
      Whether to exit the action on error if a new advisory is detected.
      This mode is not recommended on ``main`` branches since it will cause the
      workflow to fail. To be used on ``feature`` branches in combination with
      ``dry-run`` mode.
    required: false
    default: false
    type: boolean

  hide-log:
    description: |
      Whether to hide the output log of the GitHub action.
      By default, the log is available to anyone for public repositories.
      This would disclose any potential vulnerabilities to anyone.
    default: true
    required: false
    type: boolean

  upload-reports:
    description: |
      Whether to upload the artifacts containing the vulnerability report.
      By default, the report artifacts will not be uploaded to hide any potential vulnerabilities?
    default: false
    required: false
    type: boolean

  create-issues:
    description: |
      Whether to create issues for new advisories detected.
      By default, issues are NOT created for new advisories detected.
    default: false
    required: false
    type: boolean

  checkout:
    description: |
      Whether to clone the repository in the CI/CD machine. Default value is
      ``true``.
    default: true
    required: false
    type: boolean

  python-version:
    description: |
      Desired Python version.
    default: '3.10'
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: "Declare needed environment variables"
      shell: bash
      run: |
        echo "DEPENDENCY_CHECK_TOKEN=${{ inputs.token }}" >> $GITHUB_ENV
        echo "DEPENDENCY_CHECK_PACKAGE_NAME=${{ inputs.python-package-name }}" >> $GITHUB_ENV
        echo "DEPENDENCY_CHECK_REPOSITORY=$( [[ '${{ inputs.repo-full-name }}' == '' ]] && echo '${{ github.repository }}' || echo '${{ inputs.repo-full-name }}')" >> $GITHUB_ENV
        if [[ ${{ inputs.dry-run }} == 'true' ]];
        then
          echo "DEPENDENCY_CHECK_DRY_RUN=1" >> $GITHUB_ENV
        fi
        if [[ ${{ inputs.exit-with-error-on-new-advisory }} == 'true' ]];
        then
          echo "DEPENDENCY_CHECK_ERROR_EXIT=1" >> $GITHUB_ENV
        fi
        if [[ ${{ inputs.dev-mode }} == 'true' ]];
        then
          echo "DEPENDENCY_CHECK_DRY_RUN=1" >> $GITHUB_ENV
          echo "DEPENDENCY_CHECK_ERROR_EXIT=1" >> $GITHUB_ENV
        fi
        if [[ ${{ inputs.create-issues }} == 'true' ]];
        then
          echo "DEPENDENCY_CHECK_CREATE_ISSUES=1" >> $GITHUB_ENV
        fi

    - name: "Install Git and clone project"
      uses: actions/checkout@v4
      if: ${{ inputs.checkout == 'true' }}
      with:
        repository: ${{ env.DEPENDENCY_CHECK_REPOSITORY }}

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: false

    - name: "Install requirements"
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.action_path }}/requirements.txt

    - name: "Install library"
      shell: bash
      run: |
        python -m pip install .

    - name: "Download the list of ignored safety vulnerabilities"
      shell: bash
      run: |
        wget https://raw.githubusercontent.com/ansys/actions/main/check-vulnerabilities/ignored-safety.txt

    - name: "Run safety and bandit"
      shell: bash
      run: |
        # Load accepted safety vulnerabilities
        mapfile ignored_safety_vulnerabilities < ignored-safety.txt
        ignored_vulnerabilities=''
        for pckg in ${ignored_safety_vulnerabilities[*]}; do ignored_vulnerabilities+="-i $pckg "; done
          ignored_safety_vulnerabilities=${ignored_safety_vulnerabilities::-1}
        echo "Ignored safety vulnerabilities: $ignored_vulnerabilities"

        # Run security tools
        safety check -o bare --save-json info_safety.json --continue-on-error $ignored_vulnerabilities
        bandit -r ${{ inputs.source-directory }} -o info_bandit.json -f json --exit-zero

    - name: "Run safety advisory checks"
      shell: bash
      run: |
        if [[ ${{ inputs.hide-log }} == 'true' ]]; then
          python ${{ github.action_path }}/check_vulnerabilities.py > /dev/null 2>&1
        else
          python ${{ github.action_path }}/check_vulnerabilities.py
        fi

    - name: "Uploading safety and bandit results"
      uses: actions/upload-artifact@v4
      if: ${{ inputs.upload-reports == 'true' }}
      with:
        name: vulnerability-results
        path: ./info_*.json
        retention-days: 7
