# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Check actions security action.

description: |
  This action helps audit GitHub workflows for vulnerabilities. It finds many common
  security issues in typical GitHub Actions CI/CD setups using
  `zizmor <https://woodruffw.github.io/zizmor/>`_.

inputs:

  token:
    description: |
      Use the ``GH_TOKEN`` to allow online audits by zizmor.
    required: false
    type: string

  generate-summary:
    description: |
      Whether to output a nicely formatted summary table showing the number
      of security issues per workflow file. Default value is ``true``.
    required: false
    default: true
    type: boolean

  auditing-level:
    description: |
      Equivalent to 'persona' zizmor option, controls zizmor's auditing sensitivity.
      Possible values include 'normal', 'high', and 'strict', which map to 'regular', 'pedantic',
      and 'auditor' persona options. Default value is ``high``.
    required: false
    default: 'high'
    type: string

  trust-ansys-actions:
    description: |
      Whether to trust the ``ansys/actions``. Setting this option to true will allow pinning
      ``ansys/actions`` with tags. This option is ignored if a custom ``zizmor.yml`` file is
      detected in the repository. Default value is ``true``.
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Install uv"
      uses: astral-sh/setup-uv@6b9c6063abd6010835644d4c2e1bef4cf5cd0fca # v6.0.1

    - name: "Install zizmor and verify installation"
      shell: bash
      run: |
        uv tool install zizmor==1.6.0
        zizmor --version

    - name: "Optionally set GH_TOKEN"
      if: ${{ inputs.token != '' }}
      shell: bash
      env:
        TOKEN: ${{ inputs.token }}
      run: | # zizmor: ignore[github-env]
        echo "GH_TOKEN=${TOKEN}" >> ${GITHUB_ENV}

    - name: "Check if custom zizmor.yml file exists"
      id: custom-zizmor
      shell: bash
      run: |
        if [ -f zizmor.yml ]; then
          echo "Custom zizmor.yml file detected. Ignoring 'trust-ansys-actions' option."
          echo "CUSTOM_ZIZMOR=true" >> "$GITHUB_OUTPUT"
        else
          echo "CUSTOM_ZIZMOR=false" >> "$GITHUB_OUTPUT"
        fi

    - name: "Write zizmor config file"
      if: ${{ steps.custom-zizmor.outputs.CUSTOM_ZIZMOR == 'false' }}
      shell: bash
      env:
        ANSYS_ACTIONS_POLICY: ${{ inputs.trust-ansys-actions == 'true' && 'ref-pin' || 'hash-pin' }}
      run: |
        cat << _EOF_ > zizmor.yml
        rules:
          unpinned-uses:
            config:
              policies:
                ansys/*: ${ANSYS_ACTIONS_POLICY}
                actions/*: hash-pin
        _EOF_

    - name: "Output a summary of detected vulnerabilities"
      if: ${{ inputs.generate-summary == 'true' }}
      shell: bash
      env:
        HIGH_AUDIT_LEVEL: ${{ inputs.auditing-level == 'high' && '--persona=pedantic' || '' }}
        STRICT_AUDIT_LEVEL: ${{ inputs.auditing-level == 'strict' && '--persona=auditor' || '' }}
      run: |
        cat << _EOF_ > zizmor-summary
        #!/bin/bash
        # Process zizmor report and generate summary of identified issues

        format="%-50s%-20s\n"
        printf "\$format" "=========" "================"
        printf "\$format" "File name" "Number of issues"
        printf "\$format" "=========" "================"

        count=0
        while read no_of_occurence workflow_file; do
            printf "\$format" "\$workflow_file" "\$no_of_occurence"
            count=\$((count + no_of_occurence))
        done < <(zizmor $HIGH_AUDIT_LEVEL $STRICT_AUDIT_LEVEL . 2> /dev/null | grep -Eo "[^ /]+/([^ /]+/)?.*\.yml" | sort | uniq -c)

        printf "\$format" "=========" "================"
        printf "\$format" "Total" "\$count"
        printf "\$format" "=========" "================"
        printf "\nNote: the summary excludes warning surpressed by zizmor."
        _EOF_

        chmod u+x zizmor-summary
        ./zizmor-summary

    - name: "Detailed zizmor audit"
      shell: bash
      env:
        HIGH_AUDIT_LEVEL: ${{ inputs.auditing-level == 'high' && '--persona=pedantic' || '' }}
        STRICT_AUDIT_LEVEL: ${{ inputs.auditing-level == 'strict' && '--persona=auditor' || '' }}
      run: |
        zizmor ${HIGH_AUDIT_LEVEL} ${STRICT_AUDIT_LEVEL} .
