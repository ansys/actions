name: "Documentation deploy development version."
description: "Deploy development documentation to GitHub pages."

inputs:
  doc-artifact-name:
    description: "Name of the HTML documentation artifact."
    required: false
    default: 'documentation-html'
    type: string
  decompress_artifact:
    description: "If ``True``, the documentation artifact name is decompressed. If ``False``, content is assumed to be a collection of HTML files."
    required: false
    default: false
    type: string
  cname:
    description: 'The canonical name of the documentation website.'
    required: true
    type: string
  token:
    description: "Required token for documentation deployment."
    required: true
    type: string
  workflow:
    description: 'Workflow name from where the artifacts are downloaded. By default, the current running workflow.'
    required: false
    default: ''
    type: string
  workflow-conclusion:
    description: 'Workflow conclusion (options: "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required") or status (options: "completed", "in_progress", "queued") to search for. Use the empty string ("") to ignore status or conclusion in the search.'
    required: false
    default: ''
    type: string
  checkout:
    description: 'If ``True``, the project is checked out in the ``gh-pages`` branch. If ``False``, users are the ones in charge of performing the checkout step.'
    required: false
    default: true
    type: string

runs:
  using: "composite"
  steps:

    - name: "Install system dependencies"
      shell: bash
      run: |
        sudo apt-get install cargo curl
        cargo install ouch && ouch --version

    - name: "Checkout project in the GitHub Pages branch"
      uses: actions/checkout@v3
      if: inputs.checkout == 'true'
      with:
        ref: 'gh-pages'

    - name: "Create a fresh development folder"
      shell: bash
      run: |
        rm -rf dev/ && mkdir dev/

    - name: "Download the HTML documentation artifact from desired workflow"
      uses: dawidd6/action-download-artifact@v2
      if: inputs.workflow != ''
      with:
        github_token: ${{ inputs.token }}
        name: ${{ inputs.doc-artifact-name }}
        path: dev
        workflow: ${{ inputs.workflow }}
        workflow_conclusion: ${{ inputs.workflow-conclusion }}

    - name: "Download the HTML documentation artifact from current workflow"
      uses: actions/download-artifact@v3
      if: inputs.workflow == ''
      with:
        name: ${{ inputs.doc-artifact-name }}
        path: dev

    - name: "Decompress artifact content if required"
      shell: bash
      if: inputs.decompress_artifact == 'true'
      working-directory: dev
      run: |
        compressed_artifact=$(ls .)
        ouch decompress $compressed_artifact
        rm $compressed_artifact

    - name: "Display structure of downloaded files"
      shell: bash
      run: |
        ls -R

    - name: "Include CNAME and nojekyll files expected by GitHub pages"
      shell: bash
      run: |
        touch CNAME .nojekyll
        echo ${{ inputs.cname }} > CNAME

    - name: "Generate the redirection URL"
      shell: bash
      run: |
        # Verify if there is any stable release in release/versions.json
        if grep -q -E "\"version\": \"[0-9]+.[0-9]+ \(stable\)\"" release/versions.json;
        then 
          # Generate the URL pointing to the latest stable version
          echo "Found stable release. Generating stable redirection URL..."
          line=$(grep -n -E "\"version\": \"[0-9]+.[0-9]+ \(stable\)\"" release/versions.json)
          version=$(echo $line | grep -o -h -E "[0-9]+.[0-9]+")
          echo "URL=https://${{ inputs.cname }}/release/$version" >> $GITHUB_ENV
        else 
          # Generate the URL pointing to the development version if no stable releases
          echo "Stable release not found. Generating development redirection URL..."
          echo "URL=https://${{ inputs.cname }}/dev" >> $GITHUB_ENV
        fi

    - name: "Update the redirection link"
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/pyansys/actions/main/scripts/redirect.html -o index.html
        # HACK: if the GitHub actions variable is dereferenced inside the `sed` command a syntax error is raised.
        # The URL Github actions environmental variable is loaded inside a shell one to avoid this conflict.
        url=${{ env.URL }}
        echo "Value for url: $url"
        sed -i "s|var-url|$url|g" index.html
        cat index.html

    - name: "Clear unnecessary gh-pages files and directories"
      shell: bash
      run: |
        shopt -s extglob
        rm -rf -v !("index.html"|"release"|"dev"|"CNAME"|".nojekyll")
        ls -R

    - name: "Commit new changes (if required)"
      shell: bash
      run: |
        if [[ ! -z $(git status -s) ]];
        then
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "DOC: add development documentation"
          git push
        fi
