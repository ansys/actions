name: >
  Doc deploy dev action

description: |
  This action deploys the desired HTML documentation artifact containing the
  development version of a library to the specified branch of a repository. By
  default, the ``gh-pages`` branch of the current repository is assumed.

  .. note::

      If your project is using ``pyansys/actions@v3`` or lower and you would
      like to update to this version of the actions, see the `guidelines for
      migrating to the latest multi-version documentation layout
      <https://dev.docs.pyansys.com/how-to/documenting.html#multi-version-migration-from-pyansys-actions-v3-to-pyansys-actions-v4>`_ .

inputs:

  # Required inputs

  cname:
    description: >
      The canonical name (CNAME) containing the documentation.
    required: true
    type: string

  token:
    description: >
      Required password, key or token with the correct credentials for deploying the
      documentation. If deploying to the current repository, the ``secrets.GITHUB_TOKEN`` token
      is enough. For workflows deploying to other repositories, `generate and
      use a token with writing access
      <https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token>`_
      to that repository.
    required: true
    type: string

  # Optional inputs

  doc-artifact-name:
    description: >
        Name of the HTML documentation artifact. This artifact is expected to
        contain all the HTML and static files. If it contains a compressed file,
        make sure you enable the ``decompress-artifact`` option.
    required: false
    default: 'documentation-html'
    type: string

  decompress-artifact:
    description: >
      Wether to decompress the artifact using `ouch
      <https://github.com/ouch-org/ouch>`_ as decompression tool. Default value
      is ``false``.
    required: false
    default: false
    type: string

  repository:
    description: >
      Repository name in the form of ``username/repository`` to be used for
      deploying the documentation. The current repository is assumed by default.
    required: false
    default: 'current'
    type: string

  branch:
    description: >
      Branch name for deploying the documentation. The ``gh-pages`` branch is
      used by default.
    required: false
    default: 'gh-pages'
    type: string

  commit-message:
    description: >
      Commit message used when deploying the documentation.
    required: false
    default: 'DOC: update development documentation'
    type: string

  force-orphan:
    description: >
      Whether to force the deployment branch to be orphan with only the latest commit or not. Default value
      is ``true``.
    required: false
    default: true
    type: string

runs:
  using: "composite"
  steps:

    # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Checkout the repository branch for deploying the documentation. If
          this step fails, then it means that the provided token is not valid.

    - name: "Get the name of the repository"
      shell: bash
      run: |
        if [[ "${{ inputs.repository }}" == "current" ]]; then
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        else
          echo "REPOSITORY=${{ inputs.repository }}" >> $GITHUB_ENV
        fi

    - name: "Checkout ${{ env.REPOSITORY }} repository"
      uses: actions/checkout@v3
      with:
        repository: ${{ env.REPOSITORY }}
        ref: ${{ inputs.branch }}
        token: ${{ inputs.token }}

    # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Download the documentation artifact from the current workflow. If the
          artifact contains a compressed file, decompress it. Display the
          structure of the 'version/dev' directory at the end of the process to
          verify the layout of the folder is the right one.

    - name: "Clean destination folder"
      shell: bash
      run:
        rm -rf version/dev && mkdir -p version/dev

    - name: "Download the development documentation artifact"
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.doc-artifact-name }}
        path: version/dev

    - name: "Update apt-get"
      shell: bash
      run: |
        sudo apt-get update

    - name: "Decompress artifact content"
      shell: bash
      if: inputs.decompress-artifact == 'true'
      run: |
        sudo apt-get install cargo && cargo install ouch && ouch --version
        cd version/dev && compressed_artifact=$(ls .)
        ouch decompress $compressed_artifact && rm $compressed_artifact

    - name: "Display structure of version/dev"
      shell: bash
      run: |
        ls -R version/dev

    # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Create the 'versions.json' file if it does not exist. Note that this
          step is not required in the 'doc-deploy-stable' action. The reason is
          that for a stable release to be created, a development version must exist. This
          forces users to use this action before using the stable deploy one.

    - name: "Create the 'versions.json' file if not present"
      shell: bash
      run: |
        if ! [[ -f "versions.json" ]];
        then
            sudo apt-get install moreutils jq
            echo '[]' > versions.json
            url_dev="https://${{ inputs.cname }}/version/dev/"
            jq --arg url $url_dev '. += [{"name": "dev", "version": "dev", "url": $url}]' versions.json | sponge versions.json
        fi
        cat versions.json

    # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Generate an 'index.html' for redirection to the latest stable version
          of the documentation. If no stable version has been released, a
          redirection to the development documentation is generated.


    - name: "Generate the redirection URL"
      shell: bash
      run: |
        if $(grep -q "(stable)" versions.json)
        then
          echo "Redirecting to the latest stable version..."
          echo "REDIRECTION_URL=https://${{ inputs.cname }}/version/stable/" >> $GITHUB_ENV
        else
          echo "Redirecting to the latest development version..."
          echo "REDIRECTION_URL=https://${{ inputs.cname }}/version/dev/" >> $GITHUB_ENV
        fi

    - name: "Create the 'index.html' redirection file"
      shell: bash
      run: |
        echo "<!DOCTYPE html>" > index.html
        echo "<meta charset=\"utf-8\">" >> index.html
        echo "<title>Redirecting to ${{ env.REDIRECTION_URL }}</title>" >> index.html
        echo "<meta http-equiv=\"refresh\" content=\"0; URL=${{ env.REDIRECTION_URL }}\">" >> index.html
        echo "<link rel=\"canonical\" href=\"${{ env.REDIRECTION_URL }}\">" >> index.html

    - name: "Show the contents of the 'index.html' redirection file"
      shell: bash
      run: |
          cat index.html

    # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Copy the 'version/stable/index.html' to 'version/index.html' file. If
          no stable release is available, copy the 'dev/index.html' instead.
          Update all references to point to 'stable/_static' or 'dev/_static'.

    - name: "Use the latest 'index.html' as baseline for the versions page"
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          cp version/stable/index.html version/index.html
        else
          cp version/dev/index.html version/index.html
        fi

    - name: "Update all references to point to 'stable/_static' or 'dev/_static'"
      shell: bash
      run: |
        if [[ -f 'version/stable/index.html' ]]; then
          sed -i "s|_static|stable/_static|g" version/index.html
        else
          sed -i "s|_static|dev/_static|g" version/index.html
        fi

    - name: "Declare the script to read the 'versions.json' file"
      shell: bash
      run: |
        cat > script.html <<'EOF'  
        <script>

          /**
           * Returns an array of directories in the specified folder path.
           *
           * @param {string} folderPath - The path of the folder to retrieve directories from.
           * @returns {Array} An array of directory names.
           * @throws {TypeError} If the folderPath parameter is not a string.
           * @throws {Error} If there is an issue with the fetch request or parsing the response.
           */
          async function getDirectories(folderPath) {
            const response = await fetch(folderPath);
            const text = await response.text();
            const lines = text.split('\n');
            return lines.filter((line) => line.endsWith('/')).map((line) => line.slice(0, -1));
          }

          /**
           * Removes the sidebar from the current page.
           */
          function removeSidebarFromPage() {
            const sidebar = document.querySelector(
              "body > div.bd-container.container-xl > div > div.bd-sidebar-secondary.d-none.d-xl-block.col-xl-2.bd-toc"
            );
            sidebar.parentNode.removeChild(sidebar);
          }

          /**
           * Creates a table element with class 'table' and adds a row for each
           * version in the specified * array of directory names. Each row has two
           * cells: one for the version name, and one for the * URL of the page with
           * the version name appended to the end of the current URL.
           *
           * @param {string[]} directories - An array of directory names to use as version names.
           * @returns {HTMLTableElement} A table element with class 'table', containing a row for each version in the specified array.
           */
          function createVersionsTableFromDirectories(directories) {
            // Create a table with the class 'table'
            const table = document.createElement('table')
            table.classList.add('table')

            // Create a table row for the headers
            const headerRow = table.insertRow();
            
            // Create the 'Version' and 'URL' headers
            const versionHeader = document.createElement('th');
            const urlHeader = document.createElement('th');

            versionHeader.textContent = 'Version';
            urlHeader.textContent = 'URL';

            headerRow.appendChild(versionHeader);
            headerRow.appendChild(urlHeader);

            // Add data rows to the table
            directories.forEach(version => {
              const row = table.insertRow();
              const versionCell = row.insertCell();
              const urlCell = row.insertCell();
              versionCell.textContent = version;

              // Create the URL for the version
              const rawUrl = window.location.href;
              const parts = url.split("/");
              parts.pop();
              const versionUrl = parts.join("/");
              urlCell.textContent = versionUrl;
            });

            return table;
          }

          /**
           * Sets the content of an article element with the given title and table.
           *
           * @param {string} title - The title of the article to be displayed.
           * @param {string} table - The HTML table to be included in the article.
           *
           * @description
           * This function creates an HTML h1 element with the given title and a
           * div element with the given table. * It then concatenates the two
           * elements together and sets the innerHTML of the article element on
           * the current page * with the concatenated content.
           */
          function setArticleContent(title, table) {
              const articleTitle = <h1>${title}</h1>
              const articleTable = <div id="versions-table">${table}</div>
              const articleContent = articleTitle + articleTable
              document.querySelector('article').innerHTML = articleContent
          }

          // Create an HTML table with all the version numbers and their links
          const thisFolder = "."
          const directories = getDirectories(thisFolder)
          const versionsTable = createVersionsTableFromDirectories(directories)

          // Update the title of the document and the content of the article
          document.title = "Versions"
          setArticleContent("Documentation versions", versionsTable)

          // Remove the left side bar
          removeSidebarFromPage()

        </script>
        EOF

    # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Create the '.nojekyll' and 'CNAME' file with the desired values

    - name: "Create '.nojekyll' and 'CNAME' files"
      shell: bash
      run: |
          touch .nojekyll CNAME
          echo "${{ inputs.cname }}" > CNAME

     # ------------------------------------------------------------------------

    - uses: pyansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          For deploying the documentation, a GitHub token or a deployment token
          is required. The GitHub token is used when deploying to the current
          repository while the deployment token is used to deploy to an external
          repository.

    - name: "Deploy to ${{ inputs.branch }} branch of ${{ github.repository }} repository"
      if: inputs.repository == 'current'
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_dir: .
        publish_branch: ${{ inputs.branch }}
        github_token: ${{ inputs.token }}
        commit_message: ${{ inputs.commit-message }}
        keep_files: true
        force_orphan: ${{ inputs.force-orphan }}

    - name: "Deploy to ${{ inputs.branch }} branch of ${{ inputs.repository }}"
      if: inputs.repository != 'current'
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_dir: .
        publish_branch: ${{ inputs.branch }}
        personal_token: ${{ inputs.token }}
        external_repository: ${{ inputs.repository }}
        commit_message: ${{ inputs.commit-message }}
        keep_files: true
        force_orphan: ${{ inputs.force-orphan }}
