name: "Documentation deploy development version."
description: "Deploy development documentation to GitHub pages."

inputs:
  doc-artifact-name:
    description: "Name of the HTML documentation artifact."
    required: false
    default: 'documentation-html'
    type: string
  cname:
    description: 'The canonical name of the documentation website.'
    required: true
    type: string
  token:
    description: "Required token for documentation deployment."
    required: true
    type: string
  workflow:
    description: 'Workflow name from where the artifacts are downloaded. By default, the same running workflow.'
    required: false
    default: ""
    type: string
  repo:
    description: 'Repository name with owner (like actions/checkout)'
    required: false
    default: ${{ github.repository }}
    type: string
  pr:
    description: 'Pull request number'
    required: false
    type: string
  commit:
    description: 'Commit hash'
    required: false
    type: string
  branch:
    description: 'Branch name'
    required: false
    type: string
  event:
    description: 'Event type'
    required: false
    type: string
  run_id:
    description: 'Workflow run id'
    required: false
    type: string
  run_number:
    description: 'Workflow run number'
    required: false
    type: string
  name:
    description: 'Artifact name (download all artifacts if not specified)'
    required: false
    type: string
  dry_run:
    description: 'Check the existence of artifact(s) without downloading'
    required: false
    type: string
  checkout:
      description: 'Whether to checkout the repository or not'
      default: true
      required: false
      type: boolean

runs:
  using: "composite"
  steps:

    - name: "Install system dependencies"
      shell: bash
      run: |
        sudo apt-get install curl

    - name: "Checkout project in the GitHub Pages branch"
      uses: actions/checkout@v3
      if: ${{ inputs.checkout == 'true' }}
      with:
        ref: 'gh-pages'

    - name: "Create a fresh development folder"
      shell: bash
      run: rm -rf dev/ && mkdir dev/

    - name: "Download the HTML documentation artifact"
      uses: dawidd6/action-download-artifact@v2
      with:
        branch: ${{ inputs.branch }}
        commit: ${{ inputs.commit }}
        dry_run: ${{ inputs.dry_run }}
        event: ${{ inputs.event }}
        github_token: ${{ inputs.token }}
        name: ${{ inputs.doc-artifact-name }}
        path: dev
        pr: ${{ inputs.pr }}
        repo: ${{ inputs.repo }}
        run_id: ${{ inputs.run_id }}
        run_number: ${{ inputs.run_number }}
        workflow: ${{ inputs.workflow }}

    - name: "Display structure of downloaded files"
      shell: bash
      run: |
        ls -R

    - name: "Include CNAME and nojekyll files expected by GitHub pages"
      shell: bash
      run: |
        touch CNAME .nojekyll
        echo ${{ inputs.cname }} > CNAME

    - name: "Generate the redirection URL"
      shell: bash
      run: |
        # Verify if there is any stable release in release/versions.json
        if grep -q -E "\"version\": \"[0-9]+.[0-9]+ \(stable\)\"" release/versions.json;
        then 
          # Generate the URL pointing to the latest stable version
          echo "Found stable release. Generating stable redirection URL..."
          line=$(grep -n -E "\"version\": \"[0-9]+.[0-9]+ \(stable\)\"" release/versions.json)
          version=$(echo $line | grep -o -h -E "[0-9]+.[0-9]+")
          echo "URL=https://${{ inputs.cname }}/release/$version" >> $GITHUB_ENV
        else 
          # Generate the URL pointing to the development version if no stable releases
          echo "Stable release not found. Generating development redirection URL..."
          echo "URL=https://${{ inputs.cname }}/dev" >> $GITHUB_ENV
        fi

    - name: "Update the redirection link"
      shell: bash
      run: |
        curl https://raw.githubusercontent.com/pyansys/actions/main/scripts/redirect.html -o index.html
        # HACK: if the GitHub actions variable is dereferenced inside the `sed` command a syntax error is raised.
        # The URL Github actions environmental variable is loaded inside a shell one to avoid this conflict.
        url=${{ env.URL }}
        echo "Value for url: $url"
        sed -i "s|var-url|$url|g" index.html
        cat index.html

    - name: "Clear unnecessary gh-pages files and directories"
      shell: bash
      run: |
        shopt -s extglob
        rm -rf -v !("index.html"|"release"|"dev"|"CNAME"|".nojekyll")
        ls -R

    - name: "Commit new changes (if required)"
      shell: bash
      run: |
        if [[ ! -z $(git status -s) ]];
        then
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "DOC: add development documentation"
          git push
        fi
