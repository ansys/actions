# Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: "Clean all package versions except certain tags."
description: "Action cleaning up all package versions published at ghcr.io except for certain tags."

inputs:
  package-name:
    description: "Package name."
    required: true
    type: string
  token:
    description: "Token with package deletion permissions."
    required: true
    type: string
  tags-kept:
    description: "Tags to be kept. Pass them as a list: e.g. 'latest, latest-unstable'."
    required: true
    type: string
  package-org:
    description: "Organization at which packages are published."
    required: false
    default: 'ansys'
    type: string
  allow-last-days:
    description: "Avoid removing the last N days images: e.g. '2'."
    required: false
    default: ''
    type: string
  python-version:
    description: 'Desired Python version.'
    default: '3.10'
    required: false
    type: string

runs:
  using: "composite"
  steps:

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: false

    - name: "Install ghapi"
      shell: bash
      run: |

        python -m pip install --upgrade pip
        pip install ghapi

    - name: "Declare Python script"
      shell: bash
      run: |
        cat > clean-except.py << 'EOF'

        from datetime import datetime, timedelta
        import os

        from ghapi.all import GhApi
        from ghapi.core import print_summary
        from ghapi.page import paged

        PACKAGE_TIME_FORMAT = "%Y-%m-%dT%H:%M:%SZ"

        org_str = "${{ inputs.package-org }}"
        pck_str = "${{ inputs.package-name }}"
        last_days_str = "${{ inputs.allow-last-days }}"
        valid_tags_str = "${{ inputs.tags-kept }}"

        last_days = int(last_days_str) if last_days_str != "" else None
        valid_tags = [x.strip() for x in valid_tags_str.split(",")]

        api = GhApi(debug=print_summary, token=os.getenv("PACKAGE_DELETION_TOKEN"))

        if last_days:
            delete_before_date = datetime.now() - timedelta(days=last_days)

        paged_packages = paged(
            api.packages.get_all_package_versions_for_package_owned_by_org,
            org=org_str,
            package_name=pck_str,
            package_type="container",
            state="active",
            per_page=100,
        )

        # Loop over all pages
        for page in paged_packages:
            for package in page:
                # If keeping last days is requested, then check
                if (
                    last_days
                    and datetime.strptime(package.created_at, PACKAGE_TIME_FORMAT).timestamp()
                    > delete_before_date.timestamp()
                ):
                    continue

                # Check if the given package has valid tags
                package_tags = package.metadata.container.tags
                delete = True
                for tag in package_tags:
                    if tag in valid_tags:
                        delete = False
                        break

                # In case it should, delete it
                if delete:
                    print(f"Deleting package: {package}")
                    api.packages.delete_package_version_for_org(
                        org=org_str,
                        package_name=pck_str,
                        package_type="container",
                        package_version_id=package["id"],
                    )

        EOF
        cat clean-except.py

    - name: "Run package cleanup"
      shell: bash
      env:
        PACKAGE_DELETION_TOKEN: ${{ inputs.token }}
      run: |
        python clean-except.py

