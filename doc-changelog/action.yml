# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Documentation Changelog

description: |
  Adds a newsfragment to the target repository using ``towncrier``
  containing the title and number of the pull request.

  This action will only work on Linux/macOS runners.

inputs:
  # Required inputs

  token:
    description: |
      Use the PYANSYS_CI_BOT_TOKEN to do a git commit & push.
      The "contents: write" and "pull-requests: write" permissions
      are required for this action.
    required: true
    type: string

  bot-user:
    description: |
      Use the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.
    required: true
    type: string

  bot-email:
    description: |
      Use the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.
    required: true
    type: string

  # Optional inputs

  python-version:
    description: |
      Python version used for setting up Python.
    default: '3.11'
    required: false
    type: string

  towncrier-version:
    description: |
      Towncrier version used for creating fragment files.
    default: '23.11.0'
    required: false
    type: string

  toml-version:
    description: |
      Toml version used for retrieving the towncrier directory.
    default: ''
    required: false
    type: string

  tomli-version:
    description: |
      Tomli version used for retrieving the towncrier directory.
    default: '2.2.1'
    required: false
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  use-conventional-commits:
    description: |
      Use conventional commits to cateogrize towncrier fragments.
    required: false
    default: false
    type: boolean

  use-default-towncrier-config:
    description: |
      Use the default towncrier configuration in the pyproject.toml file.
    required: false
    default: false
    type: boolean

  use-ansys-default-template:
    description: |
      Use the default towncrier template in the pyproject.toml file.
    required: false
    default: true
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    default: true
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    - uses: ansys/actions/_logging@main
      if: inputs.toml-version != ''
      with:
        level: "ERROR"
        message: >
          With the adoption of dependency groups in PyAnsys packages, the ``toml`` library
          is no longer used because it cannot parse ``pyproject.toml`` files where groups
          include other groups. This action now uses the ``tomli`` library instead. If you
          want to use a specific version of ``tomli``, please set the ``tomli-version``
          input accordingly.

    - name: "Install Git and clone project"
      env:
        PR_BRANCH: ${{ github.event.pull_request.head.ref }}
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        # Required to checkout branch from origin rather than remote
        ref: ${{ env.PR_BRANCH }}
        token: ${{ inputs.token }}

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: ${{ inputs.use-uv }}
        prune-uv-cache: ${{ inputs.use-python-cache != 'true' }}

    - name: "Install towncrier and tomli"
      shell: bash
      env:
        TOWNCRIER_VERSION: ${{ inputs.towncrier-version }}
        TOMLI_VERSION: ${{ inputs.tomli-version }}
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --system' || 'python -m pip install' }}
      run: |
        ${INSTALL_COMMAND} --upgrade pip towncrier==${TOWNCRIER_VERSION} tomli==${TOMLI_VERSION}

    - name: "Get first letter of conventional commit type"
      if: ${{ inputs.use-conventional-commits == 'true' }}
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      shell: python
      run: |
        import os
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import get_first_letter_case

        pr_title = os.environ.get("PR_TITLE")
        get_first_letter_case(pr_title)

    - name: "Check pull-request title follows conventional commits style"
      if: ${{ (inputs.use-conventional-commits == 'true') && (env.FIRST_LETTER == 'lowercase') }}
      uses: ansys/actions/check-pr-title@main
      with:
        token: ${{ inputs.token }}

    - name: "Check pull-request title follows conventional commits style with upper case"
      if: ${{ (inputs.use-conventional-commits == 'true') && (env.FIRST_LETTER == 'uppercase') }}
      uses: ansys/actions/check-pr-title@main
      with:
        token: ${{ inputs.token }}
        use-upper-case: true

    - name: "Get conventional commit type from title"
      if: ${{ inputs.use-conventional-commits == 'true' }}
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      shell: python
      run: |
        import os
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import get_conventional_commit_type

        pr_title = os.environ.get("PR_TITLE")
        get_conventional_commit_type(pr_title)

    - name: "Get labels in the pull request"
      id: get-labels
      if: ${{ inputs.use-conventional-commits == 'false' }}
      env:
        GH_TOKEN: ${{ inputs.token }}
        REPO_NAME: ${{ github.event.repository.name }}
      shell: bash
      run: |
        # Get the labels in the pull request
        pr_labels=$(gh api repos/${{ github.repository_owner }}/${REPO_NAME}/pulls/${{ github.event.number }} --jq '.labels.[].name')

        # Save the labels to an environment variable
        # For example, LABELS="enhancement maintenance"
        echo LABELS='"'$pr_labels'"' >> ${GITHUB_OUTPUT}

    - name: "Set CHANGELOG category based on conventional commit type"
      if: ${{ inputs.use-conventional-commits == 'true' }}
      shell: python
      run: |
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import changelog_category_cc

        cc_type = ${{ env.CC_TYPE }}
        changelog_category_cc(cc_type)

    - name: "Set PR label environment variable"
      if: ${{ inputs.use-conventional-commits == 'false' }}
      shell: python
      env:
        LABELS: ${{ steps.get-labels.outputs.LABELS }}
      run: |
        import os
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import changelog_cateogry_labels

        labels = os.environ.get("LABELS")
        changelog_cateogry_labels(labels)

    - name: "Remove PR fragment file if it already exists"
      shell: bash
      run: |
        # Find files containing the PR number
        # For example, 20.*.md
        file=`find . -type f -name "${{ github.event.number }}.*.md"`

        # If the fragment file exists, then delete the file
        if [ ! -z "$file" ]; then
          echo "Removing $file"
          rm $file
        fi

    - name: "Clean PR title"
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        USE_CONVENTIONAL_COMMITS: ${{ inputs.use-conventional-commits }}
      shell: python
      run: |
        import os
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import clean_pr_title

        pr_title = os.environ.get("PR_TITLE")
        use_cc = True if os.environ.get("USE_CONVENTIONAL_COMMITS") == "true" else False

        clean_pr_title(pr_title, use_cc)

    - name: "Get towncrier directory and template"
      shell: python
      run: |
        import pathlib
        import os
        import tomli

        #Â Identify towncrier configuration file
        pyproject_file = pathlib.Path("pyproject.toml")
        towncrier_file = pathlib.Path("towncrier.toml")
        if not pyproject_file.exists() and not towncrier_file.exists():
            print("No pyproject.toml or towncrier.toml file found.")
            exit(1)

        towncrier_config = pyproject_file if pyproject_file.exists() else towncrier_file

        # Load pyproject.toml
        with open(towncrier_config, 'rb') as f:
            config = tomli.load(f)
            template = config["tool"]["towncrier"]["template"]
            filename = config["tool"]["towncrier"]["filename"]

        # Get the GITHUB_ENV variable
        github_env = os.getenv('GITHUB_ENV')

        with open(github_env, "a") as f:
            f.write(f"TEMPLATE={template}\n")
            f.write(f"FILENAME={filename}\n")

    - name: "Append towncrier categories to pyproject.toml"
      env:
        REPO_NAME: ${{ github.event.repository.name }}
        USE_DEFAULT_TOWNCRIER_CONFIG: ${{ inputs.use-default-towncrier-config }}
      shell: python
      run: |
        import os
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import add_towncrier_config

        repo_name = os.environ.get("REPO_NAME")
        org_name = "${{ github.repository_owner }}"

        default_config = True if os.environ.get("USE_DEFAULT_TOWNCRIER_CONFIG") == "true" else False

        add_towncrier_config(org_name, repo_name, default_config)

    - name: "Rewrite the template with the default template"
      if: ${{ inputs.use-ansys-default-template }}
      shell: python
      run: |
        import os
        import sys
        sys.path.insert(1, '${{ github.action_path }}/../python-utils/')

        from parse_pr_title import rewrite_template

        template_status = rewrite_template(os.getenv('TEMPLATE'), os.getenv('FILENAME'))

        github_env = os.getenv('GITHUB_ENV')

        with open(github_env, "a") as f:
            f.write(f"TEMPLATE_STATUS={template_status}\n")

    - name: "Make PR comment if template rewritten"
      if: ${{ env.TEMPLATE_STATUS == 'True' }}
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
      with:
        issue-number: ${{ github.event.number }}
        body: |
          The towncrier template has been successfully rewritten with the default template.
          Please ensure that `sphinx-design` is included as a dependency in your project's documentation requirements.
          Additionally, add `sphinx-design` to the extensions list in your `conf.py` file.
          For more information, please refer to the migration guide at:
          https://actions.docs.ansys.com/version/stable/migrations/index.html#migration-guide

    - name: "Create and commit towncrier fragment"
      shell: bash
      env:
        BOT_USER: ${{ inputs.bot-user }}
        BOT_EMAIL: ${{ inputs.bot-email }}
      run: |
        # Changelog fragment file in the following format
        # For example, 20.added.md
        fragment="${{ github.event.number }}.${{ env.CHANGELOG_SECTION }}.md"

        # Create changelog fragment with towncrier
        # Fragment file contains the title of the PR
        towncrier create -c "${{ env.CLEAN_TITLE }}" $fragment

        # Configure git username & email
        git config user.name "${BOT_USER}"
        git config user.email "${BOT_EMAIL}"

        # Add towncrier fragment
        git add .

        # Check if file was modified
        modified=`git diff HEAD --name-only`

        # If the file was modified, commit & push it to the branch
        if [ ! -z "$modified" ]; then
          echo "modified: $modified"
          # Commit and push fragment
          git commit -m "chore: adding changelog file $fragment [dependabot-skip]"
          git push
        fi
