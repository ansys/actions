name: >
  Documentation Changelog

description: |
  Adds a newsfragment to the target repository using ``towncrier``
  containing the title and number of the pull request.

inputs:

  # Required inputs

  token:
    description: >
      GitHub token for doing a git commit & push
    required: true
    type: string

  # Optional inputs

  python-version:
    description: >
      Python version used for setting up Python.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      env:
        PR_BRANCH: ${{ github.event.pull_request.head.ref }}
      uses: actions/checkout@v4
      with:
        # Required to checkout branch from origin rather than remote
        ref: ${{ env.PR_BRANCH }}

    - name: "Set up Python ${{ inputs.python-version }}"
      env:
        PYTHON_VERSION: ${{ inputs.python-version }}
        PYTHON_CACHE: ${{ inputs.use-python-cache }}
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        use-cache: ${{ env.PYTHON_CACHE }}

    - name: "Install towncrier"
      shell: bash
      run: |
        python -m pip install --upgrade pip towncrier

    - name: "Check pull request title style"
      env:
        PR_BRANCH: ${{ github.event.pull_request.head.ref }}
      uses: ansys/actions/commit-style@v4
      with:
        token: ${{ inputs.token }}

    - name: "Save pull request type"
      env:
        PR_TITLE: "${{ github.event.pull_request.title }}"
      shell: bash
      run: |
        # Check if PR_TITLE string contains feat, fix, docs, style, refactor, perf, test, build, ci, chore, or revert
        if [[ "${{ env.PR_TITLE }}" == feat* ]]; then echo "PR_TYPE=added" >> $GITHUB_ENV;
        elif [[ "${{ env.PR_TITLE }}" == fix* ]]; then echo "PR_TYPE=fixed" >> $GITHUB_ENV;
        elif [[ ("${{ env.PR_TITLE }}" == chore* ) && ("${{ env.PR_TITLE }}" =~ [b,B]ump) ]]; then echo "PR_TYPE=dependencies" >> $GITHUB_ENV;
        else echo "PR_TYPE=changed" >> $GITHUB_ENV;
        fi

    - name: "Create and commit towncrier fragment"
      env:
        PR_BRANCH: ${{ github.event.pull_request.head.ref }}
        PR_TITLE: "${{ github.event.pull_request.title }}"
        PR_NUMBER: ${{ github.event.number }}
      shell: bash
      run: |
        fragment="${{ env.PR_NUMBER }}.${{ env.PR_TYPE }}.md"
        pr_type_arr=("added" "fixed" "changed" "dependencies")

        # Remove fragment if it already exists for pull request
        for type in "${pr_type_arr[@]}"
        do
          exists=`find . -type f -name "${{ env.PR_NUMBER }}.$type.md"`
          if [ ! -z "$exists" ]; then rm $exists; fi
        done

        # Create changelog fragment with towncrier
        towncrier create -c "${{ env.PR_TITLE }}" $fragment

        # Configure git username & email
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

        # Add towncrier fragment
        git add .

        modified=`git diff HEAD --name-only`
        echo "modified: $modified"

        if [ ! -z "$modified" ]; then
          # Commit and push fragment
          git commit -m "adding fragment"
          git push
        fi