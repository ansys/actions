name: >
  Documentation Changelog

description: |
  Adds a newsfragment to the target repository using ``towncrier``
  containing the title and number of the pull request.


inputs:

  # Required inputs

  path-to-fragment:
    description: >
      Path to where the towncrier fragment is stored
    required: true
    type: string

  token:
    description: >
      GitHub token for doing a git commit & push
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.pr-branch }}

    - name: "Set up Python ${{ inputs.python-version }}"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Install towncrier"
      shell: bash
      run: |
        python -m pip install --upgrade pip towncrier

    - name: "Save github event inputs as environment variables"
      shell: bash
      run: |
        echo "PR_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
        echo 'PR_TITLE="${{ github.event.pull_request.title }}"' >> $GITHUB_ENV
        echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
        echo "FRAGMENT_PATH=${{ inputs.path-to-fragment }}" >> $GITHUB_ENV

    - name: "Get pull request type"
      shell: bash
      run: |
        # Check if PR_TITLE string starts with Add, Remove, Change, Fix, or Bump
        added=`if [[ ${{ env.PR_TITLE }} =~ ^[a,A]dd ]]; then echo "True"; fi`
        removed=`if [[ ${{ env.PR_TITLE }} =~ ^[r,R]emove ]]; then echo "True"; fi`
        changed=`if [[ ${{ env.PR_TITLE }} =~ ^[c,C]hange ]]; then echo "True"; fi`
        fixed=`if [[ ${{ env.PR_TITLE }} =~ ^[f,F]ix ]]; then echo "True"; fi`
        dependency=`if [[ ${{ env.PR_TITLE }} =~ ^[b,B]ump ]]; then echo "True"; fi`

        # If string is not null, then save the pull request type as an env variable
        if [ ! -z "$added" ]; then
          echo "PR_TYPE=added" >> $GITHUB_ENV
        elif [ ! -z "$removed" ]; then
          echo "PR_TYPE=removed" >> $GITHUB_ENV
        elif [ ! -z "$changed" ]; then
          echo "PR_TYPE=changed" >> $GITHUB_ENV
        elif [ ! -z "$fixed" ]; then
          echo "PR_TYPE=fixed" >> $GITHUB_ENV
        elif [ ! -z "$dependency" ]; then
          echo "PR_TYPE=dependencies" >> $GITHUB_ENV
        else
          echo "The pull request title ${{ env.PR_TITLE }} is invalid. Please ensure it starts with one of the following keywords:"
          echo  "Add, Remove, Change, Fix, or Bump (for dependencies)."
          exit 1
        fi

    - name: "Create and commit towncrier fragment"
      shell: bash
      run: |
        file="${{ env.PR_NUMBER }}.${{ env.PR_TYPE }}.md"
        changelog_file="${{ env.FRAGMENT_PATH }}/$file"

        # If fragment already exists with ${{ env.PR_NUMBER }}, remove it and create a new one
        if [[ "$changelog_file" == *"${{ env.PR_NUMBER }}."* ]]; then
          rm ${{ env.FRAGMENT_PATH }}/${{ env.PR_NUMBER }}.*
        fi

        # Create changelog fragment with towncrier
        towncrier create -c "${{ env.PR_TITLE }}" $file

        # Configure git username & email
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

        modified=`git diff HEAD --name-only`
        echo "modified: $modified"

        if [ ! -z "$modified" ]; then
          # Add and commit fragment
          git add .
          git commit -m "adding fragment"
          git push
        fi