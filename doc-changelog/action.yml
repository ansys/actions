name: >
  Documentation Changelog

description: |
  Adds a newsfragment to the target repository using ``towncrier``
  containing the title and number of the pull request.

inputs:

  # Required inputs

  token:
    description: >
      GitHub token for doing a git commit & push
    required: true
    type: string

  # Optional inputs

  python-version:
    description: >
      Python version used for setting up Python.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      env:
        PR_BRANCH: ${{ github.event.pull_request.head.ref }}
      uses: actions/checkout@v4
      with:
        # Required to checkout branch from origin rather than remote
        ref: ${{ env.PR_BRANCH }}

    - name: "Set up Python ${{ inputs.python-version }}"
      env:
        PYTHON_VERSION: ${{ inputs.python-version }}
        PYTHON_CACHE: ${{ inputs.use-python-cache }}
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        use-cache: ${{ env.PYTHON_CACHE }}

    - name: "Install towncrier"
      shell: bash
      run: |
        python -m pip install --upgrade pip towncrier

    - name: "Get labels in PR"
      env:
        OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
        PR_NUMBER: ${{ github.event.number }}
        GH_TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
      shell: bash
      run: |
        pr_labels=$(gh api repos/${{ env.OWNER }}/${{ env.REPO_NAME }}/pulls/${{ env.PR_NUMBER }} --jq '.labels.[].name')
        echo $pr_labels
        echo "LABELS=$pr_labels" >> $GITHUB_ENV

    - name: "Set PR label environment variable"
      shell: python
      run: |
        import os

        pr_labels = {
          "enhancement": "added",
          "bug": "fixed",
          "dependencies": "dependencies",
          "maintenence": "changed"
        }

        existing_labels = ${{ env.LABELS }}

        # ${{ toJSON(github.event.pull_request.labels.*.name) }}

        def get_changelog_section(pr_labels, existing_labels):
          label_type = ""

          for key, value in pr_labels.items():
              if key in existing_labels:
                  label_type = value
                  return label_type

          label_type = "miscellaneous"
          return label_type

        github_env = os.getenv('GITHUB_ENV')

        with open(github_env, "a") as f:
            f.write(f"PR_LABEL={get_changelog_section(pr_labels, existing_labels)}")

    - name: "Remove PR fragment file if it already exists"
      env:
        PR_NUMBER: ${{ github.event.number }}
      shell: bash
      run: |
        file=`find . -type f -name "${{ env.PR_NUMBER }}.*.md"`

        # If the fragment file exists, then delete the file
        if [ ! -z "$file" ]; then
          echo "Removing $file"
          rm $file
        fi

    - name: "Create and commit towncrier fragment"
      env:
        PR_BRANCH: ${{ github.event.pull_request.head.ref }}
        PR_TITLE: "${{ github.event.pull_request.title }}"
        PR_NUMBER: ${{ github.event.number }}
      shell: bash
      run: |
        fragment="${{ env.PR_NUMBER }}.${{ env.PR_LABEL }}.md"

        # Create changelog fragment with towncrier
        towncrier create -c "${{ env.PR_TITLE }}" $fragment

        # Configure git username & email
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

        # Add towncrier fragment
        git add .

        modified=`git diff HEAD --name-only`
        echo "modified: $modified"

        if [ ! -z "$modified" ]; then
          # Commit and push fragment
          git commit -m "adding fragment"
          git push
        fi