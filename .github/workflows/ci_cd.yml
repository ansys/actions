name: GitHub CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'actions.docs.pyansys.com'
  test-library-name: 'pyansys-actions'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  label-syncer:
    name: Label syncer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: micnncim/action-label-syncer@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  labeler:
    name: Set labels
    needs: [label-syncer]
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

    - name: Label based on changed files
      uses: actions/labeler@v4
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        sync-labels: ''

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'doc') ||
        startsWith(github.event.pull_request.head.ref, 'docs')
      with:
        labels: documentation

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'maint') ||
        startsWith(github.event.pull_request.head.ref, 'no-ci') ||
        startsWith(github.event.pull_request.head.ref, 'ci')
      with:
        labels: maintenance

    - uses: actions-ecosystem/action-add-labels@v1
      if: startsWith(github.event.pull_request.head.ref, 'feat')
      with:
        labels: |
          enhancement

    - uses: actions-ecosystem/action-add-labels@v1
      if: |
        startsWith(github.event.pull_request.head.ref, 'fix') ||
        startsWith(github.event.pull_request.head.ref, 'patch')
      with:
        labels: bug

  commenter:
    runs-on: ubuntu-latest
    needs: [label-syncer, labeler]
    steps:
    - name: Suggest to add labels
      uses: peter-evans/create-or-update-comment@v2
      if: toJSON(github.event.pull_request.labels.*.name) == '{}'
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Please add one of the following labels to add this contribution to the Release Notes :point_down:
          - [bug](https://github.com/pyansys/actions/pulls?q=label%3Abug+)
          - [documentation](https://github.com/pyansys/actions/pulls?q=label%3Adocumentation+)
          - [enhancement](https://github.com/pyansys/actions/pulls?q=label%3Aenhancement+)
          - [good first issue](https://github.com/pyansys/actions/pulls?q=label%3Agood+first+issue)
          - [maintenance](https://github.com/pyansys/actions/pulls?q=label%3Amaintenance+)
          - [release](https://github.com/pyansys/actions/pulls?q=label%3Arelease+)

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: commenter
    steps:
      - name: "Run code style checks"
        uses: pyansys/actions/code-style@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    needs: code-style
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@v3

      - name: "Copy scripts into the tests/ dir"
        run: |
          mv scripts tests/tests_scripts/
          mv tests/tests_scripts/scripts/redirect.html tests/tests_scripts/index.html

      - name: "List all the content of the tests/ dir"
        run: ls -R tests

      - name: "Set up Python"
        uses: pyansys/actions/_setup-python@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-cache: false

      - name: "Update pip and install requirements"
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements/requirements_tests.txt

      - name: "Run tests"
        run: cd tests/tests_scripts && pytest -vv

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: commenter
    steps:
      - name: "Run documentation style checks"
        uses: pyansys/actions/doc-style@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Building documentation"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Build documentation"
        uses: pyansys/actions/doc-build@main
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  tests-build:
    name: "Test library build"
    runs-on: ubuntu-latest
    needs: tests
    steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v3

    - name: "Set up Python"
      uses: pyansys/actions/_setup-python@main
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}
        use-cache: false

    - name: "Isolate testing library"
      run: mv tests/${{ env.test-library-name }} ~/

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        cd ~/${{ env.test-library-name }}
        ls -R && python -m build && python -m twine check dist/*

    - name: "Upload distribution artifacts to GitHub artifacts"
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.test-library-name }}-artifacts
        path: ~/${{ env.test-library-name }}/dist/
        retention-days: 7

  tests-release-pypi-test:
    name: "Test release to Test PyPI"
    runs-on: ubuntu-latest
    needs: tests-build
    steps:
    - name: "Release to the test PyPI repository"
      uses: pyansys/actions/release-pypi-test@main
      with:
        library-name: ${{ env.test-library-name }}
        twine-username: "__token__"
        twine-token: ${{ secrets.PYANSYS_PYPI_TEST_PAT }}
        python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release-gitub:
    name: "Release to GitHub"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [doc-build, tests-release-pypi-test]
    steps:

    - name: "Download HTML documentation"
      uses: actions/download-artifact@v3
      with:
        name: documentation-html
        path: documentation-html

    - name: "Zip HTML documentation"
      uses: vimtor/action-zip@v1.1
      with:
        files: documentation-html
        dest: documentation-html.zip

    - name: "Download PDF documentation"
      uses: actions/download-artifact@v3
      with:
        name: documentation-pdf
        path: documentation-pdf

    - name: "Zip PDF documentation"
      uses: vimtor/action-zip@v1.1
      with:
        files: documentation-pdf
        dest: documentation-pdf.zip

    - name: "Display the structure of downloaded files"
      shell: bash
      run: ls -R

    - name: "Release to GitHub"
      uses: softprops/action-gh-release@v1
      with:
        files: |
          documentation-html.zip
          documentation-pdf.zip

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: release-gitub
    steps:
      - name: "Deploy stable documentation"
        uses: pyansys/actions/doc-deploy-stable@v4
        with:
            doc-artifact-name: 'documentation-html' 
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            python-version: ${{ env.MAIN_PYTHON_VERSION }}
