name: pull-request
on:
  pull_request:
    types: [opened, reopened, synchronize, edited, labeled]

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'actions.docs.ansys.com'
  PIP_EXTRA_INDEX_URL: 'https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/'
  LIBRARY_NAME: ansys-actions-flit

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  check-environment-approval-flit:
    name: Check environment approval poetry
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.block.outputs.environment }}
    steps:
      - name: Decide which environment should be used
        id: block
        uses: ansys/actions/check-environment-approval@main

  # NOTE: We do not allow dependabot to trigger the CI/CD pipeline automatically.
  # This is to mitigate supply chain attacks, where a malicious dependency update
  # could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  check-dependabot-pr-flit:
    needs: [check-environment-approval-flit]
    name: Manual approval (on dependabot PRs) poetry
    runs-on: ubuntu-latest
    environment: ${{ needs.check-environment-approval-flit.outputs.environment }}
    steps:
      - name: Proceed after approval
        if: ${{ needs.check-environment-approval-flit.outputs.environment == 'dependabot'}}
        run: |
          echo "::notice::Workflow approved."
      - name: Approval skipped
        if: ${{ needs.check-environment-approval-flit.outputs.environment == ''}}
        run: |
          echo "::notice::Workflow approval skipped."

  tests-flit:
    name: "Tests"
    runs-on: ${{ matrix.os }}
    needs: check-dependabot-pr-flit
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: "Build wheelhouse and perform smoke test for ${{ env.LIBRARY_NAME }}"
        uses: ansys/actions/build-wheelhouse@feat/extend-testing
        with:
          library-name: ${{ env.LIBRARY_NAME}}
          operating-system: ${{ matrix.os }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          working-directory: .ci/${{ env.LIBRARY_NAME }}
          attest-provenance: true

  build-flit:
    name: "Build library poetry"
    runs-on: ubuntu-latest
    needs: tests-flit
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: "Build library for ${{ env.LIBRARY_NAME }}"
        uses: ansys/actions/build-library@feat/extend-testing
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          attest-provenance: true
          working-directory: .ci/${{ env.LIBRARY_NAME }}