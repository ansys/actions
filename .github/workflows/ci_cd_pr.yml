name: pull-request
on:
  pull_request:
    types: [opened, reopened, synchronize, edited, labeled, closed]

env:
  MAIN_PYTHON_VERSION: '3.13'
  DOCUMENTATION_CNAME: 'actions.docs.ansys.com'
  PIP_EXTRA_INDEX_URL: 'https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/'

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  check-environment-approval:
    name: Check environment approval
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    outputs:
      environment: ${{ steps.block.outputs.environment }}
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Decide which environment should be used
        id: block
        uses: ./check-environment-approval

  # NOTE: We do not allow dependabot to trigger the CI/CD pipeline automatically.
  # This is to mitigate supply chain attacks, where a malicious dependency update
  # could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  check-dependabot-pr:
    needs: [check-environment-approval]
    name: Manual approval (on dependabot PRs)
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    environment: ${{ needs.check-environment-approval.outputs.environment }}
    steps:
      - name: Proceed after approval
        if: ${{ needs.check-environment-approval.outputs.environment == 'dependabot'}}
        run: |
          echo "::notice::Workflow approved."
      - name: Approval skipped
        if: ${{ needs.check-environment-approval.outputs.environment == ''}}
        run: |
          echo "::notice::Workflow approval skipped."

  labeler:
    name: "Labels"
    needs: check-dependabot-pr
    if: github.event.action != 'closed'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:

     - name: "Checkout project"
       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
       with:
        persist-credentials: false

     - name: "Sync labels"
       uses: micnncim/action-label-syncer@3abd5ab72fda571e69fffd97bd4e0033dd5f495c # v1.3.0
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       # HACK: skip if contributor does not have write permissions (forks)
       if: github.event.pull_request.head.repo.full_name == github.repository
       uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9 # v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  changelog-fragment:
    name: "Create changelog fragment"
    runs-on: ubuntu-latest
    needs: labeler
    if: github.event.action != 'closed'
    permissions:
      contents: read
      pull-requests: write
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./check-pr-title
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ./doc-changelog
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          use-conventional-commits: true
          use-default-towncrier-config: true
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: changelog-fragment
    if: github.event.action != 'closed'
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Run code style checks"
        uses: ./code-style
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          checkout: false

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: changelog-fragment
    if: github.event.action != 'closed'
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./doc-style
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkout: false

  doc-build:
    name: "Doc build"
    runs-on: ${{ matrix.os }}
    needs: doc-style
    if: github.event.action != 'closed'
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./doc-build
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          needs-quarto: true
          uploaded-artifact-name-prefix: documentation-${{ matrix.os }}
          checkout: false

  test-doc-build-pyansys-geometry:
    name: "Test doc-build action for PyAnsys Geometry on ${{ matrix.os.name }}"
    runs-on: ${{ matrix.os.name }}
    needs: doc-style
    if: github.event.action != 'closed'
    permissions:
      contents: read
      pull-requests: read
      packages: read
    strategy:
      matrix:
        os:
          - name: windows-latest
            container-image-tag: ghcr.io/ansys/geometry:core-windows-25.2
          - name: ubuntu-latest
            container-image-tag: ghcr.io/ansys/geometry:core-linux-25.2
    env:
      ANSRV_GEO_IMAGE_DOCS_TAG: ${{ matrix.os.container-image-tag }}
      ANSRV_GEO_PORT: 700
      ANSRV_GEO_LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
      GEO_CONT_NAME: ans_geo
    steps:

      - name: "Install Git and clone pyansys-geometry repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          repository: ansys/pyansys-geometry
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and launch geometry service
        shell: bash
        run: |
          docker pull ${ANSRV_GEO_IMAGE_DOCS_TAG}
          docker run --detach --name ${GEO_CONT_NAME} -e LICENSE_SERVER=${ANSRV_GEO_LICENSE_SERVER} -p ${ANSRV_GEO_PORT}:50051 ${ANSRV_GEO_IMAGE_DOCS_TAG}

      - name: "Clone ansys/actions into a different path"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: actions
          persist-credentials: false

      - name: Run Ansys documentation building action
        uses: ./actions/doc-build
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          add-pdf-html-docs-as-assets: true
          needs-quarto: true
          dependencies: 'pandoc'
          sphinxopts: '-j 1 -W --color'
          checkout: false
          uploaded-artifact-name-prefix: pyansys-geometry-documentation-${{ matrix.os.name }}
          skip-dependencies-cache: true

      - name: Stop the Geometry service
        if: always()
        run: |
          docker stop ${{ env.GEO_CONT_NAME }}
          docker logs ${{ env.GEO_CONT_NAME }}
          docker rm ${{ env.GEO_CONT_NAME }}

  test-doc-build-pydpf-composites:
    name: "Test doc-build action for PyDPF-Composites on ${{ matrix.os.name }}"
    runs-on: ${{ matrix.os.name }}
    needs: doc-style
    if: github.event.action != 'closed'
    permissions:
      contents: read
      pull-requests: read
      packages: read
    strategy:
      matrix:
        os:
#          Windows container images are not available on ghcr for pydpf-composites
#          - name: windows-latest
#            container-image-tag:
          - name: ubuntu-latest
            container-image-tag: latest
    env:
      PACKAGE_NAME: 'ansys-dpf-composites'
      PYDPF_COMPOSITES_DOCKER_CONTAINER_PORT: "50052"
    steps:

      - name: "Install Git and clone pyansys-geometry repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          repository: ansys/pydpf-composites
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Login in Github Container registry"
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up headless display
        uses: pyvista/setup-headless-display-action@7d84ae825e6d9297a8e99bdbbae20d1b919a0b19 # v4.2

      - name: "Pull and start dpf container"
        run: |
          docker pull ghcr.io/ansys/pydpf-composites:${{ matrix.os.container-image-tag }}
          docker run -d --restart always -p 50052:50052 -e ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }} -e ANSYS_DPF_ACCEPT_LA=Y ghcr.io/ansys/pydpf-composites:${{ matrix.os.container-image-tag }}

      - name: "Clone ansys/actions into a different path"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: actions
          persist-credentials: false

      - name: Run Ansys documentation building action
        uses: ./actions/doc-build
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          add-pdf-html-docs-as-assets: true
          needs-quarto: true
          dependencies: 'pandoc'
          sphinxopts: '--color -n -vW --keep-going'
          optional-dependencies-name: 'docs'
          group-dependencies-name: ''
          check-links: false
          checkout: false
          uploaded-artifact-name-prefix: pydpf-composites-documentation-${{ matrix.os.name }}

  doc-deploy-pr:
    name: "Deploy PR documentation"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: doc-build
    # Run when the PR is closed i.e. when doc-build job is skipped
    # Also run only when appropriate label is added
    if: |
      always() &&
      (needs.doc-build.result == 'success' || needs.doc-build.result == 'skipped') &&
      contains(github.event.pull_request.labels.*.name, 'deploy-pr-doc')
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: actions-checkout
          persist-credentials: false

      - name: "Check directory structure"
        run: |
          tree -L 3

      - uses: ./actions-checkout/doc-deploy-pr
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
          maximum-pr-doc-deployments: 10
          doc-artifact-name: documentation-ubuntu-latest-html

      # Hack, the peaceiris/actions-gh-pages action in _pr-doc-deployment overwrites any previous checkout,
      # causing the post step of the action to fail. Adding this checkout step ensures that the post step
      # can run successfully
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: actions-checkout
          persist-credentials: false

  actions-security:
    name: "Check actions security"
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./check-actions-security
        with:
          generate-summary: true
          token: ${{ secrets.GITHUB_TOKEN }}
          auditing-level: 'high'
          trust-ansys-actions: true
          checkout: false

  python-utilites-test:
    name: "Run all python utilities tests"
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: ./_setup-python
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-cache: false
          provision-uv: false
          prune-uv-cache: false

      - name: "Install pytest"
        run: |
          python -m pip install pytest

      - name: "Run all python utilities tests"
        run: |
          pytest -vv python-utils
