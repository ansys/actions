name: pull-request
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

env:
  MAIN_PYTHON_VERSION: '3.12'
  LIBRARY_NAME: 'ansys-actions'

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # NOTE: We do not allow dependabot to trigger the CI/CD pipeline automatically.
  # This is to mitigate supply chain attacks, where a malicious dependency update
  # could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  block-dependabot:
    runs-on: ubuntu-latest
    steps:
      - name: Exit if dependabot triggered the workflow
        if: github.triggering_actor == 'dependabot[bot]'
        run: |
          echo "::warning::Dependabot is not allowed to trigger this workflow. Please review carefully the changes before running the workflow manually."
          exit 1

  # NOTE: We do not allow pyansys-ci-bot to trigger the CI/CD pipeline automatically
  # on dependabot's PR. This is to mitigate supply chain attacks, where a malicious
  # dependency update could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  block-pyansys-ci-bot:
    needs: block-dependabot
    runs-on: ubuntu-latest
    steps:
      - name: Exit if pyansys-ci-bot triggered the workflow on dependabot's PR
        if: github.triggering_actor == 'pyansys-ci-bot' && startsWith(github.head_ref, 'dependabot')
        run: |
          echo "::warning::PyAnsys CI bot is not allowed to trigger this workflow in dependabot's PR. Please review carefully the changes before running the workflow manually."
          exit 1

  check-dependabot-pr:
    needs: block-pyansys-ci-bot
    if: startsWith(github.head_ref, 'dependabot')
    name: Manual approval
    runs-on: ubuntu-latest
    environment: dependabot
    steps:
      - name: Proceed after approval
        run: |
          echo "::notice::Workflow approved."

  labeler:
    name: "Labels"
    needs: check-dependabot-pr
    if: success() || needs.check-dependabot-pr.result == 'skipped'
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

     - name: "Checkout project"
       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

     - name: "Sync labels"
       uses: micnncim/action-label-syncer@3abd5ab72fda571e69fffd97bd4e0033dd5f495c # v1.3.0
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       # HACK: skip if contributor does not have write permissions (forks)
       if: github.event.pull_request.head.repo.full_name == github.repository
       uses: actions/labeler@8558fd74291d67161a8a78ce36a881fa63b766a9 # v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  changelog-fragment:
    name: "Create changelog fragment"
    runs-on: ubuntu-latest
    needs: labeler
    if: success() || needs.labeler.result == 'success'
    permissions:
      contents: read
      pull-requests: write
    steps:

      - uses: ansys/actions/check-pr-title@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ansys/actions/doc-changelog@main
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          use-conventional-commits: true
          use-default-towncrier-config: true
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: changelog-fragment
    if: success() || needs.changelog-fragment.result == 'success'
    steps:
      - name: "Run code style checks"
        uses: ansys/actions/code-style@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: changelog-fragment
    if: success() || needs.changelog-fragment.result == 'success'
    steps:
      - uses: ansys/actions/doc-style@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
    needs: doc-style
    if: success() || needs.doc-style.result == 'success'
    steps:
      - uses: ansys/actions/doc-build@main
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          needs-quarto: true

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    needs: code-style
    if: success() || needs.code-style.result == 'success'
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}
        use-cache: false

    - name: "Isolate testing library"
      run: mv .ci/${{ env.LIBRARY_NAME }} ~/

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        cd ~/${{ env.LIBRARY_NAME }}
        ls -R && python -m build && python -m twine check dist/*

    - name: "Upload distribution artifacts to GitHub artifacts"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: ~/${{ env.LIBRARY_NAME }}/dist/
        retention-days: 7

    - name: "Release to the test PyPI repository"
      uses: ansys/actions/release-pypi-test@main
      with:
        library-name: ${{ env.LIBRARY_NAME }}
        use-trusted-publisher: true
