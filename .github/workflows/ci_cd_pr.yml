name: pull-request
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

env:
  MAIN_PYTHON_VERSION: '3.12'
  LIBRARY_NAME: 'ansys-actions'

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

     - name: "Checkout project"
       uses: actions/checkout@v4

     - name: "Sync labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       # HACK: skip if contributor does not have write permissions (forks)
       if: github.event.pull_request.head.repo.full_name == github.repository
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  pr-title-style:
    name: "Pull-request title style"
    runs-on: ubuntu-latest
    needs: labeler
    steps:
      - uses: ansys/actions/check-pr-title@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: pr-title-style
    steps:
      - name: "Run code style checks"
        uses: ansys/actions/code-style@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: pr-title-style
    steps:
      - uses: ansys/actions/doc-style@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - uses: ansys/actions/doc-build@main
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          needs-quarto: true

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    needs: code-style
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}
        use-cache: false

    - name: "Isolate testing library"
      run: mv .ci/${{ env.LIBRARY_NAME }} ~/

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        cd ~/${{ env.LIBRARY_NAME }}
        ls -R && python -m build && python -m twine check dist/*

    - name: "Upload distribution artifacts to GitHub artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: ~/${{ env.LIBRARY_NAME }}/dist/
        retention-days: 7

    - name: "Release to the test PyPI repository"
      uses: ansys/actions/release-pypi-test@main
      with:
        library-name: ${{ env.LIBRARY_NAME }}
        use-trusted-publisher: true
