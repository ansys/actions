name: release
on:
  push:
    tags:
      - "v*.*.*"

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'actions.docs.ansys.com'
  LIBRARY_NAME: 'ansys-actions'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:

  rolling-release:
    name: "Rolling release"
    runs-on: ubuntu-latest
    outputs:
      tag_major: ${{ steps.current-branch-tag-validity.outputs.MAJOR }}
    env:
      REF_NAME: ${{ github.ref_name }}
      BASE_REF: ${{ github.event.base_ref }}
    permissions:
      contents: write
    steps:

    - name: "Checkout repository" # zizmor: ignore[artipacked] git credentials need to be persisted on this job
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-tags: true
        ref: ${{ github.ref }}

    - name: "Configure git"
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: "Decompose tag into components"
      id: tag-components
      shell: bash
      run: |
        if [[ "$REF_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+((a|b|rc)[0-9]+)?$ ]]; then
          # Split the tag into its components
          IFS='.' read -ra PARTS <<< "$REF_NAME"
          echo "V_AND_MAJOR=${PARTS[0]}" >> $GITHUB_OUTPUT
          echo "MINOR=${PARTS[1]}" >> $GITHUB_OUTPUT
          echo "PATCH=${PARTS[2]}" >> $GITHUB_OUTPUT
            if [[ "$REF_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "PRE_RELEASE=false" >> ${GITHUB_OUTPUT}
            else
              echo "PRE_RELEASE=true" >> ${GITHUB_OUTPUT}
            fi
        else
          echo "Invalid tag format. Expected vX.Y.Z[{a|b|rc}N] but got $REF_NAME"
          exit 1
        fi

    - name: "Check tag is valid for current branch"
      id: current-branch-tag-validity
      env:
        V_AND_MAJOR: ${{ steps.tag-components.outputs.V_AND_MAJOR }}
        MINOR: ${{ steps.tag-components.outputs.MINOR }}
      run: |
        # Remove leading "v" from env.X
        MAJOR="${V_AND_MAJOR#v}"
        echo "MAJOR=${MAJOR}" >> $GITHUB_OUTPUT
        if [[ "$BASE_REF" != "refs/heads/release/${MAJOR}.${MINOR}" ]]; then
          echo "::error::Tag $REF_NAME does not match branch version. wrong branch."
          exit 1
        fi

    - name: "Remove v${{ steps.current-branch-tag-validity.outputs.MAJOR }} tag"
      if: steps.tag-components.outputs.PRE_RELEASE == 'false'
      env:
        MAJOR: ${{ steps.current-branch-tag-validity.outputs.MAJOR }}
      run: |
        git push --delete origin v${MAJOR} && \
          echo "Deleted v${MAJOR} tag" || \
          echo "Tag v${MAJOR} not found"

    - name: "Remove v${{ steps.current-branch-tag-validity.outputs.MAJOR }}.${{ steps.tag-components.outputs.MINOR }} tag"
      if: steps.tag-components.outputs.PRE_RELEASE == 'false'
      env:
        MAJOR: ${{ steps.current-branch-tag-validity.outputs.MAJOR }}
        MINOR: ${{ steps.tag-components.outputs.MINOR }}
      run: |
        git push --delete origin v${MAJOR}.${MINOR} && \
          echo "Deleted v${MAJOR}.${MINOR} tag" || \
          echo "Tag v${MAJOR}.${MINOR} not found"

    - name: "Create new tags"
      if: steps.tag-components.outputs.PRE_RELEASE == 'false'
      env:
        MAJOR: ${{ steps.current-branch-tag-validity.outputs.MAJOR }}
        MINOR: ${{ steps.tag-components.outputs.MINOR }}
      run: |
        git tag v${MAJOR}.${MINOR}
        git tag v${MAJOR}
        git push origin v${MAJOR}.${MINOR}
        git push origin v${MAJOR}

  changelog-deployment:
    name: "Changelog"
    needs: rolling-release
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-deploy-changelog@main
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: rolling-release
    steps:
      - uses: ansys/actions/code-style@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: rolling-release
    permissions:
      contents: write
    steps:
      - uses: ansys/actions/doc-style@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - uses: ansys/actions/doc-build@main
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          needs-quarto: true

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    needs: code-style
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}
        use-cache: false
        provision-uv: false
        prune-uv-cache: false

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        python -m build .ci/${LIBRARY_NAME}
        ls -R .ci/${LIBRARY_NAME}/dist
        python -m twine check .ci/${LIBRARY_NAME}/dist/**

    - name: "Upload distribution artifacts"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: .ci/${{ env.LIBRARY_NAME }}/dist
        retention-days: 7

  release:
    name: "Release"
    runs-on: ubuntu-latest
    needs: [doc-build, tests, rolling-release]
    env:
        MAJOR: ${{ needs.rolling-release.outputs.tag_major }}
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Download distribution artifacts"
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: dist

    - name: "Download HTML documentation"
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: documentation-html
        path: documentation-html

    - name: "Zip HTML documentation"
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: documentation-html
        dest: documentation-html.zip

    - name: "Download PDF documentation"
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: documentation-pdf
        path: documentation-pdf

    - name: "Zip PDF documentation"
      uses: vimtor/action-zip@1379ea20d4c5705669ba81fd626dd01b1c738f26 # v1.2
      with:
        files: documentation-pdf
        dest: documentation-pdf.zip

    - name: "Display the structure of downloaded files"
      shell: bash
      run: ls -R

    - name: "Upload artifacts to test PyPI using trusted publisher"
      uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
      with:
        repository-url: "https://test.pypi.org/legacy/"
        print-hash: true
        skip-existing: false
        verbose: true

    - name: "Generate link to migration guide for current release"
      id: link-migration-guide
      run: |
        BASE_LINK="https://actions.docs.ansys.com/version/stable/migrations/index.html#version-v"
        # Append version number to point to specific entry in the migration guide
        LINK="${BASE_LINK}${MAJOR}"
        echo "LINK=${LINK}" >> $GITHUB_OUTPUT

    - name: "Release to GitHub"
      uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
      with:
        body: >
          If you are migrating the actions of your project to a new major release, breaking changes can be expected.

          To make sure everything is compatible with your current workflow, refer to the
          [Migration Guide for v${{ env.MAJOR }}](${{ steps.link-migration-guide.outputs.LINK }}) to find out more
          about new features and potential breaking changes.
        generate_release_notes: true
        files: |
          documentation-html.zip
          documentation-pdf.zip

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write
    steps:
      - uses: ansys/actions/doc-deploy-stable@main
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
