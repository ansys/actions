name: release
on:
  push:
    tags:
      - "v*.*.*"

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'actions.docs.ansys.com'
  LIBRARY_NAME: 'ansys-actions'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  rolling-release:
    name: "Rolling release"
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        ref: ${{ github.ref }}

    - name: "Configure git"
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: "Decompose tag into components"
      run: |
        if [[ ${{ github.ref_name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          # Split the tag into its components
          IFS='.' read -ra PARTS <<< "${{ github.ref_name }}"
          echo "V_AND_MAJOR=${PARTS[0]}" >> $GITHUB_ENV
          echo "MINOR=${PARTS[1]}" >> $GITHUB_ENV
          echo "PATCH=${PARTS[2]}" >> $GITHUB_ENV
        else
          echo "Invalid tag format. Expected vX.Y.Z but got ${{ github.ref_name }}"
          exit 1
        fi

    - name: "Check tag is valid for current branch"
      run: |
        # Remove leading "v" from env.X
        V_AND_MAJOR=${{ env.V_AND_MAJOR }}
        MAJOR="${V_AND_MAJOR#v}"
        echo "MAJOR=${MAJOR}" >> $GITHUB_ENV
        if [[ ${{ github.event.base_ref }} != "refs/heads/release/${MAJOR}.${{ env.MINOR }}" ]]; then
          echo "::error::Tag ${{ github.ref_name }} does not match branch version. wrong branch."
          exit 1
        fi

    - name: "Remove MAJOR tag"
      run: |
        if git tag -l | grep -q "^v${{ env.MAJOR }}"; then
          git push --delete origin v${{ env.MAJOR }}
        else
          echo -e "Tag v${{ env.MAJOR }} does not exist, skipping deletion."
        fi

    - name: "Remove MAJOR.MINOR tag"
      run: |
        if git tag -l | grep -q "^v${{ env.MAJOR }}\.${{ env.MINOR }}"; then
          git push --delete origin v${{ env.MAJOR }}.${{ env.MINOR }}
        else
          echo -e "Tag v${{ env.MAJOR }}.${{ env.MINOR }} does not exist, skipping deletion."
        fi

    - name: "Create new tags"
      run: |
        git tag v${{ env.MAJOR }}.${{ env.MINOR }}
        git tag v${{ env.MAJOR }}
        git push origin v${{ env.MAJOR }}.${{ env.MINOR }}
        git push origin v${{ env.MAJOR }}

  changelog-deployment:
    name: "Changelog"
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-deploy-changelog@main
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: rolling-release
    steps:
      - uses: ansys/actions/code-style@main
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    needs: rolling-release
    steps:
      - uses: ansys/actions/doc-style@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - uses: ansys/actions/doc-build@main
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          needs-quarto: true

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    needs: code-style
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@v4

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}
        use-cache: false

    - name: "Isolate testing library"
      run: mv .ci/${{ env.LIBRARY_NAME }} ~/

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        cd ~/${{ env.LIBRARY_NAME }}
        ls -R && python -m build && python -m twine check dist/*

    - name: "Upload distribution artifacts to GitHub artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: ~/${{ env.LIBRARY_NAME }}/dist/
        retention-days: 7

    - name: "Release to the test PyPI repository"
      uses: ansys/actions/release-pypi-test@main
      with:
        library-name: ${{ env.LIBRARY_NAME }}
        use-trusted-publisher: true

  release:
    name: "Release to GitHub"
    runs-on: ubuntu-latest
    needs: [doc-build, tests]
    steps:

    - name: "Download HTML documentation"
      uses: actions/download-artifact@v4
      with:
        name: documentation-html
        path: documentation-html

    - name: "Zip HTML documentation"
      uses: vimtor/action-zip@v1.2
      with:
        files: documentation-html
        dest: documentation-html.zip

    - name: "Download PDF documentation"
      uses: actions/download-artifact@v4
      with:
        name: documentation-pdf
        path: documentation-pdf

    - name: "Zip PDF documentation"
      uses: vimtor/action-zip@v1.2
      with:
        files: documentation-pdf
        dest: documentation-pdf.zip

    - name: "Display the structure of downloaded files"
      shell: bash
      run: ls -R

    - name: "Release to GitHub"
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        files: |
          documentation-html.zip
          documentation-pdf.zip

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: ansys/actions/doc-deploy-stable@main
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
