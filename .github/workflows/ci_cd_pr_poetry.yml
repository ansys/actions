name: pull-request-poetry
on:
  pull_request:
    types: [opened, reopened, synchronize, edited, labeled]

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: 'actions.docs.ansys.com'
  PIP_EXTRA_INDEX_URL: 'https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/'
  LIBRARY_NAME: ansys-actions-poetry

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  check-environment-approval-poetry:
    name: Check environment approval poetry
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.block.outputs.environment }}
    steps:
      - name: Decide which environment should be used
        id: block
        uses: ansys/actions/check-environment-approval@main

  # NOTE: We do not allow dependabot to trigger the CI/CD pipeline automatically.
  # This is to mitigate supply chain attacks, where a malicious dependency update
  # could execute arbitrary code in our build environment.
  # Dependabot PRs must be reviewed carefully and approved manually before
  # running the CI.
  check-dependabot-pr-poetry:
    needs: [check-environment-approval-poetry]
    name: Manual approval (on dependabot PRs) poetry
    runs-on: ubuntu-latest
    environment: ${{ needs.check-environment-approval-poetry.outputs.environment }}
    steps:
      - name: Proceed after approval
        if: ${{ needs.check-environment-approval-poetry.outputs.environment == 'dependabot'}}
        run: |
          echo "::notice::Workflow approved."
      - name: Approval skipped
        if: ${{ needs.check-environment-approval-poetry.outputs.environment == ''}}
        run: |
          echo "::notice::Workflow approval skipped."

  tests-poetry:
    name: "Tests poetry"
    runs-on: ${{ matrix.os }}
    needs: check-dependabot-pr-poetry
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: "Build wheelhouse and perform smoke test for ${{ env.LIBRARY_NAME }}"
        uses: ansys/actions/build-wheelhouse@feat/extend-testing
        with:
          library-name: ${{ env.LIBRARY_NAME}}
          operating-system: ${{ matrix.os }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          working-directory: .ci/${{ env.LIBRARY_NAME }}
          attest-provenance: true

  build-poetry:
    name: "Build library poetry"
    runs-on: ubuntu-latest
    needs: tests-poetry
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: "Build library for ${{ env.LIBRARY_NAME }}"
        uses: ansys/actions/build-library@feat/extend-testing
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          attest-provenance: true
          working-directory: .ci/${{ env.LIBRARY_NAME }}

  test-release-poetry:
    name: "Test release poetry"
    runs-on: ubuntu-latest
    needs: build-poetry
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Download distribution artifacts"
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: dist

    - name: "Upload artifacts to test PyPI using trusted publisher"
      uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
      with:
        repository-url: "https://test.pypi.org/legacy/"
        print-hash: true
        skip-existing: true
        verbose: true