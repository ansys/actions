name: night

on:
  schedule:
    - cron: '0 0 * * *'

env:
  MAIN_PYTHON_VERSION: '3.12'
  LIBRARY_NAME: 'ansys-actions'
  DOCUMENTATION_CNAME: 'actions.docs.ansys.com'

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  doc-build:
    name: "Doc build"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-build@main
        with:
          skip-install: true
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false
          needs-quarto: true

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [doc-build]
    steps:
      - uses: ansys/actions/doc-deploy-dev@main
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Install Git and clone project"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}
        use-cache: false

    - name: "Install build and twine"
      shell: bash
      run: |
        python -m pip install build twine

    - name: "Build distribution artifacts and check their health"
      shell: bash
      run: |
        python -m build .ci/${{ env.LIBRARY_NAME }}
        ls -R .ci/${{ env.LIBRARY_NAME }}/dist
        python -m twine check .ci/${{ env.LIBRARY_NAME }}/dist/**

    - name: "Upload distribution artifacts"
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: .ci/${{ env.LIBRARY_NAME }}/dist
        retention-days: 7

  test-release:
    name: "Test release"
    runs-on: ubuntu-latest
    needs: tests
    if: success() || needs.tests.result == 'success'
    permissions:
      id-token: write
      contents: write
    steps:

    - name: "Download distribution artifacts"
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: dist

    - name: "Upload artifacts to test PyPI using trusted publisher"
      uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
      with:
        repository-url: "https://test.pypi.org/legacy/"
        print-hash: true
        skip-existing: true
        verbose: true
