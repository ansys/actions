[
    {
        "objectID": "index",
        "href": "index.html#ansys-actions",
        "title": "Ansys actions",
        "section": "Ansys actions",
        "text": "Ansys CI-CD MIT\nA repository containing a collection of GitHub Workflows to be\nreused by projects in the Ansys ecosystem.\nAdapting to a new version?\nIf you are adapting to a new version of the actions, see the\nmigration_guide.\nFor more information on available actions and how to use them,\nsee each of these cards:\nStyle actions verify code and documentation.\nTests actions allow to run the test suite.\nDocumentation actions build and deploy the documentation.\nLicense actions allows to verify that the project’s dependencies only contain valid licenses.\nBuild actions allow for building artifacts.\nRelease actions provide for releasing the various artifacts.\nHousekeeping actions provide for general repository operations such as package cleanup.\nVulnerabilities actions provide for actively checking library and third party vulnerabilities.\nAnsys actions"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#style-actions",
        "title": "Style actions",
        "section": "Style actions",
        "text": "Style actions verify code and documentation quality compliance\nwith PyAnsys guidelines.\nStyle actions"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#code-style-action",
        "title": "Style actions > Code style action",
        "section": "Code style action",
        "text": "This action evaluates the code quality of your project by using pre-commit. The action installs and runs\npre-commit. It is assumed that your project contains a\n.pre-commit-config.yaml file in the root directory. The action can also\nbe extended to lint docker files that are contained in the docker directory\nand the .devcontainer directory.\nIf docker lint is enabled and directories docker or .devcontainer exist,\nthe action will fail if it doesn’t find a Dockerfile.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npython-version\nPython version used for installing and running pre-commit.\nFalse\nstring\n3.10\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\npre-commit-version\nThe version of pre-commit to install.\nFalse\nstring\n3.8.0\ndocker-lint\nExtend the workflow to lint Dockerfile(s).\nFalse\nbool\nFalse\ndocker-recursive\nSearch for Dockerfile(s) recursively. Only applies to allowed\ndirectories, i.e. docker and .devcontainer.\nFalse\nbool\nFalse\ndocker-error-level\nFail docker-style action based on hadolint output (-1: never, 0: error,\n1: warning, 2: info)\nFalse\nint\n2\nskip-install\nWhether to skip the installation of the project or not. If true, the\nproject is not installed. If false, the project is installed. By\ndefault, the project is not installed.\nFalse\nboolean\nTrue\nshow-diff-on-failure\nWhether to show the diff when a pre-commit hook fails.\nFalse\nboolean\nTrue\nCode style action\npre-commit\n.pre-commit-config.yaml\npre-commit\ntrue\nfalse\ntrue\nfalse"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#examples",
        "title": "Style actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#doc-style-action",
        "title": "Style actions > Doc style action",
        "section": "Doc style action",
        "text": "Check documentation style using Vale. This action is a\nwrapper on top of the errata-ai/vale-action.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ntoken\nThe token value used to authorize Vale to add comments and suggestions in\nthe file section.\nTrue\nstring\nfiles\nPath to the directory containing the documentation files.\nFalse\nstring\ndoc\nvale-config\nPath to the Vale configuration file.\nFalse\nstring\ndoc/.vale.ini\nvale-version\nVersion number for Vale.\nFalse\nstring\n3.4.1\ntoml-version\nToml version used for retrieving the towncrier directory.\nFalse\nstring\n0.10.2\nignore-changelogd\nWhether or not to ignore markdown files in doc/changelog.d/.\nFalse\nbool\nTrue\ncheckout\nWhether to clone the repository in the CI/CD machine. Default value is\ntrue.\nFalse\nboolean\nTrue\nDoc style action\ntrue"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#examples",
        "title": "Style actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#docker-style-action",
        "title": "Style actions > Docker style action",
        "section": "Docker style action",
        "text": "Evaluate the quality of your project Dockerfile(s) by using hadolint. This action can be used to\nlint Dockerfile(s) from multiple directories, see input “directory”\ndescription. The action uses hadolint-gh-action behind the scenes.\nIf you want to evaluate multiple Dockerfiles contained in various\ndirectories of the provided directory, use the recursive option.\nWhen linting a Dockerfile dedicated to Windows, one should use hadolint\nshell pragma to avoid false positives from ShellCheck, see hadolint shell pragma.\nThis action emphasizes the fact of having Dockerfile(s) contained inside the\n‘docker’ directory in the root of the project.\nThis action only looks for docker files named Dockerfile.\nA docker file like Dockerfile.linux will not be linted.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ndirectory\nDirectory from which to search for Dockerfile(s). You can pass multiple\ndirectories for processing by separating them with spaces, e.g.\n“docker .devcontainer”.\nFalse\nstring\ndocker\nrecursive\nSearch for Dockerfile(s) recursively.\nFalse\nbool\nFalse\nerror-level\nFail action based on hadolint output (-1: never, 0: error, 1: warning,\n2: info)\nFalse\nint\n2\ncheckout\nWhether to clone the repository in the CI/CD machine. Default value is\ntrue.\nFalse\nboolean\nTrue\nDocker style action\ntrue"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#examples",
        "title": "Style actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#pull-request-title-action",
        "title": "Style actions > Pull request title action",
        "section": "Pull request title action",
        "text": "Action that checks if the title of the pull request is following the\nconventional commits standard.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ntoken\nThe token value used to authorize Vale to add comments and suggestions in\nthe file section.\nTrue\nstring\nuse-upper-case\nUse of uppercase letters in the “type” field of the commit.\nFor example, “FIX!: fix server crash issue” would be a valid commit.\nExpected type are upper cases of conventional commit types.\nFalse\nboolean\nFalse\nPull request title action"
    },
    {
        "objectID": "style-actions/index",
        "href": "style-actions/index.html#examples",
        "title": "Style actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "migrations/docs-deploy-changelog-setup",
        "href": "migrations/docs-deploy-changelog-setup.html#doc-deploy-changelog-action-setup",
        "title": "Doc-deploy-changelog action setup",
        "section": "Doc-deploy-changelog action setup",
        "text": "When a new tag is pushed, the doc-deploy-changelog action generates a new section of the CHANGELOG.md file\nif fragment files exist in their designated directory, for example doc/changelog.d. By default, the\nCHANGELOG.md file is updated in the release branch corresponding to the tag being pushed, such as release/0.1,\nand a pull request is created to merge the CHANGELOG update and deleted fragment files into main.\nUse the following link to set up the ansys/actions/doc-changelog action before setting up the doc-deploy-changelog action: docs_changelog_action_setup\nOnce the doc-changelog action is done being set up, continue with the doc-deploy-changelog action setup:\nAdd the doc-deploy-changelog as the first job of the ci_cd.yml file, and make the update-changelog job a requirement of the release job:\nPyAnsys CI Bot needs to be an Admin of the repository to run the doc-deploy-changelog action.\nOptional - Add the package line to the tool.towncrier section of the pyproject.toml. This is the same as the name under tool.flit.module:\nDoc-deploy-changelog action setup\ndoc-deploy-changelog\nCHANGELOG.md\ndoc/changelog.d\nCHANGELOG.md\nrelease/0.1\nansys/actions/doc-changelog\ndoc-deploy-changelog\ndoc-changelog\ndoc-deploy-changelog\ndoc-deploy-changelog\nci_cd.yml\nupdate-changelog\nrelease\npackage\ntool.towncrier\npyproject.toml\ntool.flit.module"
    },
    {
        "objectID": "migrations/docs-changelog-setup",
        "href": "migrations/docs-changelog-setup.html#doc-changelog-action-setup",
        "title": "Doc-changelog action setup",
        "section": "Doc-changelog action setup",
        "text": "The release notes for your project can either be in your documentation or the CHANGELOG.md file.\nFollow the instructions in the update the workflow section to add the ansys/actions/doc-changelog action\nto your workflow, and then choose between adding the release notes in your documentation\nor the CHANGELOG.md file.\nDoc-changelog action setup\nCHANGELOG.md\nansys/actions/doc-changelog\nCHANGELOG.md"
    },
    {
        "objectID": "migrations/docs-changelog-setup",
        "href": "migrations/docs-changelog-setup.html#update-the-workflow",
        "title": "Doc-changelog action setup > Update the workflow",
        "section": "Update the workflow",
        "text": "Update the .github/workflows/label.yml file to use the changelog action.\nChange the pull_request trigger at the top of the preceding .yml file so that it lists the pull request actions that cause the workflows to run:\nAt the end of the .github/workflows/label.yml file, add the following lines for the changelog action:\nNext, follow the instructions to create release notes in your documentation or CHANGELOG.md file depending on your preference.\nUpdate the workflow\n.github/workflows/label.yml\npull_request\n.yml\n.github/workflows/label.yml"
    },
    {
        "objectID": "migrations/docs-changelog-setup",
        "href": "migrations/docs-changelog-setup.html#include-the-release-notes-in-your-documentation",
        "title": "Doc-changelog action setup > Include the release notes in your documentation",
        "section": "Include the release notes in your documentation",
        "text": "Create the doc/changelog.d directory and then within it add a file named changelog_template.jinja that contains the following lines:\nCreate a new file named changelog.rst in the doc/source directory. Add the following lines to the file:\nIf your project previously used CHANGELOG.md to record the release notes, change the description under “Release notes,” replacing {org-name} and {repo-name} with the name of the organization and repository respectively, and {latest-version} with the most recent version in your CHANGELOG.md file:\nAdd changelog to the toctree list in the doc/source/index.rst file. changelog is placed last in the toctree list, so the “Release notes” tab is last in the documentation.\nAdd the following lines to the doc/source/conf.py file, replacing {org-name} and {repo-name} with the name of the organization and repository respectively:\nThis assumes the following code already exists in the doc/source/conf.py file:\n5. Add the following lines to the pyproject.toml file, replacing {org-name} and {repo-name} with the name of the organization and repository respectively.\nAlso, replace ansys.<product>.<library> with the name under tool.flit.module. For example, ansys.geometry.core.\nIf empty, the previous CHANGELOG.md file can be removed from the repository, as the changelog is now part of the documentation.\nHowever, if the CHANGELOG.md file is kept, it can be adapted to include the link to the documentation changelog.\nFor example, the CHANGELOG.md file could look like this:\nReference pull requests for the changes can be found in the PyAnsys Geometry and PyMechanical repositories.\nThe PyAnsys Geometry pull request includes some other changes, but the changelog implementation is the same as described in this document.\nInclude the release notes in your documentation\ndoc/changelog.d\nchangelog_template.jinja\nchangelog.rst\ndoc/source\nCHANGELOG.md\n{org-name}\n{repo-name}\n{latest-version}\nCHANGELOG.md\nchangelog\ndoc/source/index.rst\nchangelog\ntoctree\ndoc/source/conf.py\n{org-name}\n{repo-name}\ndoc/source/conf.py\npyproject.toml\n{org-name}\n{repo-name}\nansys.<product>.<library>\ntool.flit.module\nansys.geometry.core\nCHANGELOG.md\nCHANGELOG.md\nCHANGELOG.md"
    },
    {
        "objectID": "migrations/docs-changelog-setup",
        "href": "migrations/docs-changelog-setup.html#include-the-release-notes-in-changelogmd",
        "title": "Doc-changelog action setup > Include the release notes in CHANGELOG.md",
        "section": "Include the release notes in CHANGELOG.md",
        "text": "Create the doc/changelog.d directory and then within it add a file named changelog_template.jinja that contains the following lines:\nAdd the following lines to the CHANGELOG.md file, replacing {org-name} and {repo-name} with the name of the organization and repository respectively:\nIf the CHANGELOG.md file already has sections for previous releases, make sure to put the\n\"towncrier release notes start\" comment before the release sections. For example:\n3. Add the following lines to the pyproject.toml file, replacing {repo-name} with the name of the repository.\nAlso, replace ansys.<product>.<library> with the name under tool.flit.module. For example, ansys.geometry.core.\nA reference pull request for these changes can be found in the PyAnsys Geometry #1023 pull request.\nInclude the release notes in CHANGELOG.md\nCHANGELOG.md\ndoc/changelog.d\nchangelog_template.jinja\nCHANGELOG.md\n{org-name}\n{repo-name}\nCHANGELOG.md\n\"towncrier release notes start\"\npyproject.toml\n{repo-name}\nansys.<product>.<library>\ntool.flit.module\nansys.geometry.core"
    },
    {
        "objectID": "migrations/docs-changelog-setup",
        "href": "migrations/docs-changelog-setup.html#towncrier-commands",
        "title": "Doc-changelog action setup > towncrier commands",
        "section": "towncrier commands",
        "text": "These commands are helpful for creating changelog fragment files manually, as well as building your CHANGELOG.md file\nwith the fragments in the doc/changelog.d directory.\nCreate a changelog file manually:\n“Added a feature” adds the content of the file named 1.added.md.\nThe number one in the “1.added.md” file is the pull request number, and “added” is a subsection\nunder the released version. For example, CHANGELOG.md would look like this if\nthe preceding MD file only existed in the changelog.d directory:\nWhen you are ready to do a release for your repository, set up the ansys/actions/doc-deploy-changelog action\nto automate the process of generating the changelog. If you want to do it manually, run the following command to\nupdate the CHANGELOG.md file with the files in the changelog.d directory, replacing {version} with your\nrelease number. For example, 0.10.8. Do not include “v” in the version:\nIf you want to update the CHANGELOG.md file but keep the files in the changelog.d directory, run this command:\nIf you only want to preview the changelog and not make changes to the CHANGELOG.md file,\nrun the following command:\ntowncrier commands\ntowncrier\nCHANGELOG.md\ndoc/changelog.d\n1.added.md\nCHANGELOG.md\nchangelog.d\nansys/actions/doc-deploy-changelog\nCHANGELOG.md\nchangelog.d\n{version}\n0.10.8\nCHANGELOG.md\nchangelog.d\nCHANGELOG.md"
    },
    {
        "objectID": "migrations/docs-style-vale-version-update",
        "href": "migrations/docs-style-vale-version-update.html#doc-style-action---migrating-from-vale-2x-to-3x",
        "title": "Doc-style action - migrating from Vale 2.X to 3.X",
        "section": "Doc-style action - migrating from Vale 2.X to 3.X",
        "text": "When migrating ansys/actions/doc-style from v5 to higher versions, the default Vale version is upgraded to v3.\nCertain changes must be made to the repository to ensure that the doc-style action performs without issues.\nAdditionally, it is possible to use ansys/actions older than v5 while utilizing Vale v3\nas input for the doc-style action like below.\nIn any of the preceding conditions, there are two mandatory changes and one optional (depending on\nthe repository setup) needs to implemented:\nUpdate Vocab/ANSYS path\nIn order to comply with the requirements of Vale v3, it is necessary to update the vocabularies\npath under the doc/styles directory. Specifically, the default vocabularies path should be modified from\nVocab/ANSYS to config/vocabularies/ANSYS. This adjustment ensures that Vale can locate the required vocabulary files.\nUpdate .gitignore\nIf your repository has .gitignore files under styles folder, please update them according to vocabularies changes\nTurn off Vale.Terms\nLocate the section in your doc/.vale.ini file where styles are applied.\nAdd Vale.Terms = NO under the section where styles are applied, typically marked with [*.{rst}].\nUpdate codespell hook\nIf your repository includes a codespell hook in the .pre-commit-config.yaml file,\nutilizing the accept.txt file, it necessitates modification to reflect the new path\nas provided below.\nFinally, verify that the doc-style action is functioning correctly with the latest changes applied.\nRun the action and ensure that the documentation style checks are performed without any issues.\nDoc-style action - migrating from Vale 2.X to 3.X\n2.X\n3.X\nansys/actions/doc-style\nv5\nv3\ndoc-style\nansys/actions\nv5\nv3\ndoc-style\nVocab/ANSYS\nv3\ndoc/styles\nVocab/ANSYS\nconfig/vocabularies/ANSYS\n.gitignore\n.gitignore\nstyles\nVale.Terms\ndoc/.vale.ini\nVale.Terms = NO\n[*.{rst}]\ncodespell\ncodespell\n.pre-commit-config.yaml\naccept.txt\ndoc-style"
    },
    {
        "objectID": "housekeeping-actions/index",
        "href": "housekeeping-actions/index.html#housekeeping-actions",
        "title": "Housekeeping actions",
        "section": "Housekeeping actions",
        "text": "Housekeeping actions provide for general repository operations such as package cleanup.\nHousekeeping actions"
    },
    {
        "objectID": "housekeeping-actions/index",
        "href": "housekeeping-actions/index.html#package-cleanup-of-untagged-versions",
        "title": "Housekeeping actions > Package cleanup of untagged versions",
        "section": "Package cleanup of untagged versions",
        "text": "Action cleaning up untagged package versions published at ghcr.io.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npackage-name\nPackage name.\nTrue\nstring\ntoken\nToken with package deletion permissions.\nTrue\nstring\npackage-org\nOrganization at which packages are published.\nFalse\nstring\nansys\nallow-last-days\nAvoid removing the last N days images: e.g. ‘2’.\nFalse\nstring\npython-version\nDesired Python version.\nFalse\nstring\n3.10\nPackage cleanup of untagged versions"
    },
    {
        "objectID": "housekeeping-actions/index",
        "href": "housekeeping-actions/index.html#examples",
        "title": "Housekeeping actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "housekeeping-actions/index",
        "href": "housekeeping-actions/index.html#package-cleanup-excluding-certain-versions",
        "title": "Housekeeping actions > Package cleanup excluding certain versions",
        "section": "Package cleanup excluding certain versions",
        "text": "Action cleaning up all package versions published at ghcr.io except for certain tags.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npackage-name\nPackage name.\nTrue\nstring\ntoken\nToken with package deletion permissions.\nTrue\nstring\ntags-kept\nTags to be kept. Pass them as a list: e.g. ‘latest, latest-unstable’.\nTrue\nstring\npackage-org\nOrganization at which packages are published.\nFalse\nstring\nansys\nallow-last-days\nAvoid removing the last N days images: e.g. ‘2’.\nFalse\nstring\npython-version\nDesired Python version.\nFalse\nstring\n3.10\nPackage cleanup excluding certain versions"
    },
    {
        "objectID": "housekeeping-actions/index",
        "href": "housekeeping-actions/index.html#examples",
        "title": "Housekeeping actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "tests-actions/index",
        "href": "tests-actions/index.html#tests-actions",
        "title": "Tests actions",
        "section": "Tests actions",
        "text": "The tests actions allow to run the test suite for a Python library.\nTests actions"
    },
    {
        "objectID": "tests-actions/index",
        "href": "tests-actions/index.html#test-library-action",
        "title": "Tests actions > Test library action",
        "section": "Test library action",
        "text": "This action runs the test suite for a Python library. This action accepts\nmarkers, options, and post arguments to be passed to pytest before executing the\ntest session.\nRun a test suite using pytest.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npython-version\nPython version used for installing and running pytest.\nFalse\nstring\n3.10\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\npytest-markers\nSet of pytest markers in the form of\na string. These markers are used to discretize tests when running the test\nsession.\nFalse\nstring\npytest-extra-args\nSet of additional pytest arguments in the form of a string.\nFalse\npytest-postargs\nDirectory of the test suite and the level of verbosity.\nFalse\nstring\ntests -vv\nrequires-xvfb\nWhether to install X Virtual Frame Buffer (XVFB) and run\nthe whole test session using XVFB. The default value is false.\nFalse\nboolean\nFalse\ncheckout\nWhether to clone the repository in the CI/CD machine. Default value is\ntrue.\nFalse\nboolean\nTrue\nskip-install\nSkip installation process. This should be set to false when using poetry\nas the build-backend because it should be false with poetry as build-backend.\nThe default value is false.\nFalse\nboolean\nFalse\noptional-dependencies-name\nAny valid install target or dependency group defined in the pyproject.toml file,\nor the suffix of a requirement file. The associated dependencies are installed\nbefore running the tests.\nThe default value is 'tests'. Therefore, in case of a requirement file, the\ndefault file is requirements/requirements_tests.txt.\nFalse\nstring\ntests\nTest library action\npytest\ntrue\nfalse\npytest\nfalse\ntrue\nfalse\npyproject.toml\n'tests'\nrequirements/requirements_tests.txt"
    },
    {
        "objectID": "tests-actions/index",
        "href": "tests-actions/index.html#examples",
        "title": "Tests actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#documentation-actions",
        "title": "Documentation actions",
        "section": "Documentation actions",
        "text": "Documentation actions build and deploy the documentation of\na PyAnsys project.\nTo use these actions, a project must use Sphinx\nas documentation parser.\nDocumentation actions"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#doc-build-action",
        "title": "Documentation actions > Doc build action",
        "section": "Doc build action",
        "text": "Build library documentation using Sphinx. The action installs documentation\ndependencies provided either in a requirement file, e.g.\nrequirements/requirements_doc.txt, or in the [doc] section of the\nadditional dependencies in the pyproject.toml file. Assuming that\nsphinx-build is available\nafter installing the documentation dependencies, the action uses it\nto generate documentation from the source. It requires that all the\ndocumentation is contained in the doc/ directory of a project. Depending\non the operating system, the action locates the doc/Makefile\n(resp. doc/make.bat) file for Linux (resp. Windows) and runs the\nmake html (resp. make.bat html) and make pdf\n(resp. make.bat pdf) commands. If desired, the make json (resp.\nmake.bat json) command can also be executed to generate JSON\ndocumentation.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npython-version\nPython version used for installing and running Sphinx.\nFalse\nstring\n3.10\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\nsphinxopts\nSet of options to pass to the Sphinx builder. Default options include\nusing the maximum number of cores in the CPU of the machine and treating\nwarnings as errors.\nThis will override the SPHINXOPTS declared in your Makefile.\nFalse\nstring\n-j auto -W –keep-going\ndependencies\nString of system dependencies to be installed before building the\ndocumentation of the project.\nFalse\nstring\nskip-dependencies-cache\nWhether to ignore dependencies cache or not - for OS libraries.\nTrue\nboolean\nFalse\nrequires-xvfb\nWhether to install X Virtual Frame Buffer (XVFB) and run\nthe whole test session using XVFB. The default value is false.\nIf true, installs X Virtual Frame Buffer (XVFB) and\nruns the whole test session using XVFB. Default value is false.\nThis option is not taken into account when runner os is 'Windows'.\nFalse\nboolean\nFalse\nskip-install\nWhether to skip the installation of the project. The default is false.\nPure documentation projects require that this action be set to false\nbecause there is no Python library associated with the project.\nFalse\nboolean\nFalse\nrequirements-file\nPath to the requirements file in case it needs to be in a specific location.\nThis is useful for non python projects, where you don’t necessarily have a requirements\nfile in the root of the project.\nFalse\nstring\nrequirements/requirements_doc.txt\ncheckout\nWhether to clone the repository in the CI/CD machine. Default value is\ntrue.\nFalse\nboolean\nTrue\nskip-json-build\nWhether to skip the generation of JSON documentation. Default value is\ntrue.\nFalse\nboolean\nTrue\ncheck-links\nWhether to perform external link checks during the generation of\ndocumentation. Default value is true.\nFalse\nboolean\nTrue\nadd-pdf-html-docs-as-assets\nWhether to add PDF and HTML documentation as assets of the HTML\ndocumentation. The HTML documentation is compressed before being added.\nThe PDF file name is expected to be the same as the project name defined\nin the pyproject.toml file. Default value is false.\nThe HTML files are expected to be contained in doc/_build and the\nPDF file is copied in doc/_build/html/_static/assets/download.\nIf such directories do not exist in your repo, the action will fail.\nFalse\nboolean\nFalse\nneeds-quarto\nWhether to add a Quarto cheatsheet to the documentation. Default value is false.\n.. warning:\nFalse\nboolean\nFalse\nDoc build action\nrequirements/requirements_doc.txt\n[doc]\npyproject.toml\ndoc/\ndoc/Makefile\ndoc/make.bat\nmake html\nmake.bat html\nmake pdf\nmake.bat pdf\nmake json\nmake.bat json\nSphinx\ntrue\nfalse\nSphinx\nSPHINXOPTS\nfalse\ntrue\nfalse\nos\n'Windows'\nfalse\nfalse\ntrue\ntrue\ntrue\nfalse\ndoc/_build\ndoc/_build/html/_static/assets/download\nfalse"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#examples",
        "title": "Documentation actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#doc-deploy-dev-action",
        "title": "Documentation actions > Doc deploy dev action",
        "section": "Doc deploy dev action",
        "text": "This action deploys the desired HTML documentation artifact containing the\ndevelopment version of a library to the specified branch of a repository. By\ndefault, the gh-pages branch of the current repository is assumed.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ncname\nThe canonical name (CNAME) containing the documentation.\nTrue\nstring\ntoken\nRequired password, key or token with the correct credentials for deploying the\ndocumentation. If deploying to the current repository, the secrets.GITHUB_TOKEN token\nis enough. For workflows deploying to other repositories, generate and\nuse a token with writing access\nto that repository.\nTrue\nstring\nbot-user\nUse the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.\nTrue\nstring\nbot-email\nUse the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.\nTrue\nstring\ndoc-artifact-name\nName of the HTML documentation artifact. This artifact is expected to\ncontain all the HTML and static files. If it contains a compressed file,\nmake sure you enable the decompress-artifact option.\nFalse\nstring\ndocumentation-html\ndecompress-artifact\nWether to decompress the artifact using ouch as decompression tool. Default value\nis false.\nFalse\nstring\nFalse\nrepository\nRepository name in the form of username/repository to be used for\ndeploying the documentation. The current repository is assumed by default.\nFalse\nstring\ncurrent\nbranch\nBranch name for deploying the documentation. The gh-pages branch is\nused by default.\nFalse\nstring\ngh-pages\ncommit-message\nCommit message used when deploying the documentation.\nFalse\nstring\nDOC: update development documentation\nforce-orphan\nWhether to force the deployment branch to be orphan with only the latest commit or not. Default value\nis true.\nFalse\nstring\nTrue\ncontent-element-id\nIdentifier of the HTML tag that comprises all the content of the article\nor post.\nFalse\nstring\nmain-content\nuse-latest-index-in-landing-page\nUse the latest ‘version/{stable|dev}/index.html’ in the landing page. Default\nvalue is true. By default, the index.html is overwritten by version/{stable|dev}/index.html.\nFalse\nstring\nTrue\nDoc deploy dev action\ngh-pages\nsecrets.GITHUB_TOKEN\ndecompress-artifact\nfalse\nusername/repository\ngh-pages\ntrue\ntrue"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#examples",
        "title": "Documentation actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#doc-deploy-stable-action",
        "title": "Documentation actions > Doc deploy stable action",
        "section": "Doc deploy stable action",
        "text": "This action deploys the desired HTML documentation artifact containing the\nstable version of a library to the specified branch of a repository. By\ndefault, the gh-pages branch of the current repository is assumed.\nIf your project is using ansys/actions@v3 or lower and you would\nlike to update to this version of the actions, see the Enable multi-version documentation .\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ncname\nThe canonical name (CNAME) containing the documentation.\nTrue\nstring\ntoken\nRequired password, key or token with the correct credentials for deploying the\ndocumentation. If deploying to the current repository, the secrets.GITHUB_TOKEN token is\nis enough. For workflows deploying to other repositories, generate and\nuse a token with writing access\nto that repository.\nTrue\nstring\nbot-user\nUse the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.\nTrue\nstring\nbot-email\nUse the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.\nTrue\nstring\ndoc-artifact-name\nName of the HTML documentation artifact. This artifact is expected to\ncontain all the HTML and static files. If it contains a compressed file,\nmake sure you enable the decompress-artifact option.\nFalse\nstring\ndocumentation-html\ndecompress-artifact\nWhether to decompress the doc-artifact-name file using ouch as decompression tool. Default value\nis false.\nFalse\nstring\nFalse\nrepository\nRepository name in the form of username/repository to be used for\ndeploying the documentation. The current repository is assumed by default.\nFalse\nstring\ncurrent\nbranch\nBranch name for deploying the documentation. The gh-pages branch is\nused by default.\nFalse\nstring\ngh-pages\ncommit-message\nCommit message used when deploying the documentation.\nFalse\nstring\nDOC: update development documentation\nrender-last\nThe number of stable versions to be shown in the version drop-down.\nFalse\nstring\n3\nforce-orphan\nWhether to force the deployment branch to be orphan or not. Default value\nis true.\nFalse\nstring\nTrue\ncontent-element-id\nIdentifier of the HTML tag that comprises all the content of the article\nor post.\nFalse\nstring\nmain-content\nindependent-patch-release-docs\nWhether to generate documentation for independent patch releases. Default\nvalue is false. By default, patch releases will overwrite the\ndocumentation of the previous patch release. If this option is enabled,\nthen the documentation of each patch release will be kept.\nFalse\nboolean\nFalse\nuse-latest-index-in-landing-page\nUse the latest ‘version/{stable|dev}/index.html’ in the landing page. Default\nvalue is true. By default, the index.html is overwritten by version/{stable|dev}/index.html.\nFalse\nstring\nTrue\nDoc deploy stable action\ngh-pages\nansys/actions@v3\nsecrets.GITHUB_TOKEN\ndecompress-artifact\ndoc-artifact-name\nfalse\nusername/repository\ngh-pages\ntrue\nfalse\ntrue"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#examples",
        "title": "Documentation actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#doc-changelog-action",
        "title": "Documentation actions > Doc changelog action",
        "section": "Doc changelog action",
        "text": "Adds a newsfragment to the target repository using towncrier\ncontaining the title and number of the pull request.\nThis action will only work on Linux/macOS runners.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ntoken\nUse the PYANSYS_CI_BOT_TOKEN to do a git commit & push.\nThe “contents: write” and “pull-requests: write” permissions\nare required for this action.\nTrue\nstring\nbot-user\nUse the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.\nTrue\nstring\nbot-email\nUse the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.\nTrue\nstring\npython-version\nPython version used for setting up Python.\nFalse\nstring\n3.10\ntowncrier-version\nTowncrier version used for creating fragment files.\nFalse\nstring\n23.11.0\ntoml-version\nToml version used for retrieving the towncrier directory.\nFalse\nstring\n0.10.2\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\nuse-conventional-commits\nUse conventional commits to cateogrize towncrier fragments.\nFalse\nboolean\nFalse\nuse-default-towncrier-config\nUse the default towncrier configuration in the pyproject.toml file.\nFalse\nboolean\nFalse\nDoc changelog action\ntowncrier\ntrue\nfalse"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#examples",
        "title": "Documentation actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#doc-deploy-changelog-action",
        "title": "Documentation actions > Doc deploy changelog action",
        "section": "Doc deploy changelog action",
        "text": "Builds the CHANGELOG using towncrier fragment files for the tagged version.\nCreates a pull request into main with the CHANGELOG updates and deleted\ntowncrier fragment files.\nThis action will only work on Linux/macOS runners.\nPushing a release tag results in this action running twice:\nOnce to run towncrier and consolidate the changelog fragment files\ninto a single update of the CHANGELOG file.\nOnce to release the package after the CHANGELOG file has been updated.\nThere are two options when making a release for your repository:\nYou pushed a tag from a release branch (release-from-main is false)\nThis is the most common case for PyAnsys repositories. The following steps are\nperformed when release-from-main is false:\na) Find a release branch that has the same major and minor version of the\ntag that was pushed. For example, if your tag was “v0.1.2”, it looks for\na release branch named “release/0.1”. If the release branch cannot be found, a\ntemporary branch is used named “maint/changelog-update-vTAG_VERSION”.\nb) Checkout the release or temporary branch, update the CHANGELOG file\nusing towncrier, and push the updates to the respective branch.\nc) Checkout the main branch and create a pull request branch named\n“maint/vTAG_VERSION-changelog”. Delete the pull request branch from the remote\nif it exists, checkout the pull request branch, cherry pick the commit\ncontaining the CHANGELOG file changes from the previous step, push the\npull request branch, and create a pull request from the branch into main.\nd) Checkout the release or temporary branch, delete the tag locally and\non the remote, create the new tag locally, and push the tag on the remote.\nDelete the temporary branch if one was used to update the CHANGELOG file.\ne) Exit on error if the CHANGELOG is updated, so that the package is not released from\nthis instance of the workflow.\nYou pushed a tag from the main branch (release-from-main is true)\nThe following steps are performed when release-from-main is true:\na) Checkout the main branch, update the CHANGELOG file using towncrier,\nand push the updates to the main branch.\nb) Checkout the main branch, delete the tag locally and on the remote,\ncreate the new tag locally, and push the new tag on the remote.\nc) Exit on error if the CHANGELOG is updated, so that the package is not released from\nthis instance of the workflow.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ntoken\nUse the PYANSYS_CI_BOT_TOKEN to do a git commit & push.\nThe “contents: write” and “pull-requests: write” permissions\nare required for this action.\nTrue\nstring\nbot-user\nUse the PYANSYS_CI_BOT_USERNAME as the user for a git commit & push.\nTrue\nstring\nbot-email\nUse the PYANSYS_CI_BOT_EMAIL as the email for a git commit & push.\nTrue\nstring\npython-version\nPython version used for setting up Python.\nFalse\nstring\n3.10\ntowncrier-version\nTowncrier version used for updating the CHANGELOG file.\nFalse\nstring\n23.11.0\ntoml-version\nToml version used for retrieving the towncrier directory.\nFalse\nstring\n0.10.2\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\nrelease-from-main\nIf false, you pushed a tag from a release branch. This is applicable for most\nPyAnsys repositories.\nIf true, you pushed a tag from the main branch.\nSee the description for more information about each of the options.\nFalse\nboolean\nFalse\nuse-upper-case\nUse of uppercase letters in the “type” field of:\nThe PR created into main to add CHANGELOG changes.\nThe commit created in the release branch to add the new\nsection in CHANGELOG.\nIf false, the title is “chore: … CHANGELOG for v…”.\nIf true, the title is “CHORE: … CHANGELOG for v…”.\nFalse\nboolean\nFalse\nDoc deploy changelog action\ntowncrier\ntowncrier\nrelease-from-main\nfalse\nrelease-from-main\nfalse\ntowncrier\nrelease-from-main\ntrue\nrelease-from-main\ntrue\ntowncrier\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue"
    },
    {
        "objectID": "doc-actions/index",
        "href": "doc-actions/index.html#examples",
        "title": "Documentation actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "vulnerability-actions/index",
        "href": "vulnerability-actions/index.html#vulnerability-actions",
        "title": "Vulnerability actions",
        "section": "Vulnerability actions",
        "text": "Vulnerability actions verify that any safety advisories detected in a Python\nlibrary are properly identified and reported, both on the library itself\nand third-party libraries (that is, dependencies).\nVulnerability actions"
    },
    {
        "objectID": "vulnerability-actions/index",
        "href": "vulnerability-actions/index.html#check-vulnerabilities-action",
        "title": "Vulnerability actions > Check vulnerabilities action",
        "section": "Check vulnerabilities action",
        "text": "Users can try out the ansys/check-vulnerabilities action on their local repository\nby doing the following:\nDownload the check_vulnerabilities.py script and the requirements.txt file from\nthe ansys/check-vulnerabilities action folder.\nMove the downloaded files to the root of the repository.\nCreate a virtual environment by running python -m venv .venv.\nActivate the virtual environment.\nInstall the required dependencies by running pip install -r requirements.txt.\nInstall your repository with the command pip install -e ..\nDefine the following environment variables:\nDEPENDENCY_CHECK_TOKEN: A GitHub token with the necessary permissions to access security advisories on the repository you are interested in.\nDEPENDENCY_CHECK_PACKAGE_NAME: The Python package name of your repository. This is the name of the package that you would use in a pip install command.\nDEPENDENCY_CHECK_REPOSITORY: The full name of the repository you are interested in. This is the name of the repository in the format <owner>/<repository>.\nRun the script by running python check_vulnerabilities.py --run-local.\nThe ansys/check-vulnerabilities action needs to be performed on a public repository.\nIf the repository is private, the action will fail due to denied access.\nAction actively checking for library and third party vulnerabilities by\nmeans of the bandit and\nsafety Python packages. These packages\nallow you to identify security issues and vulnerabilities inside your code.\nThis action has two running modes:\nDefault mode: when running on default mode, if a security advisory\nis detected, this action will publish both the security advisory and\nan issue so that end users are informed about existing issues.\nDevelopment mode: repository maintainers are asked to activate\nthe dev-mode option, which will activate both dry-run and\nexit-with-error-on-new-advisory (independently of other configurations\nprovided). This way developers are informed of potential vulnerabilities\nbeing introduced by them on their feature branch (while no new advisories\nare created).\nThe following list of safety vulnerabilities are accepted:\nVulnerability 52495\nVulnerability 62044\nVulnerability 67599\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\ntoken\nToken with write permissions on the repository.\nTrue\nstring\npython-package-name\nPython package name being evaluate as it is shown on PyPI.\nTrue\nstring\nextra-targets\nExtra targets to be evaluated by safety. By default, it is set to an\nempty string. This gets substituted to the library install command as\nfollows (inside <INPUT>):\nFalse\nstring\nsource-directory\nThe source folder of the repository to be evaluated by bandit.\nBy default, it is set to src\nFalse\nstring\nsrc\nrepo-full-name\nThe repository to be evaluated. By default, it is extracted from the\nGitHub context.\nFalse\nstring\ndev-mode\nWhether to run or not this action in development mode. It will activate\nby default the dry-run and exit-with-error-on-new-advisory flags.\nFalse\nboolean\nFalse\ndry-run\nWhether to run or not this action in dry run mode. Dry run mode executes\nall the action steps and prints on screen the results (if any).\nFalse\nboolean\nFalse\nexit-with-error-on-new-advisory\nWhether to exit the action on error if a new advisory is detected.\nThis mode is not recommended on main branches since it will cause the\nworkflow to fail. To be used on feature branches in combination with\ndry-run mode.\nFalse\nboolean\nFalse\nhide-log\nWhether to hide the output log of the GitHub action.\nBy default, the log is available to anyone for public repositories.\nThis would disclose any potential vulnerabilities to anyone.\nFalse\nboolean\nTrue\nupload-reports\nWhether to upload the artifacts containing the vulnerability report.\nBy default, the report artifacts will not be uploaded to hide any potential vulnerabilities?\nFalse\nboolean\nFalse\ncreate-issues\nWhether to create issues for new advisories detected.\nBy default, issues are NOT created for new advisories detected.\nFalse\nboolean\nFalse\ncheckout\nWhether to clone the repository in the CI/CD machine. Default value is\ntrue.\nFalse\nboolean\nTrue\npython-version\nDesired Python version.\nFalse\nstring\n3.10\nCheck vulnerabilities action\nansys/check-vulnerabilities\ncheck_vulnerabilities.py\nrequirements.txt\npython -m venv .venv\npip install -r requirements.txt\npip install -e .\nDEPENDENCY_CHECK_TOKEN\nDEPENDENCY_CHECK_PACKAGE_NAME\npip install\nDEPENDENCY_CHECK_REPOSITORY\n<owner>/<repository>\npython check_vulnerabilities.py --run-local\nansys/check-vulnerabilities\ndev-mode\ndry-run\nexit-with-error-on-new-advisory\nsrc\ndry-run\nexit-with-error-on-new-advisory\nmain\nfeature\ndry-run\ntrue"
    },
    {
        "objectID": "vulnerability-actions/index",
        "href": "vulnerability-actions/index.html#examples",
        "title": "Vulnerability actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#build-actions",
        "title": "Build actions",
        "section": "Build actions",
        "text": "The build actions allow for building artifacts for a Python library. These\nartifacts include both source distribution files and wheels.\nBuild actions"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#build-library-action",
        "title": "Build actions > Build library action",
        "section": "Build library action",
        "text": "Verifies if a Python library builds properly. As a result of a successful\nbuilding process, wheel and source distribution artifacts are generated. This\naction is expected to be used as an independent job.\nUse this action instead of the build-ci-wheels\nif your library is a pure Python project with no source code to be compiled.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\nlibrary-name\nName of the Python library. This is the name used when uploading the wheel\nand source distribution as artifacts. The name should be the same one used\nin the PyPI index.\nTrue\nstring\npython-version\nPython version used for installing and execution of the build process.\nFalse\nstring\n3.1\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\n1\nvalidate-build\nWhether to validate the build process. If true, the build process is\nvalidated. If false, the build process is not validated.\nFalse\nboolean\n1\nBuild library action\ntrue\nfalse\ntrue\nfalse"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#examples",
        "title": "Build actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#build-wheelhouse-action",
        "title": "Build actions > Build wheelhouse action",
        "section": "Build wheelhouse action",
        "text": "Generates compressed artifacts for the wheelhouse of a Python library. The\nwheelhouse contains all the necessary dependencies to install the project.\nThis allows for local installations and avoids the need to connect to the\nonline PyPI index.\nSince version 4.1, the input parameter library-namespace is no longer\nrequired.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\nlibrary-name\nName of the Python library. This is the name used when uploading the wheel\nand source distribution as artifacts. The name should be the same one used\nin the PyPI index.\nTrue\nstring\noperating-system\nName of the operating system where the library is installed.\nTrue\nstring\npython-version\nPython version used for installing and execution of the build wheel process.\nTrue\nstring\ntarget\nOptional target used during the building process.\nFalse\nstring\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\ncheck-licenses\nWhether to check the library’s dependencies license or not. If true. the licenses\nare checked. If false, no license check is performed. By default it is set to\ntrue.\nFalse\nboolean\nTrue\nwhitelist-license-check\nOptional list of packages to ignore during the license check. Separated by a comma.\nOnly used when check-licenses is set to true.\nFalse\nstring\ncheckout\nWhether to do a checkout step or not. If true, the checkout step is performed.\nIf false, the checkout is skipped allowing the workspace from a prior step to\nbe used unaltered. By default it is set to true.\nFalse\nboolean\nTrue\nBuild wheelhouse action\nlibrary-namespace\ntrue\nfalse\ntrue\nfalse\ntrue\ncheck-licenses\ntrue\ntrue\nfalse\ntrue"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#examples",
        "title": "Build actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#build-ci-wheels-action",
        "title": "Build actions > Build CI wheels action",
        "section": "Build CI wheels action",
        "text": "Build wheels for a Python library containing compiled source code. This action\nis expected to be used within a matrix job. Its goal is to generate wheel\nfiles for every combination of operating system, build system, and Python\nversion. The action uses the cibuildwheel behind the scenes.\nThis actions should only be used by libraries including source code that\nneeds to be compiled.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npython-version\nPython version used for building the wheels.\nTrue\nstring\nlibrary-name\nName of the Python library. This is the name used when uploading the wheel\nand source distribution as artifacts. The name should be the same one used\nin the PyPI index.\nTrue\nstring\noperating-system\nName of the operating system where the library is installed.\nTrue\nstring\ncibw-build\nDesired build wheel CPython version.\nFalse\nstring\ncp310-*\ncibw-archs\nDesired build architecture.\nFalse\nstring\nauto\nrequires-pypy\nWhether to generate wheels for wheel files for PyPy in addition to the wheel files for CPython.\nDefault value is false.\nFalse\nboolean\nFalse\nBuild CI wheels action\nfalse"
    },
    {
        "objectID": "build-actions/index",
        "href": "build-actions/index.html#examples",
        "title": "Build actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "migrations/release-pypi-trusted-publisher",
        "href": "migrations/release-pypi-trusted-publisher.html#release-to-pypi-as-a-trusted-publisher",
        "title": "Release to PyPI as a trusted publisher",
        "section": "Release to PyPI as a trusted publisher",
        "text": "Starting on ansys/actions version 6, repository maintainers can benefit from the\nTrusted Publishers release to PyPI approach.\nTraditionally, projects have made use of the PyPI API token to\nupload packages to PyPI. This approach is still supported, but it is recommended to use the\nTrusted Publishers approach when possible. If you are a repository maintainer and you want to\nrelease to PyPI as a trusted publisher, follow these steps:\nContact the PyAnsys Core Team to request your project\nto be added to the list of authorized repositories to release as a trusted publisher.\n(Optional) Create a dedicated release environment on your GitHub repository. This step is\noptional, but it is strongly encouraged. To create a new environment, go to the\nEnvironments\ndocumentation. Contact the PyAnsys Core Team in case of doubts.\nAdapt your release section in your workflow as follows:\nRelease to PyPI as a trusted publisher\nansys/actions\nrelease\nrelease"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#release-actions",
        "title": "Release actions",
        "section": "Release actions",
        "text": "Release actions provide for releasing the various artifacts of a Python library.\nThese actions assume that you have used the Documentation actions\nand the Build actions. The reason is that the artifacts generated during these\nactions are the ones to be released.\nRelease actions"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#release-pypi-private-action",
        "title": "Release actions > Release PyPI private action",
        "section": "Release PyPI private action",
        "text": "Release library artifacts to the PyAnsys private index. Use the\nPYANSYS_PRIVATE_PYPI_TOKEN as the token. Artifacts get downloaded from the\nCI/CD pipeline and are assumed to be named <library-name>-artifacts. This\nfile is expected to contain a wheel and a source distribution file for the\ndesired library.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\nlibrary-name\nName of the Python library to be published.\nTrue\nstring\ntwine-username\nUser name used when uploading to the PyAnsys private index.\nFalse\nstring\n__token__\ntwine-token\nPassword used when uploading to the PyAnsys private index.\nFalse\nstring\nuse-trusted-publisher\nWhether to use the OIDC token for releasing. Default value is false.\nThis is useful when you want to publish to PyPI through a CI/CD pipeline\nas a Trusted Publisher. It is necessary that your repository has been authorized\nto use Trusted Publisher’s. For more information, see\nUsing a Trusted Publisher.\npermissions: id-token: write is mandatory for trusted publishing.\nFalse\nboolean\nFalse\ndry-run\nWhether to run or not this action in testing mode. Testing mode executes\nall the action steps except the releasing artifacts one. This allows\ndevelopers to verify the health of the action once integrated in their\nCI/CD pipelines without actually publishing artifacts. Default value is\nfalse.\nFalse\nboolean\nFalse\nskip-existing\nContinue uploading files if one already exists. Only valid when uploading\nto PyPI. Other implementations may not support this.\nFalse\nboolean\nTrue\npython-version\nPython version for installing and using twine.\nFalse\nstring\n3.10\nindex-name\nThe name of the index endpoint used for uploading the artifacts.\nTrue\nstring\nhttps://pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/upload\nRelease PyPI private action\nPYANSYS_PRIVATE_PYPI_TOKEN\n<library-name>-artifacts\nfalse\npermissions: id-token: write\nfalse"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#examples",
        "title": "Release actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#release-pypi-test-action",
        "title": "Release actions > Release PyPI test action",
        "section": "Release PyPI test action",
        "text": "Release library artifacts to the Test PyPI public index. Use the\nPYANSYS_PYPI_TEST_PAT as the token. Artifacts get downloaded from the\nCI/CD pipeline and are assumed to be named <library-name>-artifacts. This\nfile is expected to contain a wheel file and a source distribution file for\nthe desired library.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\nlibrary-name\nName of the Python library to be published.\nTrue\nstring\ntwine-username\nUser name used when uploading to the public Test PyPI index.\nFalse\nstring\n__token__\ntwine-token\nPassword used when uploading to the public Test PyPI index.\nFalse\nstring\nuse-trusted-publisher\nWhether to use the OIDC token for releasing. Default value is false.\nThis is useful when you want to publish to PyPI through a CI/CD pipeline\nas a Trusted Publisher. It is necessary that your repository has been authorized\nto use Trusted Publisher’s. For more information, see\nUsing a Trusted Publisher.\npermissions: id-token: write is mandatory for trusted publishing.\nFalse\nboolean\nFalse\ndry-run\nWhether to run or not this action in testing mode. Testing mode executes\nall the action steps except the releasing artifacts one. This allows\ndevelopers to verify the health of the action once integrated in their\nCI/CD pipelines without actually publishing artifacts. Default value is\nfalse.\nFalse\nboolean\nFalse\npython-version\nPython version for installing and using twine.\nFalse\nstring\n3.10\nskip-existing\nContinue uploading files if one already exists. Only valid when uploading\nto PyPI. Other implementations may not support this.\nFalse\nboolean\nTrue\nRelease PyPI test action\nPYANSYS_PYPI_TEST_PAT\n<library-name>-artifacts\nfalse\npermissions: id-token: write\nfalse"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#examples",
        "title": "Release actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#release-pypi-public-action",
        "title": "Release actions > Release PyPI public action",
        "section": "Release PyPI public action",
        "text": "Release library artifacts to the PyPI public index. Use the PYPI_TOKEN as\nthe token. Artifacts get downloaded from the CI/CD pipeline and are assumed to be\nnamed <library-name>-artifacts. This file is expected to contain a wheel file\nand a source distribution file for the desired library.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\nlibrary-name\nName of the Python library to be published.\nTrue\nstring\ntwine-username\nUser name used when uploading to the public PyPI index.\nFalse\nstring\n__token__\ntwine-token\nPassword used when uploading to the public PyPI index.\nFalse\nstring\nuse-trusted-publisher\nWhether to use the OIDC token for releasing. Default value is false.\nThis is useful when you want to publish to PyPI through a CI/CD pipeline\nas a Trusted Publisher. It is necessary that your repository has been authorized\nto use Trusted Publisher’s. For more information, see\nUsing a Trusted Publisher.\npermissions: id-token: write is mandatory for trusted publishing.\nFalse\nboolean\nFalse\ndry-run\nWhether to run or not this action in testing mode. Testing mode executes\nall the action steps except the releasing artifacts one. This allows\ndevelopers to verify the health of the action once integrated in their\nCI/CD pipelines without actually publishing artifacts. Default value is\nfalse.\nFalse\nboolean\nFalse\nskip-existing\nContinue uploading files if one already exists. Only valid when uploading\nto PyPI. Other implementations may not support this.\nFalse\nboolean\nTrue\npython-version\nPython version for installing and using twine.\nFalse\nstring\n3.10\nRelease PyPI public action\nPYPI_TOKEN\n<library-name>-artifacts\nfalse\npermissions: id-token: write\nfalse"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#examples",
        "title": "Release actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#release-github-action",
        "title": "Release actions > Release GitHub action",
        "section": "Release GitHub action",
        "text": "Release library artifacts to the GitHub release section. Some minimum\nartifacts are required before running this action. These artifacts include\ndocumentation-html, documentation-pdf, and\n<library-name>-artifacts files. This last file must contain the wheels and\nsource distribution files of the library.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\nlibrary-name\nName of the Python library to be published.\nTrue\nstring\nadditional-artifacts\nString containing a list of additional artifacts to be included in the\nGitHub release.\nFalse\nstring\ndry-run\nWhether to run or not this action in testing mode. Testing mode executes\nall the action steps except the releasing artifacts one. This allows\ndevelopers to verify the health of the action once integrated in their\nCI/CD pipelines without actually publishing artifacts. Default value is\nfalse.\nFalse\nboolean\nFalse\nonly-code\nOnly include the source code in the release. This can be helpful for\nrepositories that don’t create wheels and/or documentation.\nFalse\nboolean\nFalse\nRelease GitHub action\ndocumentation-html\ndocumentation-pdf\n<library-name>-artifacts\nfalse"
    },
    {
        "objectID": "release-actions/index",
        "href": "release-actions/index.html#examples",
        "title": "Release actions > Examples",
        "section": "Examples",
        "text": "Examples"
    },
    {
        "objectID": "migrations/index",
        "href": "migrations/index.html#migration-guide",
        "title": "Migration guide",
        "section": "Migration guide",
        "text": "This guide provides information on new features, breaking changes, how to migrate\nfrom one version of the actions to another, and other upstream dependencies that\nhave been updated.\nMigration guide"
    },
    {
        "objectID": "migrations/index",
        "href": "migrations/index.html#version-v8",
        "title": "Migration guide > Version v8",
        "section": "Version v8",
        "text": "Breaking changes:\nUse secrets for commit and push credentials within ansys/actions/doc-changelog,\nansys/actions/doc-deploy-changelog, ansys/actions/doc-deploy-dev, and\nansys/actions/doc-deploy-stable.\nDeprecated features:\nThe ansys/actions/doc-deploy-index action has been deprecated and will be removed in the next release.\nWith the deprecation of pymeilisearch and the adoption of a static search index via the ansys-sphinx-theme,\nthe ansys/actions/doc-deploy-index action is no longer necessary.\nThe ansys/actions/commit-style action has been renamed to ansys/actions/check-pr-title.\nThe ansys/actions/branch-name-style actions has been removed in favor of\nGitHub rulesets.\nMigration steps:\nAdd the following required inputs to ansys/actions/doc-changelog, ansys/actions/doc-deploy-changelog,\nansys/actions/doc-deploy-dev, and ansys/actions/doc-deploy-stable:\nVersion v8\nv8\nansys/actions/doc-changelog\nansys/actions/doc-deploy-changelog\nansys/actions/doc-deploy-dev\nansys/actions/doc-deploy-stable\nansys/actions/doc-deploy-index\npymeilisearch\nansys-sphinx-theme\nansys/actions/doc-deploy-index\nansys/actions/commit-style\nansys/actions/check-pr-title\nansys/actions/branch-name-style\nansys/actions/doc-changelog\nansys/actions/doc-deploy-changelog\nansys/actions/doc-deploy-dev\nansys/actions/doc-deploy-stable"
    },
    {
        "objectID": "migrations/index",
        "href": "migrations/index.html#version-v7",
        "title": "Migration guide > Version v7",
        "section": "Version v7",
        "text": "New features:\nAdded an optional input to the ansys/actions/build-library action to disable library build\nvalidation on demand using the validate-build: false argument. This is useful when you want to\nskip the library build validation step in the action.\nIncorporated the usage of Trusted Publisher in the\nansys/actions/release-pypi-* actions. This is useful when you want to sign the package before\nuploading it to PyPI.\nMigration steps:\nTo set up your repository to use the ansys/actions/release-pypi-* action with the Trusted Publisher approach,\nsee the release_pypi_trusted_publisher.\nVersion v7\nv7\nansys/actions/build-library\nvalidate-build: false\nansys/actions/release-pypi-*\nansys/actions/release-pypi-*"
    },
    {
        "objectID": "migrations/index",
        "href": "migrations/index.html#version-v6",
        "title": "Migration guide > Version v6",
        "section": "Version v6",
        "text": "New features:\nAdded the ansys/actions/check-vulnerabilities action to check for third-party and first-party vulnerabilities.\nThis is useful when you want to hide the vulnerabilities from the logs, but still want to fail the action if vulnerabilities are found.\nAvoid creating issues by default if vulnerabilities are found in the ansys/actions/check-vulnerabilities action.\nCreate a changelog fragment file for each pull request using towncrier in the ansys/actions/doc-changelog action.\nGenerate a new section in CHANGELOG.md if fragment files exist using towncrier in the ansys/actions/doc-deploy-changelog action.\nBy default, it updates the CHANGELOG in the release branch and creates a pull request into the main branch with the updated CHANGELOG and\ndeleted fragment files.\nSEO improvements. These are implemented inside the doc-deploy-dev\nand the doc-deploy-stable.\nUsers are not required to apply any changes to their conf.py or\n.github/workflows/*.yml files. Noticable changes include:\nNo more redirect from landing page to version/stable/index.html\nGeneration of robots.txt file for avoiding indexing old documentation versions\nGeneration of sitemap.xml file for quicker indexing of version/stable/ pages\nInclusion of canonical link tags in all HTML files for SEO purposes\nExtend ansys/actions/doc-build to be able to run in Windows runners.\nTo buid the documentation in a Windows runner, we install Chocolatey and Miktex.\nAllow ansys/actions/commit-style to work with upper case in the type field of a commit.\nExpected types are upper cases of  conventional commit types.\nBreaking changes:\nUpgrade default vale version from 2.29.6 to 3.4.1 in ansys/actions/doc-style action.\nVale configuration file .vale.ini and Vocab/ANSYS has to be changed.\nMigration steps:\nTo set up your repository to use the ansys/actions/doc-changelog action, see the docs_changelog_action_setup.\nTo set up your repository to use the ansys/actions/doc-deploy-changelog action, see the docs_deploy_changelog_action_setup.\nTo set up your repository to use the ansys/actions/doc-style action, see the docs_style_vale_update.\nVersion v6\nv6\nansys/actions/check-vulnerabilities\nansys/actions/check-vulnerabilities\ntowncrier\nansys/actions/doc-changelog\nCHANGELOG.md\ntowncrier\nansys/actions/doc-deploy-changelog\nconf.py\n.github/workflows/*.yml\nrobots.txt\nansys/actions/doc-build\nChocolatey\nMiktex\nansys/actions/commit-style\nvale\n2.29.6\n3.4.1\nansys/actions/doc-style\n.vale.ini\nVocab/ANSYS\nansys/actions/doc-changelog\nansys/actions/doc-deploy-changelog\nansys/actions/doc-style"
    },
    {
        "objectID": "migrations/index",
        "href": "migrations/index.html#version-v5",
        "title": "Migration guide > Version v5",
        "section": "Version v5",
        "text": "New features:\nAdded ansys/action/check-vulnerabilities to verify third party and first party vulnerabilities.\nThis action uses bandit and safety to detect vulnerabilities in the code and dependencies, respectively.\nAdded ansys/actions/docker-style to detect Dockerfile style issues using hadolint.\nAllow vale version input in ansys/actions/doc-style action. By default, 2.29.6 is used.\nAllow using the twine --skip-existing flag in the ansys/actions/release-pypi-* actions.\nAllow using the ansys/actions/doc-build action to build documentation using a dedicated requirements file (and\nconsequently, no need to have a Python project to use it).\nAllow for independent documentation releases in case of patch release when using ansys/actions/doc-deploy-stable action.\nThis will create independent documentation versions for patch releases.\nBreaking changes:\nUpgrade actions/upload-artifact and actions/download-artifact to version v4.\nUpgrade actions/setup-python to version v5.\nMigration steps:\nSince artifacts are uploaded/downloaded using the new actions/*-artifact, artifact names cannot\nbe duplicated inside the workflow. Also, versions v3 and v4 are incompatible with each other. If you are using\nversion v3 independently inside your workflow, you need to upgrade to version v4.\nThe upgrade to actions/setup-python version v5 is not mandatory, but it is recommended to use the latest version.\nHowever, it has been seen that in Windows self-hosted runners, if a certain Python version is not already stored in the\ncache, the action fails. This is a known issue and the workaround is to use the previous version of the action.\nDependency changes:\nUpgrade actions/checkout to version v4.\nUpgrade pypa/cibuildwheel to version v2.16.2.\nUpgrade peter-evans/create-or-update-comment to version v4.\nUpgrade vimtor/action-zip to version v1.2.\nVersion v5\nv5\nansys/action/check-vulnerabilities\nbandit\nsafety\nansys/actions/docker-style\nhadolint\nvale\nansys/actions/doc-style\n2.29.6\n--skip-existing\nansys/actions/release-pypi-*\nansys/actions/doc-build\nansys/actions/doc-deploy-stable\nactions/upload-artifact\nactions/download-artifact\nv4\nactions/setup-python\nv5\nactions/*-artifact\nv3\nv4\nv3\nv4\nactions/setup-python\nv5\nactions/checkout\nv4\npypa/cibuildwheel\nv2.16.2\npeter-evans/create-or-update-comment\nv4\nvimtor/action-zip\nv1.2"
    },
    {
        "objectID": "migrations/index",
        "href": "migrations/index.html#version-v4",
        "title": "Migration guide > Version v4",
        "section": "Version v4",
        "text": "Breaking changes:\nMulti-version documentation deployment using ansys/actions/doc-deploy-stable and ansys/actions/doc-deploy-dev.\nMigration steps:\nVisit Enable multi-version documentation\nfor a detailed migration guide.\nVersion v4\nv4\nansys/actions/doc-deploy-stable\nansys/actions/doc-deploy-dev"
    },
    {
        "objectID": "licenses-actions/index",
        "href": "licenses-actions/index.html#licenses-actions",
        "title": "Licenses actions",
        "section": "Licenses actions",
        "text": "Licenses actions verify that any dependency used by a Python library uses\nPyAnsys authorized open source licenses.\nLicenses actions"
    },
    {
        "objectID": "licenses-actions/index",
        "href": "licenses-actions/index.html#check-licenses-action",
        "title": "Licenses actions > Check licenses action",
        "section": "Check licenses action",
        "text": "Verifies if the licenses of the dependencies installed in the current\nenvironment are compliant with PyAnsys guidelines. This action is assumed to\nbe used in its own job step. It clones the project and installs the project with\nits runtime dependencies.\nThis action relies on PyPI metadata to identify the license for each package.\nIf the metadata are flawed or not included, it may lead to\ninconclusive results. In those cases, please perform a thorough review of the\npackage you are using. Additionally, it is advised not to blindly rely on PyPI metadata.\nEven though packages may define their license as of a certain type, the\npackage could be not applying properly its licensing conditions.\nAnsys\nApache\nBSD\nGNU\nHPND\nISC\nMIT\nMPL\nPSF\naiohappyeyeballs\nansys-corba\nansys-turbogrid-api\ndefusedxml\ndistlib\nfilelock\nmatplotlib\npypiwin32\npywin32\nreuse\ntyping\ntyping-extensions\ntyping_extensions\nusd-core\nWMI\nIf a certain project requires a license or package that is not supported,\nopen an issue in the\nofficial ansys/actions repository. For additional support, please\ncontact the PyAnsys support.\nSource code for this action \nInput\nDescription\nRequired\nType\nDefault\npython-version\nPython version used for installing and executing licence check.\nFalse\nstring\n3.10\nuse-python-cache\nWhether to use the Python cache for installing previously downloaded\nlibraries. If true, previously downloaded libraries are installed from the\nPython cache. If false, libraries are downloaded from the PyPI index.\nFalse\nboolean\nTrue\ntarget\nOptional target used during the building process.\nFalse\nstring\nwhitelist-license-check\nOptional list of packages to ignore during the license check. Separated by a comma.\nFalse\nstring\nskip-install\nWhether to skip the installation of the project. The default is false.\nIf used in combination with other actions, it might not be needed to install\nthe project.\nFalse\nboolean\nFalse\ncheckout\nWhether to clone the repository in the CI/CD machine. Default value is\ntrue.\nFalse\nboolean\nTrue\nCheck licenses action\nProjects requiring additional licenses or packages\ntrue\nfalse\nfalse\ntrue"
    },
    {
        "objectID": "licenses-actions/index",
        "href": "licenses-actions/index.html#examples",
        "title": "Licenses actions > Examples",
        "section": "Examples",
        "text": "Examples"
    }
]