name: >
  Check licenses action

description: 
  Verifies if the licenses of the dependencies installed in the current
  environment are compliant with PyAnsys guidelines. This action is assumed to
  be used in its own job step. It clones the project and installs the project with
  its runtime dependencies.

inputs:

  # Optional inputs

  python-version:
    description: >
      Python version used for installing and running ``pre-commit``.
    default: '3.10'
    required: false
    type: string

  use-python-cache:
    description: >
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed form the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      uses: actions/checkout@v3

    - name: "Set up Python"
      uses: pyansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Update pip, pip-licenses and install the project"
      shell: bash
      run: |
        python -m pip install -U pip pip-licenses
        python -m pip install .

    - name: "Download the list of accepted and ignored packages"
      shell: bash
      run: |
        wget https://raw.githubusercontent.com/pyansys/actions/main/check-licenses/accepted-licenses.txt
        wget https://raw.githubusercontent.com/pyansys/actions/main/check-licenses/ignored-packages.txt

    - name: "Check licences of packages"
      shell: bash
      run: |
        # Load accepted licenses
        mapfile licenses_from_txt < accepted-licenses.txt
        accepted_licenses=''
        for license in ${licenses_from_txt[*]}; do accepted_licenses+="$license\|"; done
          accepted_licenses=${accepted_licenses::-2}
        echo "Accepted licenses: $accepted_licenses"

        # Load accepted packages
        mapfile ignored_packages_from_txt < ignored-packages.txt
        ignored_packages=''
        for pckg in ${ignored_packages_from_txt[*]}; do ignored_packages+="$pckg "; done
          ignored_packages_from_txt=${ignored_packages_from_txt::-1}
        echo "Ignored packages: $ignored_packages"

        # Verify if the Python environment contains invalid licenses
        if [[ -z $(pip-licenses --summary --ignore-packages $ignored_packages | grep -v $accepted_licenses | tail -n+2) ]]; then
          echo "All licenses are valid."
        else
          echo -e "\nInvalid licenses found:\n"
          pip-licenses --ignore-packages $ignored_packages | grep -v $accepted_licenses | awk 'NR>1 {print $1 " " $2 " has " $3 " license"}'
          exit 1
        fi
