# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: |
  Check licenses action

description: |
  Verifies if the licenses of the dependencies installed in the current
  environment are compliant with PyAnsys guidelines. This action is assumed to
  be used in its own job step. It clones the project and installs the project with
  its runtime dependencies.

  .. note::

    **This action relies on PyPI metadata to identify the license for each package.**

    If the metadata are flawed or not included, it may lead to
    inconclusive results. In those cases, please perform a thorough review of the
    package you are using. Additionally, it is advised not to blindly rely on PyPI metadata.
    Even though packages may define their license as of a certain type, the
    package could be not applying properly its licensing conditions.

  .. jinja:: check-licenses

      .. grid:: 1 1 1 2
          :gutter: 2

          .. grid-item-card:: :octicon:`codescan-checkmark` Accepted third party licenses

              {% for license in accepted_licenses %}
              * {{ license }}
              {% endfor %}

          .. grid-item-card:: :octicon:`package` Ignored packages

              {% for package in ignored_packages %}
              * {{ package }}
              {% endfor %}

  .. admonition:: Projects requiring additional licenses or packages

    If a certain project requires a license or package that is not supported,
    `open an issue <https://github.com/ansys/actions/issues>`_ in the
    `official ansys/actions repository
    <https://github.com/ansys/actions>`_. For additional support, please
    contact the `PyAnsys support <mailto:support@pyansys.com>`_.

inputs:

  # Optional inputs

  python-version:
    description: |
      Python version used for installing and executing licence check.
    default: '3.11'
    required: false
    type: string

  use-python-cache:
    description: |
      Whether to use the Python cache for installing previously downloaded
      libraries. If ``true``, previously downloaded libraries are installed from the
      Python cache. If ``false``, libraries are downloaded from the PyPI index.
    required: false
    default: true
    type: boolean

  target:
    description: |
      Optional target used during the building process.
    required: false
    default: ''
    type: string

  whitelist-license-check:
    description: |
      Optional list of packages to ignore during the license check. Separated by a comma.
    required: false
    default: ''
    type: string

  skip-install:
    description: |
      Whether to skip the installation of the project. The default is ``false``.
      If used in combination with other actions, it might not be needed to install
      the project.
    default: false
    required: false
    type: boolean

  checkout:
    description: |
      Whether to clone the repository in the CI/CD machine. Default value is
      ``true``.
    default: true
    required: false
    type: boolean

  use-uv:
    description: |
      Whether to use uv as the default package manager instead of pip. Default value is ``true``.
    default: true
    required: false
    type: boolean

runs:
  using: "composite"
  steps:

    - name: Check python version
      id: check-python-version
      shell: bash
      env:
        PYTHON_VERSION: ${{ inputs.python-version }}
      run: |
        MIN_VERSION="3.10"
        if [ "$(printf '%s\n' "$PYTHON_VERSION" "$MIN_VERSION" | sort -V | head -n1)" != "$MIN_VERSION" ]; then
          echo "PYTHON_TOO_OLD=true" >> "${GITHUB_OUTPUT}"
        fi

    - name: Break if Python version is too old
      uses: ansys/actions/_logging@main
      if: steps.check-python-version.outputs.PYTHON_TOO_OLD == 'true'
      with:
        level: "ERROR"
        message: >
          The check-licenses action leverages Ansys fork of pip-licenses.
          This package requires Python 3.10 or higher.

    - name: "Install Git and clone project"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      if: ${{ inputs.checkout == 'true' }}

    - name: "Set up Python"
      uses: ansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}
        provision-uv: ${{ inputs.use-uv }}

    - name: "Update pip"
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python' || 'python -m pip install' }}
      run: |
        $INSTALL_COMMAND -U pip

    - name: Clone ansys/pip-licenses on main branch
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: ansys/pip-licenses
        path: "external/pip-licenses"
        ref: "main"

    - name: Install ansys/pip-licenses main branch
      shell: bash
      env:
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python --no-cache' || 'python -m pip install --no-cache-dir' }}
      run: |
        $INSTALL_COMMAND external/pip-licenses

    - name: "Check if specific target is requested"
      id: specific-target-requested
      shell: bash
      env:
        TARGET: ${{ inputs.target }}
      run: |
        echo "install_target=$( [[ "${TARGET}" == '' ]] && echo '.' || echo ".[${TARGET}]")" >> ${GITHUB_OUTPUT}

    - name: "Install Python library"
      if: inputs.skip-install == 'false'
      shell: bash
      env:
        INSTALL_TARGET: ${{ steps.specific-target-requested.outputs.install_target }}
        INSTALL_COMMAND: ${{ inputs.use-uv == 'true' && 'uv pip install --no-managed-python' || 'python -m pip install' }}
      run: ${INSTALL_COMMAND} "$INSTALL_TARGET"

    - name:  "Install wget on Windows"
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Check if wget is installed - if not, install it
        if (-not (Get-Command wget -ErrorAction SilentlyContinue)) {
            Write-Host "wget is not installed. Installing using Chocolatey..."
            # Install wget using Chocolatey
            choco install wget -y
        } else {
            Write-Host "wget is already installed."
        }

    - name:  "Update bash on macOS"
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install bash

    - name: "Download the list of accepted and ignored packages"
      shell: bash
      run: |
        wget https://raw.githubusercontent.com/ansys/actions/main/check-licenses/accepted-licenses.txt
        wget https://raw.githubusercontent.com/ansys/actions/main/check-licenses/ignored-packages.txt

    - name: "Process whitelisted packages provided on input"
      shell: bash
      env:
        WHITELIST_LICENSE_CHECK: ${{ inputs.whitelist-license-check }}
      run: |
        if [[ -n "${WHITELIST_LICENSE_CHECK}" ]]; then
          echo "Whitelisted packages: ${WHITELIST_LICENSE_CHECK}"
          # Split the input string by comma, trim values and append them to the ignored-packages.txt file
          IFS=',' read -ra whitelist <<< "${WHITELIST_LICENSE_CHECK}"
          for package in "${whitelist[@]}"; do
            echo "Ignoring whitelisted package: $package"
            echo "$package" >> ignored-packages.txt
          done
        fi

    - name: "Logging licenses and packages"
      id: log-licenses-and-packages
      shell: bash
      run: |
        # Load accepted licenses
        mapfile licenses_from_txt < accepted-licenses.txt
        accepted_licenses='Accepted licenses:\n'
        for license in ${licenses_from_txt[*]}; do accepted_licenses+="$license\n"; done
        echo "LOG_ACCEPTED_LICENSES=$accepted_licenses" >> ${GITHUB_OUTPUT}

        # Load accepted packages
        mapfile ignored_packages_from_txt < ignored-packages.txt
        ignored_packages='Ignored packages:\n'
        for pckg in ${ignored_packages_from_txt[*]}; do ignored_packages+="$pckg\n"; done
        echo "LOG_IGNORED_PACKAGES=$ignored_packages" >> ${GITHUB_OUTPUT}

    - name: Log ignored packages and accepted licenses
      uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: |
          Licenses accepted and packages ignored
          ----------------------------------------------

          ${{ steps.log-licenses-and-packages.outputs.LOG_ACCEPTED_LICENSES }}

          ${{ steps.log-licenses-and-packages.outputs.LOG_IGNORED_PACKAGES }}

    - name: "Check licences of packages"
      shell: bash
      run: |
        # Load accepted licenses
        mapfile licenses_from_txt < accepted-licenses.txt
        accepted_licenses=''
        for license in ${licenses_from_txt[*]}; do accepted_licenses+="$license\|"; done
        accepted_licenses=${accepted_licenses::-2}

        # Load accepted packages
        mapfile ignored_packages_from_txt < ignored-packages.txt
        ignored_packages=''
        for pckg in ${ignored_packages_from_txt[*]}; do ignored_packages+="$pckg "; done
        ignored_packages_from_txt=${ignored_packages_from_txt::-1}

        # Verify if the Python environment contains invalid licenses
        if [[ -z $(pip-licenses --summary --ignore-packages $ignored_packages | grep '^[[:space:]]*[0-9]' | grep -v $accepted_licenses ) ]]; then
          echo "All licenses are valid."
        else
          echo -e "\nInvalid licenses found:\n"
          pip-licenses --ignore-packages $ignored_packages | awk 'NR>1 && NF >= 3 && $2 ~ /^[0-9]+(\.[0-9]+)*$/' | grep -v $accepted_licenses | awk '{ for (i=3; i<=NF; i++) license = license $i (i==NF ? "" : " "); print $1 " " $2 " has " license; license="" }'
          # print all packages
          echo -e "\n\n"
          pip-licenses --ignore-packages $ignored_packages
          exit 1
        fi
