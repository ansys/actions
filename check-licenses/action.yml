name: "Check licenses"
description: "Check if package licenses in the current environment are among the accepted ones"

inputs:
  python-version:
    description: 'Desired Python version.'
    default: '3.10'
    required: false
    type: string
  use-python-cache:
    description: 'Whether to use Python cache or not. Requires a pyproject.toml file.'
    required: false
    default: true
    type: boolean
  skip-install:
    description: 'Skip project installation.'
    default: false
    required: false
    type: boolean

runs:
  using: "composite"
  steps:
    - name: "Install Git and clone project"
      if: inputs.skip-install == 'false'
      uses: actions/checkout@v3

    - name: "Set up Python"
      if: inputs.skip-install == 'false'
      uses: pyansys/actions/_setup-python@main
      with:
        python-version: ${{ inputs.python-version }}
        use-cache: ${{ inputs.use-python-cache }}

    - name: "Update pip"
      if: inputs.skip-install == 'false'
      shell: bash
      run: python -m pip install -U pip

    - name: "Install Python library"
      if: inputs.skip-install == 'false'
      shell: bash
      run: python -m pip install .

    - name: "Check licences of packages"
      shell: bash
      run: |
        python -m pip install pip-licenses
        wget https://raw.githubusercontent.com/pyansys/actions/f06b839725de78136d4f797b95d5c6458c689cd3/check-licenses/accepted-licenses.txt
        wget https://raw.githubusercontent.com/pyansys/actions/f06b839725de78136d4f797b95d5c6458c689cd3/check-licenses/ignored-packages.txt
        mapfile licenses_from_txt < accepted-licenses.txt
        echo "Accept licences if they contain:"
        accepted_licenses=''
        for license in ${licenses_from_txt[*]}; do echo $license && accepted_licenses+="$license\|"; done
        accepted_licenses=${accepted_licenses::-2}
        mapfile ignored_packages_from_txt < ignored-packages.txt
        echo "Ignored (trusted) packages are:"
        ignored_packages=''
        for pckg in ${ignored_packages_from_txt[*]}; do echo $pckg && ignored_packages+="$pckg "; done
        ignored_packages_from_txt=${ignored_packages_from_txt::-1}
        if [[ -z $(pip-licenses --summary --ignore-packages $ignored_packages | grep -v $accepted_licenses | tail -n+2) ]]; then
          echo "All licenses are valid"
        else
          echo "Failing action: Invalid licenses found. The invalid licenses and its associated packages are:"
          pip-licenses --ignore-packages $ignored_packages | grep -v $accepted_licenses
          exit 1
        fi
        pip uninstall -y pip-licenses