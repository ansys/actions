name: >
  Lint Dockerfile

description: >
  Evaluate the quality of your project Dockerfile(s) by using `hadolint
  <https://github.com/hadolint/hadolint/>`_. This action is expected to be used within a
  matrix job to lint Dockerfile(s) from multiple directories. The action uses `hadolint-gh-action
  <https://github.com/jbergstroem/hadolint-gh-action>`_ behind the scenes. If you want to evaluate multiple
  Dockerfiles contained in various directories of the provided directory, use the recursive option.

  This action emphasizes the fact of having Dockerfile(s) contained inside the 'docker' directory in the
  root of the project. Exceptions can be added as it is the case for the ''.devcontainer' directory.

  .. warning::

      This action only looks for docker files named Dockerfile.
      A docker file like Dockerfile.linux will not be linted.
      Two checks are performed and failing any of them results in the action failure:
      - the root of the project must contain a 'docker' directory;
      - the provided directory must be allowed, i.e. is either 'docker' or '.devcontainer'.

inputs:

  # Required inputs

  directory:
    description: >
      Directory from which to search for Dockerfile(s).
    required: true
    type: string

  # Optional inputs

  recursive:
    description: >
      Search for Dockerfile(s) recursively.
    required: false
    default: false
    type: bool

  error-level:
    description: >
      Fail action based on hadolint output (-1: never, 0: error, 1: warning, 2: info)
    required: false
    default: 2
    type: int

runs:
  using: "composite"
  steps:

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check that directory 'docker' exists at the root of the repository.
          If it does not, then the rest of the action should not be performed.

    - name: "Check if docker directory exists"
      shell: bash
      run: |
        if [ -d "${{ github.workspace }}/docker" ]; then
          echo "HAS_DOCKER_DIR=true" >> $GITHUB_ENV
        else
          echo "HAS_DOCKER_DIR=false" >> $GITHUB_ENV
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.HAS_DOCKER_DIR == 'false'
      with:
        level: "WARNING"
        message: >
          Exit action as no 'docker' directory exists at the root of the
          repository. Except in special cases, e.g. '.devcontainer', we
          emphasize that docker files are expected to be in the 'docker'
          directory at the root of the repository.

    - name: "Exit workflow"
      if: env.HAS_DOCKER_DIR == 'false'
      shell: bash
      run: exit 1

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check that '${{ inputs.directory }}' is among allowed directories, i.e.
          'docker' and '.devcontainer'.

    # Changes performed in allowed_working_dirs should be applied to the code-style action.
    - name: "Check provided directory"
      shell: bash
      run: |
        allowed_working_dirs=("docker" ".devcontainer")
        is_allowed=false
        for dir in "${allowed_working_dirs[@]}"
        do
          if [ "$dir" == "${{ inputs.directory }}" ] ; then
            is_allowed=true
          fi
        done
        echo "DIRECTORY_ALLOWED=$is_allowed" >> $GITHUB_ENV

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.DIRECTORY_ALLOWED == 'false'
      with:
        level: "ERROR"
        message: >
          Exit action because the provided directory isn't allowed.

    - name: "Exit workflow"
      if: env.DIRECTORY_ALLOWED == 'false'
      shell: bash
      run: exit 1

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.DIRECTORY_ALLOWED == 'true'
      with:
        level: "INFO"
        message: >
          Lint directory '${{ github.workspace }}/${{ inputs.directory }}'.

    - name: "Run Hadolint"
      if: env.DIRECTORY_ALLOWED == 'true'
      uses: jbergstroem/hadolint-gh-action@v1
      with:
        dockerfile: ${{ inputs.recursive == 'true' && format('{0}/**/Dockerfile', inputs.directory) || format('{0}/Dockerfile', inputs.directory) }}
        error_level: ${{ inputs.error-level }}
