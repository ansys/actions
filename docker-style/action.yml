name: >
  Lint Dockerfile

description: >
  Evaluate the quality of your project Dockerfile(s) by using `hadolint
  <https://github.com/hadolint/hadolint/>`_. This action is expected to
  be used within a matrix job to lint Dockerfile(s) from multiple directories.
  The action uses `hadolint-gh-action
  <https://github.com/jbergstroem/hadolint-gh-action>`_ behind the scenes.
  If you want to evaluate multiple Dockerfiles contained in various
  directories of the provided directory, use the recursive option.
  When linting a Dockerfile dedicated to Windows, one should use hadolint
  shell pragma to avoid false positives from ShellCheck, see `hadolint shell pragma
  <https://github.com/hadolint/hadolint/pull/708>`_.

  .. note::

      This action emphasizes the fact of having Dockerfile(s) contained inside the
      'docker' directory in the root of the project.

  .. warning::

      This action only looks for docker files named Dockerfile.
      A docker file like Dockerfile.linux will not be linted.

inputs:

  # Optional inputs

  directory:
    description: >
      Directory from which to search for Dockerfile(s).
    required: false
    default: docker
    type: string

  recursive:
    description: >
      Search for Dockerfile(s) recursively.
    required: false
    default: false
    type: bool

  error-level:
    description: >
      Fail action based on hadolint output (-1: never, 0: error,1: warning,
      2: info)
    required: false
    default: 2
    type: int

runs:
  using: "composite"
  steps:

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check that directory 'docker' exists at the root of the repository.
          If it does not, then a warning is emitted.

    - name: "Check if docker directory exists"
      shell: bash
      run: |
        if [ -d "${{ github.workspace }}/docker" ]; then
          echo "HAS_DOCKER_DIR=true" >> $GITHUB_ENV
        else
          echo "HAS_DOCKER_DIR=false" >> $GITHUB_ENV
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.HAS_DOCKER_DIR == 'false'
      with:
        level: "WARNING"
        message: >
          No 'docker' directory found. Except in special cases, e.g.
          '.devcontainer', we emphasize that docker files are stored in the
          'docker' directory at the root of the repository.

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      with:
        level: "INFO"
        message: >
          Check that directory
          '${{ github.workspace }}/${{ inputs.directory }}' exists. If not,
          a warning is raised and nothing is done.

    - name: "Check if directory input exists"
      shell: bash
      run: |
        if [ -d "${{ github.workspace }}/${{ inputs.directory }}" ]; then
          echo "DIRECTORY_EXISTS=true" >> $GITHUB_ENV
        else
          echo "DIRECTORY_EXISTS=false" >> $GITHUB_ENV
        fi

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.DIRECTORY_EXISTS == 'true'
      with:
        level: "INFO"
        message: >
          Lint directory '${{ github.workspace }}/${{ inputs.directory }}'.

    - name: "Run Hadolint"
      if: env.DIRECTORY_EXISTS == 'true'
      uses: jbergstroem/hadolint-gh-action@v1
      with:
        dockerfile: >-
          ${{
            inputs.recursive == 'true' &&
            format('{0}/**/Dockerfile', inputs.directory) ||
            format('{0}/Dockerfile', inputs.directory)
          }}
        error_level: ${{ inputs.error-level }}

    # ------------------------------------------------------------------------

    - uses: ansys/actions/_logging@main
      if: env.DIRECTORY_EXISTS == 'false'
      with:
        level: "WARNING"
        message: >
          Directory '${{ github.workspace }}/${{ inputs.directory }}' does not
          exists.
